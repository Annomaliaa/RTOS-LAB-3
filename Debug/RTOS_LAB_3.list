
RTOS_LAB_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a258  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800a428  0800a428  0001a428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a9d8  0800a9d8  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a9d8  0800a9d8  0001a9d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a9e0  0800a9e0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a9e0  0800a9e0  0001a9e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a9e4  0800a9e4  0001a9e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a9e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b08  200001e0  0800abc8  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ce8  0800abc8  00024ce8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a178  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003466  00000000  00000000  0003a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014e8  00000000  00000000  0003d7f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000013b0  00000000  00000000  0003ecd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045e3  00000000  00000000  00040088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017313  00000000  00000000  0004466b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dca95  00000000  00000000  0005b97e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138413  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006a7c  00000000  00000000  00138464  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a410 	.word	0x0800a410

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a410 	.word	0x0800a410

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f90:	f000 fde4 	bl	8001b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f94:	f000 f866 	bl	8001064 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f98:	f000 f8fc 	bl	8001194 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f9c:	f000 f8d0 	bl	8001140 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fa0:	f002 fd7c 	bl	8003a9c <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex */
  MutexHandle = osMutexNew(&Mutex_attributes);
 8000fa4:	481c      	ldr	r0, [pc, #112]	; (8001018 <main+0x8c>)
 8000fa6:	f002 fed5 	bl	8003d54 <osMutexNew>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4a1b      	ldr	r2, [pc, #108]	; (800101c <main+0x90>)
 8000fae:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Sem */
  SemHandle = osSemaphoreNew(1, 1, &Sem_attributes);
 8000fb0:	4a1b      	ldr	r2, [pc, #108]	; (8001020 <main+0x94>)
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f002 ff53 	bl	8003e60 <osSemaphoreNew>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	4a19      	ldr	r2, [pc, #100]	; (8001024 <main+0x98>)
 8000fbe:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fc0:	4a19      	ldr	r2, [pc, #100]	; (8001028 <main+0x9c>)
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4819      	ldr	r0, [pc, #100]	; (800102c <main+0xa0>)
 8000fc6:	f002 fe18 	bl	8003bfa <osThreadNew>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	4a18      	ldr	r2, [pc, #96]	; (8001030 <main+0xa4>)
 8000fce:	6013      	str	r3, [r2, #0]

  /* creation of TaskA */
  TaskAHandle = osThreadNew(StartTaskA, NULL, &TaskA_attributes);
 8000fd0:	4a18      	ldr	r2, [pc, #96]	; (8001034 <main+0xa8>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	4818      	ldr	r0, [pc, #96]	; (8001038 <main+0xac>)
 8000fd6:	f002 fe10 	bl	8003bfa <osThreadNew>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	4a17      	ldr	r2, [pc, #92]	; (800103c <main+0xb0>)
 8000fde:	6013      	str	r3, [r2, #0]

  /* creation of TaskB */
  TaskBHandle = osThreadNew(StartTaskB, NULL, &TaskB_attributes);
 8000fe0:	4a17      	ldr	r2, [pc, #92]	; (8001040 <main+0xb4>)
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	4817      	ldr	r0, [pc, #92]	; (8001044 <main+0xb8>)
 8000fe6:	f002 fe08 	bl	8003bfa <osThreadNew>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a16      	ldr	r2, [pc, #88]	; (8001048 <main+0xbc>)
 8000fee:	6013      	str	r3, [r2, #0]

  /* creation of TaskC */
  TaskCHandle = osThreadNew(StartTaskC, NULL, &TaskC_attributes);
 8000ff0:	4a16      	ldr	r2, [pc, #88]	; (800104c <main+0xc0>)
 8000ff2:	2100      	movs	r1, #0
 8000ff4:	4816      	ldr	r0, [pc, #88]	; (8001050 <main+0xc4>)
 8000ff6:	f002 fe00 	bl	8003bfa <osThreadNew>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4a15      	ldr	r2, [pc, #84]	; (8001054 <main+0xc8>)
 8000ffe:	6013      	str	r3, [r2, #0]

  /* creation of PrintTask */
  PrintTaskHandle = osThreadNew(StartPrintTask, NULL, &PrintTask_attributes);
 8001000:	4a15      	ldr	r2, [pc, #84]	; (8001058 <main+0xcc>)
 8001002:	2100      	movs	r1, #0
 8001004:	4815      	ldr	r0, [pc, #84]	; (800105c <main+0xd0>)
 8001006:	f002 fdf8 	bl	8003bfa <osThreadNew>
 800100a:	4603      	mov	r3, r0
 800100c:	4a14      	ldr	r2, [pc, #80]	; (8001060 <main+0xd4>)
 800100e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001010:	f002 fd68 	bl	8003ae4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001014:	e7fe      	b.n	8001014 <main+0x88>
 8001016:	bf00      	nop
 8001018:	0800a568 	.word	0x0800a568
 800101c:	20000254 	.word	0x20000254
 8001020:	0800a578 	.word	0x0800a578
 8001024:	20000258 	.word	0x20000258
 8001028:	0800a4b4 	.word	0x0800a4b4
 800102c:	08001271 	.word	0x08001271
 8001030:	20000240 	.word	0x20000240
 8001034:	0800a4d8 	.word	0x0800a4d8
 8001038:	08001281 	.word	0x08001281
 800103c:	20000244 	.word	0x20000244
 8001040:	0800a4fc 	.word	0x0800a4fc
 8001044:	08001385 	.word	0x08001385
 8001048:	20000248 	.word	0x20000248
 800104c:	0800a520 	.word	0x0800a520
 8001050:	08001489 	.word	0x08001489
 8001054:	2000024c 	.word	0x2000024c
 8001058:	0800a544 	.word	0x0800a544
 800105c:	0800158d 	.word	0x0800158d
 8001060:	20000250 	.word	0x20000250

08001064 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b094      	sub	sp, #80	; 0x50
 8001068:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106a:	f107 031c 	add.w	r3, r7, #28
 800106e:	2234      	movs	r2, #52	; 0x34
 8001070:	2100      	movs	r1, #0
 8001072:	4618      	mov	r0, r3
 8001074:	f006 fa33 	bl	80074de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001078:	f107 0308 	add.w	r3, r7, #8
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <SystemClock_Config+0xd4>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001090:	4a29      	ldr	r2, [pc, #164]	; (8001138 <SystemClock_Config+0xd4>)
 8001092:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001096:	6413      	str	r3, [r2, #64]	; 0x40
 8001098:	4b27      	ldr	r3, [pc, #156]	; (8001138 <SystemClock_Config+0xd4>)
 800109a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80010a4:	2300      	movs	r3, #0
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	4b24      	ldr	r3, [pc, #144]	; (800113c <SystemClock_Config+0xd8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010b0:	4a22      	ldr	r2, [pc, #136]	; (800113c <SystemClock_Config+0xd8>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <SystemClock_Config+0xd8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010d8:	2310      	movs	r3, #16
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010e2:	2304      	movs	r3, #4
 80010e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e6:	2302      	movs	r3, #2
 80010e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010ea:	2302      	movs	r3, #2
 80010ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 fb80 	bl	80027f8 <HAL_RCC_OscConfig>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80010fe:	f000 fb15 	bl	800172c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001102:	230f      	movs	r3, #15
 8001104:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001106:	2302      	movs	r3, #2
 8001108:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001118:	f107 0308 	add.w	r3, r7, #8
 800111c:	2102      	movs	r1, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f000 ffee 	bl	8002100 <HAL_RCC_ClockConfig>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800112a:	f000 faff 	bl	800172c <Error_Handler>
  }
}
 800112e:	bf00      	nop
 8001130:	3750      	adds	r7, #80	; 0x50
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40023800 	.word	0x40023800
 800113c:	40007000 	.word	0x40007000

08001140 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <MX_USART2_UART_Init+0x50>)
 8001148:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800114c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001150:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001158:	4b0c      	ldr	r3, [pc, #48]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001164:	4b09      	ldr	r3, [pc, #36]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001166:	220c      	movs	r2, #12
 8001168:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800116a:	4b08      	ldr	r3, [pc, #32]	; (800118c <MX_USART2_UART_Init+0x4c>)
 800116c:	2200      	movs	r2, #0
 800116e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001172:	2200      	movs	r2, #0
 8001174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001176:	4805      	ldr	r0, [pc, #20]	; (800118c <MX_USART2_UART_Init+0x4c>)
 8001178:	f002 f88a 	bl	8003290 <HAL_UART_Init>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001182:	f000 fad3 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001fc 	.word	0x200001fc
 8001190:	40004400 	.word	0x40004400

08001194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b08a      	sub	sp, #40	; 0x28
 8001198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	605a      	str	r2, [r3, #4]
 80011a4:	609a      	str	r2, [r3, #8]
 80011a6:	60da      	str	r2, [r3, #12]
 80011a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b2d      	ldr	r3, [pc, #180]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a2c      	ldr	r2, [pc, #176]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a25      	ldr	r2, [pc, #148]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b23      	ldr	r3, [pc, #140]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	4a1e      	ldr	r2, [pc, #120]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011ec:	f043 0301 	orr.w	r3, r3, #1
 80011f0:	6313      	str	r3, [r2, #48]	; 0x30
 80011f2:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <MX_GPIO_Init+0xd0>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	f003 0301 	and.w	r3, r3, #1
 80011fa:	60bb      	str	r3, [r7, #8]
 80011fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	607b      	str	r3, [r7, #4]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_GPIO_Init+0xd0>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <MX_GPIO_Init+0xd0>)
 8001208:	f043 0302 	orr.w	r3, r3, #2
 800120c:	6313      	str	r3, [r2, #48]	; 0x30
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <MX_GPIO_Init+0xd0>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	f003 0302 	and.w	r3, r3, #2
 8001216:	607b      	str	r3, [r7, #4]
 8001218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800121a:	2200      	movs	r2, #0
 800121c:	2120      	movs	r1, #32
 800121e:	4812      	ldr	r0, [pc, #72]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001220:	f000 ff54 	bl	80020cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001224:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800122a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800122e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	480c      	ldr	r0, [pc, #48]	; (800126c <MX_GPIO_Init+0xd8>)
 800123c:	f000 fdb2 	bl	8001da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001240:	2320      	movs	r3, #32
 8001242:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001244:	2301      	movs	r3, #1
 8001246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124c:	2300      	movs	r3, #0
 800124e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	4804      	ldr	r0, [pc, #16]	; (8001268 <MX_GPIO_Init+0xd4>)
 8001258:	f000 fda4 	bl	8001da4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800125c:	bf00      	nop
 800125e:	3728      	adds	r7, #40	; 0x28
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020800 	.word	0x40020800

08001270 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001278:	2001      	movs	r0, #1
 800127a:	f002 fd50 	bl	8003d1e <osDelay>
 800127e:	e7fb      	b.n	8001278 <StartDefaultTask+0x8>

08001280 <StartTaskA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskA */
void StartTaskA(void *argument)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskA */
	float mean;
	float square;
	float random;
	srand(osKernelSysTick());
 8001288:	f002 fc7e 	bl	8003b88 <osKernelGetSysTimerCount>
 800128c:	4603      	mov	r3, r0
 800128e:	4618      	mov	r0, r3
 8001290:	f006 fe2c 	bl	8007eec <srand>
	means.flagA = 0;
 8001294:	4b37      	ldr	r3, [pc, #220]	; (8001374 <StartTaskA+0xf4>)
 8001296:	2200      	movs	r2, #0
 8001298:	761a      	strb	r2, [r3, #24]
  /* Infinite loop */
  for(;;)
  {
	  if(!means.flagA)
 800129a:	4b36      	ldr	r3, [pc, #216]	; (8001374 <StartTaskA+0xf4>)
 800129c:	7e1b      	ldrb	r3, [r3, #24]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d164      	bne.n	800136c <StartTaskA+0xec>
	  {
		  osSemaphoreAcquire(SemHandle, osWaitForever);
 80012a2:	4b35      	ldr	r3, [pc, #212]	; (8001378 <StartTaskA+0xf8>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f04f 31ff 	mov.w	r1, #4294967295
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 fe62 	bl	8003f74 <osSemaphoreAcquire>
//		  osMutexAcquire(MutexHandle, osWaitForever);

		  mean = 0;
 80012b0:	f04f 0300 	mov.w	r3, #0
 80012b4:	617b      	str	r3, [r7, #20]
		  square = 0;
 80012b6:	f04f 0300 	mov.w	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]

		  for ( uint16_t i = 0; i < 1000; i++)
 80012bc:	2300      	movs	r3, #0
 80012be:	81fb      	strh	r3, [r7, #14]
 80012c0:	e026      	b.n	8001310 <StartTaskA+0x90>
		  {
			  random = (float)rand() / (float)RAND_MAX * 2 - 1;
 80012c2:	f006 fe41 	bl	8007f48 <rand>
 80012c6:	ee07 0a90 	vmov	s15, r0
 80012ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ce:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800137c <StartTaskA+0xfc>
 80012d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012d6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80012da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012e2:	edc7 7a02 	vstr	s15, [r7, #8]
			  mean += random;
 80012e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80012ea:	edd7 7a02 	vldr	s15, [r7, #8]
 80012ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80012f2:	edc7 7a05 	vstr	s15, [r7, #20]
			  square += random * random;
 80012f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80012fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80012fe:	ed97 7a04 	vldr	s14, [r7, #16]
 8001302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001306:	edc7 7a04 	vstr	s15, [r7, #16]
		  for ( uint16_t i = 0; i < 1000; i++)
 800130a:	89fb      	ldrh	r3, [r7, #14]
 800130c:	3301      	adds	r3, #1
 800130e:	81fb      	strh	r3, [r7, #14]
 8001310:	89fb      	ldrh	r3, [r7, #14]
 8001312:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001316:	d3d4      	bcc.n	80012c2 <StartTaskA+0x42>
		  }

		  means.meanA = mean / 1000;
 8001318:	ed97 7a05 	vldr	s14, [r7, #20]
 800131c:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001380 <StartTaskA+0x100>
 8001320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001324:	4b13      	ldr	r3, [pc, #76]	; (8001374 <StartTaskA+0xf4>)
 8001326:	edc3 7a00 	vstr	s15, [r3]
		  means.squareA = sqrt( square / 1000 );
 800132a:	edd7 7a04 	vldr	s15, [r7, #16]
 800132e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001380 <StartTaskA+0x100>
 8001332:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001336:	ee16 0a90 	vmov	r0, s13
 800133a:	f7ff f925 	bl	8000588 <__aeabi_f2d>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	ec43 2b10 	vmov	d0, r2, r3
 8001346:	f008 ff85 	bl	800a254 <sqrt>
 800134a:	ec53 2b10 	vmov	r2, r3, d0
 800134e:	4610      	mov	r0, r2
 8001350:	4619      	mov	r1, r3
 8001352:	f7ff fc49 	bl	8000be8 <__aeabi_d2f>
 8001356:	4603      	mov	r3, r0
 8001358:	4a06      	ldr	r2, [pc, #24]	; (8001374 <StartTaskA+0xf4>)
 800135a:	6053      	str	r3, [r2, #4]
		  means.flagA = 1;
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <StartTaskA+0xf4>)
 800135e:	2201      	movs	r2, #1
 8001360:	761a      	strb	r2, [r3, #24]

		  osSemaphoreRelease(SemHandle);
 8001362:	4b05      	ldr	r3, [pc, #20]	; (8001378 <StartTaskA+0xf8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f002 fe56 	bl	8004018 <osSemaphoreRelease>
//		  osMutexRelease(MutexHandle);
	  }
    osDelay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f002 fcd6 	bl	8003d1e <osDelay>
	  if(!means.flagA)
 8001372:	e792      	b.n	800129a <StartTaskA+0x1a>
 8001374:	2000025c 	.word	0x2000025c
 8001378:	20000258 	.word	0x20000258
 800137c:	4f000000 	.word	0x4f000000
 8001380:	447a0000 	.word	0x447a0000

08001384 <StartTaskB>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskB */
void StartTaskB(void *argument)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b086      	sub	sp, #24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskB */
	float mean;
	float square;
	float random;
	srand(osKernelSysTick());
 800138c:	f002 fbfc 	bl	8003b88 <osKernelGetSysTimerCount>
 8001390:	4603      	mov	r3, r0
 8001392:	4618      	mov	r0, r3
 8001394:	f006 fdaa 	bl	8007eec <srand>
	means.flagB = 0;
 8001398:	4b37      	ldr	r3, [pc, #220]	; (8001478 <StartTaskB+0xf4>)
 800139a:	2200      	movs	r2, #0
 800139c:	765a      	strb	r2, [r3, #25]
  /* Infinite loop */
  for(;;)
  {
	  if(!means.flagB)
 800139e:	4b36      	ldr	r3, [pc, #216]	; (8001478 <StartTaskB+0xf4>)
 80013a0:	7e5b      	ldrb	r3, [r3, #25]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d164      	bne.n	8001470 <StartTaskB+0xec>
	  {
		  osSemaphoreAcquire(SemHandle, osWaitForever);
 80013a6:	4b35      	ldr	r3, [pc, #212]	; (800147c <StartTaskB+0xf8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f04f 31ff 	mov.w	r1, #4294967295
 80013ae:	4618      	mov	r0, r3
 80013b0:	f002 fde0 	bl	8003f74 <osSemaphoreAcquire>
//		  osMutexAcquire(MutexHandle, osWaitForever);

		  mean = 0;
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
		  square = 0;
 80013ba:	f04f 0300 	mov.w	r3, #0
 80013be:	613b      	str	r3, [r7, #16]

		  for ( uint16_t i = 0; i < 1000; i++)
 80013c0:	2300      	movs	r3, #0
 80013c2:	81fb      	strh	r3, [r7, #14]
 80013c4:	e026      	b.n	8001414 <StartTaskB+0x90>
		  {
			  random = (float)rand() / (float)RAND_MAX * 2 - 1;
 80013c6:	f006 fdbf 	bl	8007f48 <rand>
 80013ca:	ee07 0a90 	vmov	s15, r0
 80013ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013d2:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001480 <StartTaskB+0xfc>
 80013d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013da:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80013e6:	edc7 7a02 	vstr	s15, [r7, #8]
			  mean += random;
 80013ea:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ee:	edd7 7a02 	vldr	s15, [r7, #8]
 80013f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f6:	edc7 7a05 	vstr	s15, [r7, #20]
			  square += random * random;
 80013fa:	edd7 7a02 	vldr	s15, [r7, #8]
 80013fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001402:	ed97 7a04 	vldr	s14, [r7, #16]
 8001406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140a:	edc7 7a04 	vstr	s15, [r7, #16]
		  for ( uint16_t i = 0; i < 1000; i++)
 800140e:	89fb      	ldrh	r3, [r7, #14]
 8001410:	3301      	adds	r3, #1
 8001412:	81fb      	strh	r3, [r7, #14]
 8001414:	89fb      	ldrh	r3, [r7, #14]
 8001416:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141a:	d3d4      	bcc.n	80013c6 <StartTaskB+0x42>
		  }

		  means.meanB = mean / 1000;
 800141c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001420:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001484 <StartTaskB+0x100>
 8001424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001428:	4b13      	ldr	r3, [pc, #76]	; (8001478 <StartTaskB+0xf4>)
 800142a:	edc3 7a02 	vstr	s15, [r3, #8]
		  means.squareB = sqrt( square / 1000 );
 800142e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001432:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001484 <StartTaskB+0x100>
 8001436:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800143a:	ee16 0a90 	vmov	r0, s13
 800143e:	f7ff f8a3 	bl	8000588 <__aeabi_f2d>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	ec43 2b10 	vmov	d0, r2, r3
 800144a:	f008 ff03 	bl	800a254 <sqrt>
 800144e:	ec53 2b10 	vmov	r2, r3, d0
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fbc7 	bl	8000be8 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	4a06      	ldr	r2, [pc, #24]	; (8001478 <StartTaskB+0xf4>)
 800145e:	60d3      	str	r3, [r2, #12]
		  means.flagB = 1;
 8001460:	4b05      	ldr	r3, [pc, #20]	; (8001478 <StartTaskB+0xf4>)
 8001462:	2201      	movs	r2, #1
 8001464:	765a      	strb	r2, [r3, #25]

		  osSemaphoreRelease(SemHandle);
 8001466:	4b05      	ldr	r3, [pc, #20]	; (800147c <StartTaskB+0xf8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4618      	mov	r0, r3
 800146c:	f002 fdd4 	bl	8004018 <osSemaphoreRelease>
//		  osMutexRelease(MutexHandle);
	  }
    osDelay(1);
 8001470:	2001      	movs	r0, #1
 8001472:	f002 fc54 	bl	8003d1e <osDelay>
	  if(!means.flagB)
 8001476:	e792      	b.n	800139e <StartTaskB+0x1a>
 8001478:	2000025c 	.word	0x2000025c
 800147c:	20000258 	.word	0x20000258
 8001480:	4f000000 	.word	0x4f000000
 8001484:	447a0000 	.word	0x447a0000

08001488 <StartTaskC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskC */
void StartTaskC(void *argument)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b086      	sub	sp, #24
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskC */
	float mean;
	float square;
	float random;
	srand(osKernelSysTick());
 8001490:	f002 fb7a 	bl	8003b88 <osKernelGetSysTimerCount>
 8001494:	4603      	mov	r3, r0
 8001496:	4618      	mov	r0, r3
 8001498:	f006 fd28 	bl	8007eec <srand>
	means.flagC = 0;
 800149c:	4b37      	ldr	r3, [pc, #220]	; (800157c <StartTaskC+0xf4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	769a      	strb	r2, [r3, #26]
  /* Infinite loop */
  for(;;)
  {
	  if(!means.flagC)
 80014a2:	4b36      	ldr	r3, [pc, #216]	; (800157c <StartTaskC+0xf4>)
 80014a4:	7e9b      	ldrb	r3, [r3, #26]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d164      	bne.n	8001574 <StartTaskC+0xec>
	  {
		  osSemaphoreAcquire(SemHandle, osWaitForever);
 80014aa:	4b35      	ldr	r3, [pc, #212]	; (8001580 <StartTaskC+0xf8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f04f 31ff 	mov.w	r1, #4294967295
 80014b2:	4618      	mov	r0, r3
 80014b4:	f002 fd5e 	bl	8003f74 <osSemaphoreAcquire>
//		  osMutexAcquire(MutexHandle, osWaitForever);

		  mean = 0;
 80014b8:	f04f 0300 	mov.w	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
		  square = 0;
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]

		  for ( uint16_t i = 0; i < 1000; i++)
 80014c4:	2300      	movs	r3, #0
 80014c6:	81fb      	strh	r3, [r7, #14]
 80014c8:	e026      	b.n	8001518 <StartTaskC+0x90>
		  {
			  random = (float)rand() / (float)RAND_MAX * 2 - 1;
 80014ca:	f006 fd3d 	bl	8007f48 <rand>
 80014ce:	ee07 0a90 	vmov	s15, r0
 80014d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014d6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8001584 <StartTaskC+0xfc>
 80014da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014ea:	edc7 7a02 	vstr	s15, [r7, #8]
			  mean += random;
 80014ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80014f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80014f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fa:	edc7 7a05 	vstr	s15, [r7, #20]
			  square += random * random;
 80014fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8001502:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001506:	ed97 7a04 	vldr	s14, [r7, #16]
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	edc7 7a04 	vstr	s15, [r7, #16]
		  for ( uint16_t i = 0; i < 1000; i++)
 8001512:	89fb      	ldrh	r3, [r7, #14]
 8001514:	3301      	adds	r3, #1
 8001516:	81fb      	strh	r3, [r7, #14]
 8001518:	89fb      	ldrh	r3, [r7, #14]
 800151a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800151e:	d3d4      	bcc.n	80014ca <StartTaskC+0x42>
		  }

		  means.meanC = mean / 1000;
 8001520:	ed97 7a05 	vldr	s14, [r7, #20]
 8001524:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001588 <StartTaskC+0x100>
 8001528:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800152c:	4b13      	ldr	r3, [pc, #76]	; (800157c <StartTaskC+0xf4>)
 800152e:	edc3 7a04 	vstr	s15, [r3, #16]
		  means.squareC = sqrt( square / 1000 );
 8001532:	edd7 7a04 	vldr	s15, [r7, #16]
 8001536:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001588 <StartTaskC+0x100>
 800153a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800153e:	ee16 0a90 	vmov	r0, s13
 8001542:	f7ff f821 	bl	8000588 <__aeabi_f2d>
 8001546:	4602      	mov	r2, r0
 8001548:	460b      	mov	r3, r1
 800154a:	ec43 2b10 	vmov	d0, r2, r3
 800154e:	f008 fe81 	bl	800a254 <sqrt>
 8001552:	ec53 2b10 	vmov	r2, r3, d0
 8001556:	4610      	mov	r0, r2
 8001558:	4619      	mov	r1, r3
 800155a:	f7ff fb45 	bl	8000be8 <__aeabi_d2f>
 800155e:	4603      	mov	r3, r0
 8001560:	4a06      	ldr	r2, [pc, #24]	; (800157c <StartTaskC+0xf4>)
 8001562:	6153      	str	r3, [r2, #20]
		  means.flagC = 1;
 8001564:	4b05      	ldr	r3, [pc, #20]	; (800157c <StartTaskC+0xf4>)
 8001566:	2201      	movs	r2, #1
 8001568:	769a      	strb	r2, [r3, #26]

		  osSemaphoreRelease(SemHandle);
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <StartTaskC+0xf8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f002 fd52 	bl	8004018 <osSemaphoreRelease>
//		  osMutexRelease(MutexHandle);
	  }
    osDelay(1);
 8001574:	2001      	movs	r0, #1
 8001576:	f002 fbd2 	bl	8003d1e <osDelay>
	  if(!means.flagC)
 800157a:	e792      	b.n	80014a2 <StartTaskC+0x1a>
 800157c:	2000025c 	.word	0x2000025c
 8001580:	20000258 	.word	0x20000258
 8001584:	4f000000 	.word	0x4f000000
 8001588:	447a0000 	.word	0x447a0000

0800158c <StartPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void *argument)
{
 800158c:	b5b0      	push	{r4, r5, r7, lr}
 800158e:	b096      	sub	sp, #88	; 0x58
 8001590:	af02      	add	r7, sp, #8
 8001592:	6078      	str	r0, [r7, #4]
	char message[64];
  /* Infinite loop */
  for(;;)
  {

	  if ( means.flagA && means.flagB && means.flagC )
 8001594:	4b57      	ldr	r3, [pc, #348]	; (80016f4 <StartPrintTask+0x168>)
 8001596:	7e1b      	ldrb	r3, [r3, #24]
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 80a6 	beq.w	80016ea <StartPrintTask+0x15e>
 800159e:	4b55      	ldr	r3, [pc, #340]	; (80016f4 <StartPrintTask+0x168>)
 80015a0:	7e5b      	ldrb	r3, [r3, #25]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a1 	beq.w	80016ea <StartPrintTask+0x15e>
 80015a8:	4b52      	ldr	r3, [pc, #328]	; (80016f4 <StartPrintTask+0x168>)
 80015aa:	7e9b      	ldrb	r3, [r3, #26]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	f000 809c 	beq.w	80016ea <StartPrintTask+0x15e>
	  {
		  osSemaphoreAcquire(SemHandle, osWaitForever);
 80015b2:	4b51      	ldr	r3, [pc, #324]	; (80016f8 <StartPrintTask+0x16c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f04f 31ff 	mov.w	r1, #4294967295
 80015ba:	4618      	mov	r0, r3
 80015bc:	f002 fcda 	bl	8003f74 <osSemaphoreAcquire>
//		  osMutexAcquire(MutexHandle, osWaitForever);

		  mean = means.meanA;
 80015c0:	4b4c      	ldr	r3, [pc, #304]	; (80016f4 <StartPrintTask+0x168>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c
		  mean += means.meanB;
 80015c6:	4b4b      	ldr	r3, [pc, #300]	; (80016f4 <StartPrintTask+0x168>)
 80015c8:	edd3 7a02 	vldr	s15, [r3, #8]
 80015cc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80015d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		  mean += means.meanC;
 80015d8:	4b46      	ldr	r3, [pc, #280]	; (80016f4 <StartPrintTask+0x168>)
 80015da:	edd3 7a04 	vldr	s15, [r3, #16]
 80015de:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80015e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015e6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
		  mean /= 3;
 80015ea:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80015ee:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 80015f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015f6:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

		  square = means.squareA * means.squareA;
 80015fa:	4b3e      	ldr	r3, [pc, #248]	; (80016f4 <StartPrintTask+0x168>)
 80015fc:	ed93 7a01 	vldr	s14, [r3, #4]
 8001600:	4b3c      	ldr	r3, [pc, #240]	; (80016f4 <StartPrintTask+0x168>)
 8001602:	edd3 7a01 	vldr	s15, [r3, #4]
 8001606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800160a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		  square += means.squareB * means.squareB;
 800160e:	4b39      	ldr	r3, [pc, #228]	; (80016f4 <StartPrintTask+0x168>)
 8001610:	ed93 7a03 	vldr	s14, [r3, #12]
 8001614:	4b37      	ldr	r3, [pc, #220]	; (80016f4 <StartPrintTask+0x168>)
 8001616:	edd3 7a03 	vldr	s15, [r3, #12]
 800161a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800161e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001626:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		  square += means.squareC * means.squareC;
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <StartPrintTask+0x168>)
 800162c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001630:	4b30      	ldr	r3, [pc, #192]	; (80016f4 <StartPrintTask+0x168>)
 8001632:	edd3 7a05 	vldr	s15, [r3, #20]
 8001636:	ee67 7a27 	vmul.f32	s15, s14, s15
 800163a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800163e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001642:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		  square = sqrt( square / 3 );
 8001646:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800164a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800164e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001652:	ee16 0a90 	vmov	r0, s13
 8001656:	f7fe ff97 	bl	8000588 <__aeabi_f2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	ec43 2b10 	vmov	d0, r2, r3
 8001662:	f008 fdf7 	bl	800a254 <sqrt>
 8001666:	ec53 2b10 	vmov	r2, r3, d0
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fabb 	bl	8000be8 <__aeabi_d2f>
 8001672:	4603      	mov	r3, r0
 8001674:	64bb      	str	r3, [r7, #72]	; 0x48

		  sprintf ( message, "Mean of means = %f and Mean of square means = %f", mean, square);
 8001676:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001678:	f7fe ff86 	bl	8000588 <__aeabi_f2d>
 800167c:	4604      	mov	r4, r0
 800167e:	460d      	mov	r5, r1
 8001680:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001682:	f7fe ff81 	bl	8000588 <__aeabi_f2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	f107 0008 	add.w	r0, r7, #8
 800168e:	e9cd 2300 	strd	r2, r3, [sp]
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	4919      	ldr	r1, [pc, #100]	; (80016fc <StartPrintTask+0x170>)
 8001698:	f006 fd0e 	bl	80080b8 <siprintf>
		  HAL_UART_Transmit(&huart2, message, strlen(message), HAL_MAX_DELAY);
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe fdb5 	bl	8000210 <strlen>
 80016a6:	4603      	mov	r3, r0
 80016a8:	b29a      	uxth	r2, r3
 80016aa:	f107 0108 	add.w	r1, r7, #8
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	4813      	ldr	r0, [pc, #76]	; (8001700 <StartPrintTask+0x174>)
 80016b4:	f001 fe39 	bl	800332a <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart2, "\n", strlen("\n"), HAL_MAX_DELAY);
 80016b8:	f04f 33ff 	mov.w	r3, #4294967295
 80016bc:	2201      	movs	r2, #1
 80016be:	4911      	ldr	r1, [pc, #68]	; (8001704 <StartPrintTask+0x178>)
 80016c0:	480f      	ldr	r0, [pc, #60]	; (8001700 <StartPrintTask+0x174>)
 80016c2:	f001 fe32 	bl	800332a <HAL_UART_Transmit>

		  //10ms delay for 64 characters
		  osDelay(640);
 80016c6:	f44f 7020 	mov.w	r0, #640	; 0x280
 80016ca:	f002 fb28 	bl	8003d1e <osDelay>

		  means.flagA = 0;
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <StartPrintTask+0x168>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	761a      	strb	r2, [r3, #24]
		  means.flagB = 0;
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <StartPrintTask+0x168>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	765a      	strb	r2, [r3, #25]
		  means.flagC = 0;
 80016da:	4b06      	ldr	r3, [pc, #24]	; (80016f4 <StartPrintTask+0x168>)
 80016dc:	2200      	movs	r2, #0
 80016de:	769a      	strb	r2, [r3, #26]

		  osSemaphoreRelease(SemHandle);
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <StartPrintTask+0x16c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f002 fc97 	bl	8004018 <osSemaphoreRelease>
//		  osMutexRelease(MutexHandle);
	  }
	  //1000 - 640
    osDelay(360);
 80016ea:	f44f 70b4 	mov.w	r0, #360	; 0x168
 80016ee:	f002 fb16 	bl	8003d1e <osDelay>
	  if ( means.flagA && means.flagB && means.flagC )
 80016f2:	e74f      	b.n	8001594 <StartPrintTask+0x8>
 80016f4:	2000025c 	.word	0x2000025c
 80016f8:	20000258 	.word	0x20000258
 80016fc:	0800a464 	.word	0x0800a464
 8001700:	200001fc 	.word	0x200001fc
 8001704:	0800a498 	.word	0x0800a498

08001708 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d101      	bne.n	800171e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800171a:	f000 fa41 	bl	8001ba0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800171e:	bf00      	nop
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40001000 	.word	0x40001000

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001730:	b672      	cpsid	i
}
 8001732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001734:	e7fe      	b.n	8001734 <Error_Handler+0x8>
	...

08001738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_MspInit+0x54>)
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	4a11      	ldr	r2, [pc, #68]	; (800178c <HAL_MspInit+0x54>)
 8001748:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800174c:	6453      	str	r3, [r2, #68]	; 0x44
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_MspInit+0x54>)
 8001750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001752:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001756:	607b      	str	r3, [r7, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800175a:	2300      	movs	r3, #0
 800175c:	603b      	str	r3, [r7, #0]
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <HAL_MspInit+0x54>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <HAL_MspInit+0x54>)
 8001764:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <HAL_MspInit+0x54>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001772:	603b      	str	r3, [r7, #0]
 8001774:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	210f      	movs	r1, #15
 800177a:	f06f 0001 	mvn.w	r0, #1
 800177e:	f000 fae7 	bl	8001d50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	40023800 	.word	0x40023800

08001790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b08a      	sub	sp, #40	; 0x28
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0314 	add.w	r3, r7, #20
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a19      	ldr	r2, [pc, #100]	; (8001814 <HAL_UART_MspInit+0x84>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d12b      	bne.n	800180a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	613b      	str	r3, [r7, #16]
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	4a17      	ldr	r2, [pc, #92]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c0:	6413      	str	r3, [r2, #64]	; 0x40
 80017c2:	4b15      	ldr	r3, [pc, #84]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b11      	ldr	r3, [pc, #68]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017d8:	f043 0301 	orr.w	r3, r3, #1
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b0e      	ldr	r3, [pc, #56]	; (8001818 <HAL_UART_MspInit+0x88>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0301 	and.w	r3, r3, #1
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017ea:	230c      	movs	r3, #12
 80017ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ee:	2302      	movs	r3, #2
 80017f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f6:	2303      	movs	r3, #3
 80017f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fa:	2307      	movs	r3, #7
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 0314 	add.w	r3, r7, #20
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <HAL_UART_MspInit+0x8c>)
 8001806:	f000 facd 	bl	8001da4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800180a:	bf00      	nop
 800180c:	3728      	adds	r7, #40	; 0x28
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40004400 	.word	0x40004400
 8001818:	40023800 	.word	0x40023800
 800181c:	40020000 	.word	0x40020000

08001820 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b08e      	sub	sp, #56	; 0x38
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800182c:	2300      	movs	r3, #0
 800182e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	4b33      	ldr	r3, [pc, #204]	; (8001904 <HAL_InitTick+0xe4>)
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	4a32      	ldr	r2, [pc, #200]	; (8001904 <HAL_InitTick+0xe4>)
 800183a:	f043 0310 	orr.w	r3, r3, #16
 800183e:	6413      	str	r3, [r2, #64]	; 0x40
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <HAL_InitTick+0xe4>)
 8001842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001844:	f003 0310 	and.w	r3, r3, #16
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800184c:	f107 0210 	add.w	r2, r7, #16
 8001850:	f107 0314 	add.w	r3, r7, #20
 8001854:	4611      	mov	r1, r2
 8001856:	4618      	mov	r0, r3
 8001858:	f000 fd6c 	bl	8002334 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800185c:	6a3b      	ldr	r3, [r7, #32]
 800185e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d103      	bne.n	800186e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001866:	f000 fd3d 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 800186a:	6378      	str	r0, [r7, #52]	; 0x34
 800186c:	e004      	b.n	8001878 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800186e:	f000 fd39 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 8001872:	4603      	mov	r3, r0
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800187a:	4a23      	ldr	r2, [pc, #140]	; (8001908 <HAL_InitTick+0xe8>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	3b01      	subs	r3, #1
 8001884:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001886:	4b21      	ldr	r3, [pc, #132]	; (800190c <HAL_InitTick+0xec>)
 8001888:	4a21      	ldr	r2, [pc, #132]	; (8001910 <HAL_InitTick+0xf0>)
 800188a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800188c:	4b1f      	ldr	r3, [pc, #124]	; (800190c <HAL_InitTick+0xec>)
 800188e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001892:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_InitTick+0xec>)
 8001896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001898:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <HAL_InitTick+0xec>)
 800189c:	2200      	movs	r2, #0
 800189e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_InitTick+0xec>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <HAL_InitTick+0xec>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80018ac:	4817      	ldr	r0, [pc, #92]	; (800190c <HAL_InitTick+0xec>)
 80018ae:	f001 fa41 	bl	8002d34 <HAL_TIM_Base_Init>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80018b8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d11b      	bne.n	80018f8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80018c0:	4812      	ldr	r0, [pc, #72]	; (800190c <HAL_InitTick+0xec>)
 80018c2:	f001 fa91 	bl	8002de8 <HAL_TIM_Base_Start_IT>
 80018c6:	4603      	mov	r3, r0
 80018c8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80018cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d111      	bne.n	80018f8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80018d4:	2036      	movs	r0, #54	; 0x36
 80018d6:	f000 fa57 	bl	8001d88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2b0f      	cmp	r3, #15
 80018de:	d808      	bhi.n	80018f2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80018e0:	2200      	movs	r2, #0
 80018e2:	6879      	ldr	r1, [r7, #4]
 80018e4:	2036      	movs	r0, #54	; 0x36
 80018e6:	f000 fa33 	bl	8001d50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_InitTick+0xf4>)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e002      	b.n	80018f8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80018f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3738      	adds	r7, #56	; 0x38
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	40023800 	.word	0x40023800
 8001908:	431bde83 	.word	0x431bde83
 800190c:	20000278 	.word	0x20000278
 8001910:	40001000 	.word	0x40001000
 8001914:	20000004 	.word	0x20000004

08001918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800191c:	e7fe      	b.n	800191c <NMI_Handler+0x4>

0800191e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191e:	b480      	push	{r7}
 8001920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001922:	e7fe      	b.n	8001922 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	e7fe      	b.n	8001928 <MemManage_Handler+0x4>

0800192a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192a:	b480      	push	{r7}
 800192c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800192e:	e7fe      	b.n	800192e <BusFault_Handler+0x4>

08001930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001934:	e7fe      	b.n	8001934 <UsageFault_Handler+0x4>

08001936 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001936:	b480      	push	{r7}
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001948:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM6_DAC_IRQHandler+0x10>)
 800194a:	f001 fabd 	bl	8002ec8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20000278 	.word	0x20000278

08001958 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return 1;
 800195c:	2301      	movs	r3, #1
}
 800195e:	4618      	mov	r0, r3
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <_kill>:

int _kill(int pid, int sig)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
 8001970:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001972:	f005 fc83 	bl	800727c <__errno>
 8001976:	4603      	mov	r3, r0
 8001978:	2216      	movs	r2, #22
 800197a:	601a      	str	r2, [r3, #0]
  return -1;
 800197c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <_exit>:

void _exit (int status)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001990:	f04f 31ff 	mov.w	r1, #4294967295
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ffe7 	bl	8001968 <_kill>
  while (1) {}    /* Make sure we hang here */
 800199a:	e7fe      	b.n	800199a <_exit+0x12>

0800199c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]
 80019ac:	e00a      	b.n	80019c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019ae:	f3af 8000 	nop.w
 80019b2:	4601      	mov	r1, r0
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	60ba      	str	r2, [r7, #8]
 80019ba:	b2ca      	uxtb	r2, r1
 80019bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	3301      	adds	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	429a      	cmp	r2, r3
 80019ca:	dbf0      	blt.n	80019ae <_read+0x12>
  }

  return len;
 80019cc:	687b      	ldr	r3, [r7, #4]
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3718      	adds	r7, #24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019d6:	b580      	push	{r7, lr}
 80019d8:	b086      	sub	sp, #24
 80019da:	af00      	add	r7, sp, #0
 80019dc:	60f8      	str	r0, [r7, #12]
 80019de:	60b9      	str	r1, [r7, #8]
 80019e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e009      	b.n	80019fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	1c5a      	adds	r2, r3, #1
 80019ec:	60ba      	str	r2, [r7, #8]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	3301      	adds	r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	dbf1      	blt.n	80019e8 <_write+0x12>
  }
  return len;
 8001a04:	687b      	ldr	r3, [r7, #4]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3718      	adds	r7, #24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <_close>:

int _close(int file)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b083      	sub	sp, #12
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr

08001a26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
 8001a2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a36:	605a      	str	r2, [r3, #4]
  return 0;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	370c      	adds	r7, #12
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr

08001a46 <_isatty>:

int _isatty(int file)
{
 8001a46:	b480      	push	{r7}
 8001a48:	b083      	sub	sp, #12
 8001a4a:	af00      	add	r7, sp, #0
 8001a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a4e:	2301      	movs	r3, #1
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a80:	4a14      	ldr	r2, [pc, #80]	; (8001ad4 <_sbrk+0x5c>)
 8001a82:	4b15      	ldr	r3, [pc, #84]	; (8001ad8 <_sbrk+0x60>)
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <_sbrk+0x64>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d102      	bne.n	8001a9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <_sbrk+0x64>)
 8001a96:	4a12      	ldr	r2, [pc, #72]	; (8001ae0 <_sbrk+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <_sbrk+0x64>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	429a      	cmp	r2, r3
 8001aa6:	d207      	bcs.n	8001ab8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001aa8:	f005 fbe8 	bl	800727c <__errno>
 8001aac:	4603      	mov	r3, r0
 8001aae:	220c      	movs	r2, #12
 8001ab0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ab6:	e009      	b.n	8001acc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <_sbrk+0x64>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001abe:	4b07      	ldr	r3, [pc, #28]	; (8001adc <_sbrk+0x64>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4a05      	ldr	r2, [pc, #20]	; (8001adc <_sbrk+0x64>)
 8001ac8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001aca:	68fb      	ldr	r3, [r7, #12]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	20020000 	.word	0x20020000
 8001ad8:	00000400 	.word	0x00000400
 8001adc:	200002c0 	.word	0x200002c0
 8001ae0:	20004ce8 	.word	0x20004ce8

08001ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <SystemInit+0x20>)
 8001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aee:	4a05      	ldr	r2, [pc, #20]	; (8001b04 <SystemInit+0x20>)
 8001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b40 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b0c:	480d      	ldr	r0, [pc, #52]	; (8001b44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b0e:	490e      	ldr	r1, [pc, #56]	; (8001b48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b10:	4a0e      	ldr	r2, [pc, #56]	; (8001b4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b14:	e002      	b.n	8001b1c <LoopCopyDataInit>

08001b16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b1a:	3304      	adds	r3, #4

08001b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b20:	d3f9      	bcc.n	8001b16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b22:	4a0b      	ldr	r2, [pc, #44]	; (8001b50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b24:	4c0b      	ldr	r4, [pc, #44]	; (8001b54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b28:	e001      	b.n	8001b2e <LoopFillZerobss>

08001b2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b2c:	3204      	adds	r2, #4

08001b2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b30:	d3fb      	bcc.n	8001b2a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b32:	f7ff ffd7 	bl	8001ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b36:	f005 fc9d 	bl	8007474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3a:	f7ff fa27 	bl	8000f8c <main>
  bx  lr    
 8001b3e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b48:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001b4c:	0800a9e8 	.word	0x0800a9e8
  ldr r2, =_sbss
 8001b50:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001b54:	20004ce8 	.word	0x20004ce8

08001b58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b58:	e7fe      	b.n	8001b58 <ADC_IRQHandler>
	...

08001b5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b60:	4b0e      	ldr	r3, [pc, #56]	; (8001b9c <HAL_Init+0x40>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0d      	ldr	r2, [pc, #52]	; (8001b9c <HAL_Init+0x40>)
 8001b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b6c:	4b0b      	ldr	r3, [pc, #44]	; (8001b9c <HAL_Init+0x40>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a0a      	ldr	r2, [pc, #40]	; (8001b9c <HAL_Init+0x40>)
 8001b72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b78:	4b08      	ldr	r3, [pc, #32]	; (8001b9c <HAL_Init+0x40>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a07      	ldr	r2, [pc, #28]	; (8001b9c <HAL_Init+0x40>)
 8001b7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b84:	2003      	movs	r0, #3
 8001b86:	f000 f8d8 	bl	8001d3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8a:	200f      	movs	r0, #15
 8001b8c:	f7ff fe48 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b90:	f7ff fdd2 	bl	8001738 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023c00 	.word	0x40023c00

08001ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_IncTick+0x20>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	461a      	mov	r2, r3
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4413      	add	r3, r2
 8001bb0:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <HAL_IncTick+0x24>)
 8001bb2:	6013      	str	r3, [r2, #0]
}
 8001bb4:	bf00      	nop
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	20000008 	.word	0x20000008
 8001bc4:	200002c4 	.word	0x200002c4

08001bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  return uwTick;
 8001bcc:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <HAL_GetTick+0x14>)
 8001bce:	681b      	ldr	r3, [r3, #0]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	200002c4 	.word	0x200002c4

08001be0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bf0:	4b0c      	ldr	r3, [pc, #48]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bf6:	68ba      	ldr	r2, [r7, #8]
 8001bf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c12:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <__NVIC_SetPriorityGrouping+0x44>)
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	60d3      	str	r3, [r2, #12]
}
 8001c18:	bf00      	nop
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	e000ed00 	.word	0xe000ed00

08001c28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c2c:	4b04      	ldr	r3, [pc, #16]	; (8001c40 <__NVIC_GetPriorityGrouping+0x18>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	0a1b      	lsrs	r3, r3, #8
 8001c32:	f003 0307 	and.w	r3, r3, #7
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db0b      	blt.n	8001c6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f003 021f 	and.w	r2, r3, #31
 8001c5c:	4907      	ldr	r1, [pc, #28]	; (8001c7c <__NVIC_EnableIRQ+0x38>)
 8001c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c62:	095b      	lsrs	r3, r3, #5
 8001c64:	2001      	movs	r0, #1
 8001c66:	fa00 f202 	lsl.w	r2, r0, r2
 8001c6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000e100 	.word	0xe000e100

08001c80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	6039      	str	r1, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	db0a      	blt.n	8001caa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	b2da      	uxtb	r2, r3
 8001c98:	490c      	ldr	r1, [pc, #48]	; (8001ccc <__NVIC_SetPriority+0x4c>)
 8001c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c9e:	0112      	lsls	r2, r2, #4
 8001ca0:	b2d2      	uxtb	r2, r2
 8001ca2:	440b      	add	r3, r1
 8001ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ca8:	e00a      	b.n	8001cc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	4908      	ldr	r1, [pc, #32]	; (8001cd0 <__NVIC_SetPriority+0x50>)
 8001cb0:	79fb      	ldrb	r3, [r7, #7]
 8001cb2:	f003 030f 	and.w	r3, r3, #15
 8001cb6:	3b04      	subs	r3, #4
 8001cb8:	0112      	lsls	r2, r2, #4
 8001cba:	b2d2      	uxtb	r2, r2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	761a      	strb	r2, [r3, #24]
}
 8001cc0:	bf00      	nop
 8001cc2:	370c      	adds	r7, #12
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000e100 	.word	0xe000e100
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	f003 0307 	and.w	r3, r3, #7
 8001ce6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	f1c3 0307 	rsb	r3, r3, #7
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	bf28      	it	cs
 8001cf2:	2304      	movcs	r3, #4
 8001cf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2b06      	cmp	r3, #6
 8001cfc:	d902      	bls.n	8001d04 <NVIC_EncodePriority+0x30>
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	3b03      	subs	r3, #3
 8001d02:	e000      	b.n	8001d06 <NVIC_EncodePriority+0x32>
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	f04f 32ff 	mov.w	r2, #4294967295
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	43da      	mvns	r2, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	401a      	ands	r2, r3
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	fa01 f303 	lsl.w	r3, r1, r3
 8001d26:	43d9      	mvns	r1, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d2c:	4313      	orrs	r3, r2
         );
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3724      	adds	r7, #36	; 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d3a:	b580      	push	{r7, lr}
 8001d3c:	b082      	sub	sp, #8
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f7ff ff4c 	bl	8001be0 <__NVIC_SetPriorityGrouping>
}
 8001d48:	bf00      	nop
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
 8001d5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d62:	f7ff ff61 	bl	8001c28 <__NVIC_GetPriorityGrouping>
 8001d66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	68b9      	ldr	r1, [r7, #8]
 8001d6c:	6978      	ldr	r0, [r7, #20]
 8001d6e:	f7ff ffb1 	bl	8001cd4 <NVIC_EncodePriority>
 8001d72:	4602      	mov	r2, r0
 8001d74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d78:	4611      	mov	r1, r2
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff80 	bl	8001c80 <__NVIC_SetPriority>
}
 8001d80:	bf00      	nop
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	4603      	mov	r3, r0
 8001d90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff ff54 	bl	8001c44 <__NVIC_EnableIRQ>
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b089      	sub	sp, #36	; 0x24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
 8001dac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001db2:	2300      	movs	r3, #0
 8001db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e165      	b.n	800208c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dd4:	693a      	ldr	r2, [r7, #16]
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	f040 8154 	bne.w	8002086 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	f003 0303 	and.w	r3, r3, #3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d005      	beq.n	8001df6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d130      	bne.n	8001e58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	005b      	lsls	r3, r3, #1
 8001e00:	2203      	movs	r2, #3
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68da      	ldr	r2, [r3, #12]
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	005b      	lsls	r3, r3, #1
 8001e16:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	43db      	mvns	r3, r3
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	f003 0201 	and.w	r2, r3, #1
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d017      	beq.n	8001e94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	005b      	lsls	r3, r3, #1
 8001e6e:	2203      	movs	r2, #3
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	689a      	ldr	r2, [r3, #8]
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	005b      	lsls	r3, r3, #1
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f003 0303 	and.w	r3, r3, #3
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d123      	bne.n	8001ee8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	08da      	lsrs	r2, r3, #3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3208      	adds	r2, #8
 8001ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	220f      	movs	r2, #15
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	43db      	mvns	r3, r3
 8001ebe:	69ba      	ldr	r2, [r7, #24]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	08da      	lsrs	r2, r3, #3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3208      	adds	r2, #8
 8001ee2:	69b9      	ldr	r1, [r7, #24]
 8001ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	2203      	movs	r2, #3
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4013      	ands	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f003 0203 	and.w	r2, r3, #3
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	005b      	lsls	r3, r3, #1
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80ae 	beq.w	8002086 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <HAL_GPIO_Init+0x300>)
 8001f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f32:	4a5c      	ldr	r2, [pc, #368]	; (80020a4 <HAL_GPIO_Init+0x300>)
 8001f34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f38:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3a:	4b5a      	ldr	r3, [pc, #360]	; (80020a4 <HAL_GPIO_Init+0x300>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f46:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	220f      	movs	r2, #15
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a4f      	ldr	r2, [pc, #316]	; (80020ac <HAL_GPIO_Init+0x308>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d025      	beq.n	8001fbe <HAL_GPIO_Init+0x21a>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a4e      	ldr	r2, [pc, #312]	; (80020b0 <HAL_GPIO_Init+0x30c>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d01f      	beq.n	8001fba <HAL_GPIO_Init+0x216>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a4d      	ldr	r2, [pc, #308]	; (80020b4 <HAL_GPIO_Init+0x310>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d019      	beq.n	8001fb6 <HAL_GPIO_Init+0x212>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a4c      	ldr	r2, [pc, #304]	; (80020b8 <HAL_GPIO_Init+0x314>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d013      	beq.n	8001fb2 <HAL_GPIO_Init+0x20e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a4b      	ldr	r2, [pc, #300]	; (80020bc <HAL_GPIO_Init+0x318>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d00d      	beq.n	8001fae <HAL_GPIO_Init+0x20a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a4a      	ldr	r2, [pc, #296]	; (80020c0 <HAL_GPIO_Init+0x31c>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d007      	beq.n	8001faa <HAL_GPIO_Init+0x206>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	4a49      	ldr	r2, [pc, #292]	; (80020c4 <HAL_GPIO_Init+0x320>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_GPIO_Init+0x202>
 8001fa2:	2306      	movs	r3, #6
 8001fa4:	e00c      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fa6:	2307      	movs	r3, #7
 8001fa8:	e00a      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001faa:	2305      	movs	r3, #5
 8001fac:	e008      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fae:	2304      	movs	r3, #4
 8001fb0:	e006      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e004      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e002      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e000      	b.n	8001fc0 <HAL_GPIO_Init+0x21c>
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	69fa      	ldr	r2, [r7, #28]
 8001fc2:	f002 0203 	and.w	r2, r2, #3
 8001fc6:	0092      	lsls	r2, r2, #2
 8001fc8:	4093      	lsls	r3, r2
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fd0:	4935      	ldr	r1, [pc, #212]	; (80020a8 <HAL_GPIO_Init+0x304>)
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	089b      	lsrs	r3, r3, #2
 8001fd6:	3302      	adds	r3, #2
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fde:	4b3a      	ldr	r3, [pc, #232]	; (80020c8 <HAL_GPIO_Init+0x324>)
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	43db      	mvns	r3, r3
 8001fe8:	69ba      	ldr	r2, [r7, #24]
 8001fea:	4013      	ands	r3, r2
 8001fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d003      	beq.n	8002002 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002002:	4a31      	ldr	r2, [pc, #196]	; (80020c8 <HAL_GPIO_Init+0x324>)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002008:	4b2f      	ldr	r3, [pc, #188]	; (80020c8 <HAL_GPIO_Init+0x324>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	43db      	mvns	r3, r3
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	4013      	ands	r3, r2
 8002016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002020:	2b00      	cmp	r3, #0
 8002022:	d003      	beq.n	800202c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4313      	orrs	r3, r2
 800202a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800202c:	4a26      	ldr	r2, [pc, #152]	; (80020c8 <HAL_GPIO_Init+0x324>)
 800202e:	69bb      	ldr	r3, [r7, #24]
 8002030:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <HAL_GPIO_Init+0x324>)
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	43db      	mvns	r3, r3
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	4013      	ands	r3, r2
 8002040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800204e:	69ba      	ldr	r2, [r7, #24]
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	4313      	orrs	r3, r2
 8002054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002056:	4a1c      	ldr	r2, [pc, #112]	; (80020c8 <HAL_GPIO_Init+0x324>)
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800205c:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_GPIO_Init+0x324>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002080:	4a11      	ldr	r2, [pc, #68]	; (80020c8 <HAL_GPIO_Init+0x324>)
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3301      	adds	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	2b0f      	cmp	r3, #15
 8002090:	f67f ae96 	bls.w	8001dc0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	3724      	adds	r7, #36	; 0x24
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40013800 	.word	0x40013800
 80020ac:	40020000 	.word	0x40020000
 80020b0:	40020400 	.word	0x40020400
 80020b4:	40020800 	.word	0x40020800
 80020b8:	40020c00 	.word	0x40020c00
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40021400 	.word	0x40021400
 80020c4:	40021800 	.word	0x40021800
 80020c8:	40013c00 	.word	0x40013c00

080020cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
 80020d4:	460b      	mov	r3, r1
 80020d6:	807b      	strh	r3, [r7, #2]
 80020d8:	4613      	mov	r3, r2
 80020da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020dc:	787b      	ldrb	r3, [r7, #1]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020e2:	887a      	ldrh	r2, [r7, #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020e8:	e003      	b.n	80020f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020ea:	887b      	ldrh	r3, [r7, #2]
 80020ec:	041a      	lsls	r2, r3, #16
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	619a      	str	r2, [r3, #24]
}
 80020f2:	bf00      	nop
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e0cc      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b68      	ldr	r3, [pc, #416]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 030f 	and.w	r3, r3, #15
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d90c      	bls.n	800213c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b65      	ldr	r3, [pc, #404]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	b2d2      	uxtb	r2, r2
 8002128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b63      	ldr	r3, [pc, #396]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e0b8      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d020      	beq.n	800218a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	d005      	beq.n	8002160 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002154:	4b59      	ldr	r3, [pc, #356]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	4a58      	ldr	r2, [pc, #352]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800215a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800215e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d005      	beq.n	8002178 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800216c:	4b53      	ldr	r3, [pc, #332]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	4a52      	ldr	r2, [pc, #328]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002172:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002176:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002178:	4b50      	ldr	r3, [pc, #320]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	494d      	ldr	r1, [pc, #308]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002186:	4313      	orrs	r3, r2
 8002188:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d044      	beq.n	8002220 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d107      	bne.n	80021ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b47      	ldr	r3, [pc, #284]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d119      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e07f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d003      	beq.n	80021be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ba:	2b03      	cmp	r3, #3
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021be:	4b3f      	ldr	r3, [pc, #252]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d109      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e06f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ce:	4b3b      	ldr	r3, [pc, #236]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0302 	and.w	r3, r3, #2
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e067      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021de:	4b37      	ldr	r3, [pc, #220]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f023 0203 	bic.w	r2, r3, #3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	4934      	ldr	r1, [pc, #208]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021f0:	f7ff fcea 	bl	8001bc8 <HAL_GetTick>
 80021f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f6:	e00a      	b.n	800220e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f8:	f7ff fce6 	bl	8001bc8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	f241 3288 	movw	r2, #5000	; 0x1388
 8002206:	4293      	cmp	r3, r2
 8002208:	d901      	bls.n	800220e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800220a:	2303      	movs	r3, #3
 800220c:	e04f      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	4b2b      	ldr	r3, [pc, #172]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f003 020c 	and.w	r2, r3, #12
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	429a      	cmp	r2, r3
 800221e:	d1eb      	bne.n	80021f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002220:	4b25      	ldr	r3, [pc, #148]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 030f 	and.w	r3, r3, #15
 8002228:	683a      	ldr	r2, [r7, #0]
 800222a:	429a      	cmp	r2, r3
 800222c:	d20c      	bcs.n	8002248 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222e:	4b22      	ldr	r3, [pc, #136]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	b2d2      	uxtb	r2, r2
 8002234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e032      	b.n	80022ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d008      	beq.n	8002266 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b19      	ldr	r3, [pc, #100]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	4916      	ldr	r1, [pc, #88]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	4313      	orrs	r3, r2
 8002264:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0308 	and.w	r3, r3, #8
 800226e:	2b00      	cmp	r3, #0
 8002270:	d009      	beq.n	8002286 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002272:	4b12      	ldr	r3, [pc, #72]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691b      	ldr	r3, [r3, #16]
 800227e:	00db      	lsls	r3, r3, #3
 8002280:	490e      	ldr	r1, [pc, #56]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002286:	f000 f887 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 800228a:	4602      	mov	r2, r0
 800228c:	4b0b      	ldr	r3, [pc, #44]	; (80022bc <HAL_RCC_ClockConfig+0x1bc>)
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	091b      	lsrs	r3, r3, #4
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	490a      	ldr	r1, [pc, #40]	; (80022c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002298:	5ccb      	ldrb	r3, [r1, r3]
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	4a09      	ldr	r2, [pc, #36]	; (80022c4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022a2:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_ClockConfig+0x1c8>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff faba 	bl	8001820 <HAL_InitTick>

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023c00 	.word	0x40023c00
 80022bc:	40023800 	.word	0x40023800
 80022c0:	0800a588 	.word	0x0800a588
 80022c4:	20000000 	.word	0x20000000
 80022c8:	20000004 	.word	0x20000004

080022cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	20000000 	.word	0x20000000

080022e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80022e8:	f7ff fff0 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 80022ec:	4602      	mov	r2, r0
 80022ee:	4b05      	ldr	r3, [pc, #20]	; (8002304 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	0a9b      	lsrs	r3, r3, #10
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	4903      	ldr	r1, [pc, #12]	; (8002308 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022fa:	5ccb      	ldrb	r3, [r1, r3]
 80022fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40023800 	.word	0x40023800
 8002308:	0800a598 	.word	0x0800a598

0800230c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002310:	f7ff ffdc 	bl	80022cc <HAL_RCC_GetHCLKFreq>
 8002314:	4602      	mov	r2, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0b5b      	lsrs	r3, r3, #13
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4903      	ldr	r1, [pc, #12]	; (8002330 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002322:	5ccb      	ldrb	r3, [r1, r3]
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	0800a598 	.word	0x0800a598

08002334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	220f      	movs	r2, #15
 8002342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_GetClockConfig+0x5c>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_RCC_GetClockConfig+0x5c>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_RCC_GetClockConfig+0x5c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_GetClockConfig+0x5c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_RCC_GetClockConfig+0x60>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 020f 	and.w	r2, r3, #15
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	601a      	str	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40023c00 	.word	0x40023c00

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800239c:	b0ae      	sub	sp, #184	; 0xb8
 800239e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80023a6:	2300      	movs	r3, #0
 80023a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80023b2:	2300      	movs	r3, #0
 80023b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023be:	4bcb      	ldr	r3, [pc, #812]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b0c      	cmp	r3, #12
 80023c8:	f200 8206 	bhi.w	80027d8 <HAL_RCC_GetSysClockFreq+0x440>
 80023cc:	a201      	add	r2, pc, #4	; (adr r2, 80023d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80023ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d2:	bf00      	nop
 80023d4:	08002409 	.word	0x08002409
 80023d8:	080027d9 	.word	0x080027d9
 80023dc:	080027d9 	.word	0x080027d9
 80023e0:	080027d9 	.word	0x080027d9
 80023e4:	08002411 	.word	0x08002411
 80023e8:	080027d9 	.word	0x080027d9
 80023ec:	080027d9 	.word	0x080027d9
 80023f0:	080027d9 	.word	0x080027d9
 80023f4:	08002419 	.word	0x08002419
 80023f8:	080027d9 	.word	0x080027d9
 80023fc:	080027d9 	.word	0x080027d9
 8002400:	080027d9 	.word	0x080027d9
 8002404:	08002609 	.word	0x08002609
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4bb9      	ldr	r3, [pc, #740]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800240a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800240e:	e1e7      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002410:	4bb8      	ldr	r3, [pc, #736]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002412:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002416:	e1e3      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002418:	4bb4      	ldr	r3, [pc, #720]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002420:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002424:	4bb1      	ldr	r3, [pc, #708]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d071      	beq.n	8002514 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002430:	4bae      	ldr	r3, [pc, #696]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	099b      	lsrs	r3, r3, #6
 8002436:	2200      	movs	r2, #0
 8002438:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800243c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002440:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002448:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800244c:	2300      	movs	r3, #0
 800244e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002452:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002456:	4622      	mov	r2, r4
 8002458:	462b      	mov	r3, r5
 800245a:	f04f 0000 	mov.w	r0, #0
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	0159      	lsls	r1, r3, #5
 8002464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002468:	0150      	lsls	r0, r2, #5
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4621      	mov	r1, r4
 8002470:	1a51      	subs	r1, r2, r1
 8002472:	6439      	str	r1, [r7, #64]	; 0x40
 8002474:	4629      	mov	r1, r5
 8002476:	eb63 0301 	sbc.w	r3, r3, r1
 800247a:	647b      	str	r3, [r7, #68]	; 0x44
 800247c:	f04f 0200 	mov.w	r2, #0
 8002480:	f04f 0300 	mov.w	r3, #0
 8002484:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002488:	4649      	mov	r1, r9
 800248a:	018b      	lsls	r3, r1, #6
 800248c:	4641      	mov	r1, r8
 800248e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002492:	4641      	mov	r1, r8
 8002494:	018a      	lsls	r2, r1, #6
 8002496:	4641      	mov	r1, r8
 8002498:	1a51      	subs	r1, r2, r1
 800249a:	63b9      	str	r1, [r7, #56]	; 0x38
 800249c:	4649      	mov	r1, r9
 800249e:	eb63 0301 	sbc.w	r3, r3, r1
 80024a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a4:	f04f 0200 	mov.w	r2, #0
 80024a8:	f04f 0300 	mov.w	r3, #0
 80024ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80024b0:	4649      	mov	r1, r9
 80024b2:	00cb      	lsls	r3, r1, #3
 80024b4:	4641      	mov	r1, r8
 80024b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024ba:	4641      	mov	r1, r8
 80024bc:	00ca      	lsls	r2, r1, #3
 80024be:	4610      	mov	r0, r2
 80024c0:	4619      	mov	r1, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	4622      	mov	r2, r4
 80024c6:	189b      	adds	r3, r3, r2
 80024c8:	633b      	str	r3, [r7, #48]	; 0x30
 80024ca:	462b      	mov	r3, r5
 80024cc:	460a      	mov	r2, r1
 80024ce:	eb42 0303 	adc.w	r3, r2, r3
 80024d2:	637b      	str	r3, [r7, #52]	; 0x34
 80024d4:	f04f 0200 	mov.w	r2, #0
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80024e0:	4629      	mov	r1, r5
 80024e2:	024b      	lsls	r3, r1, #9
 80024e4:	4621      	mov	r1, r4
 80024e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024ea:	4621      	mov	r1, r4
 80024ec:	024a      	lsls	r2, r1, #9
 80024ee:	4610      	mov	r0, r2
 80024f0:	4619      	mov	r1, r3
 80024f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024f6:	2200      	movs	r2, #0
 80024f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80024fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002500:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002504:	f7fe fbc0 	bl	8000c88 <__aeabi_uldivmod>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4613      	mov	r3, r2
 800250e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002512:	e067      	b.n	80025e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002514:	4b75      	ldr	r3, [pc, #468]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	2200      	movs	r2, #0
 800251c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002520:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002524:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800252c:	67bb      	str	r3, [r7, #120]	; 0x78
 800252e:	2300      	movs	r3, #0
 8002530:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002532:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002536:	4622      	mov	r2, r4
 8002538:	462b      	mov	r3, r5
 800253a:	f04f 0000 	mov.w	r0, #0
 800253e:	f04f 0100 	mov.w	r1, #0
 8002542:	0159      	lsls	r1, r3, #5
 8002544:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002548:	0150      	lsls	r0, r2, #5
 800254a:	4602      	mov	r2, r0
 800254c:	460b      	mov	r3, r1
 800254e:	4621      	mov	r1, r4
 8002550:	1a51      	subs	r1, r2, r1
 8002552:	62b9      	str	r1, [r7, #40]	; 0x28
 8002554:	4629      	mov	r1, r5
 8002556:	eb63 0301 	sbc.w	r3, r3, r1
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800255c:	f04f 0200 	mov.w	r2, #0
 8002560:	f04f 0300 	mov.w	r3, #0
 8002564:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002568:	4649      	mov	r1, r9
 800256a:	018b      	lsls	r3, r1, #6
 800256c:	4641      	mov	r1, r8
 800256e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002572:	4641      	mov	r1, r8
 8002574:	018a      	lsls	r2, r1, #6
 8002576:	4641      	mov	r1, r8
 8002578:	ebb2 0a01 	subs.w	sl, r2, r1
 800257c:	4649      	mov	r1, r9
 800257e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002582:	f04f 0200 	mov.w	r2, #0
 8002586:	f04f 0300 	mov.w	r3, #0
 800258a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800258e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002592:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002596:	4692      	mov	sl, r2
 8002598:	469b      	mov	fp, r3
 800259a:	4623      	mov	r3, r4
 800259c:	eb1a 0303 	adds.w	r3, sl, r3
 80025a0:	623b      	str	r3, [r7, #32]
 80025a2:	462b      	mov	r3, r5
 80025a4:	eb4b 0303 	adc.w	r3, fp, r3
 80025a8:	627b      	str	r3, [r7, #36]	; 0x24
 80025aa:	f04f 0200 	mov.w	r2, #0
 80025ae:	f04f 0300 	mov.w	r3, #0
 80025b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80025b6:	4629      	mov	r1, r5
 80025b8:	028b      	lsls	r3, r1, #10
 80025ba:	4621      	mov	r1, r4
 80025bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80025c0:	4621      	mov	r1, r4
 80025c2:	028a      	lsls	r2, r1, #10
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025cc:	2200      	movs	r2, #0
 80025ce:	673b      	str	r3, [r7, #112]	; 0x70
 80025d0:	677a      	str	r2, [r7, #116]	; 0x74
 80025d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80025d6:	f7fe fb57 	bl	8000c88 <__aeabi_uldivmod>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4613      	mov	r3, r2
 80025e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025e4:	4b41      	ldr	r3, [pc, #260]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	0c1b      	lsrs	r3, r3, #16
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	3301      	adds	r3, #1
 80025f0:	005b      	lsls	r3, r3, #1
 80025f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80025f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002602:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002606:	e0eb      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002608:	4b38      	ldr	r3, [pc, #224]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002610:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002614:	4b35      	ldr	r3, [pc, #212]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261c:	2b00      	cmp	r3, #0
 800261e:	d06b      	beq.n	80026f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002620:	4b32      	ldr	r3, [pc, #200]	; (80026ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	099b      	lsrs	r3, r3, #6
 8002626:	2200      	movs	r2, #0
 8002628:	66bb      	str	r3, [r7, #104]	; 0x68
 800262a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800262c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800262e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002632:	663b      	str	r3, [r7, #96]	; 0x60
 8002634:	2300      	movs	r3, #0
 8002636:	667b      	str	r3, [r7, #100]	; 0x64
 8002638:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800263c:	4622      	mov	r2, r4
 800263e:	462b      	mov	r3, r5
 8002640:	f04f 0000 	mov.w	r0, #0
 8002644:	f04f 0100 	mov.w	r1, #0
 8002648:	0159      	lsls	r1, r3, #5
 800264a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800264e:	0150      	lsls	r0, r2, #5
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4621      	mov	r1, r4
 8002656:	1a51      	subs	r1, r2, r1
 8002658:	61b9      	str	r1, [r7, #24]
 800265a:	4629      	mov	r1, r5
 800265c:	eb63 0301 	sbc.w	r3, r3, r1
 8002660:	61fb      	str	r3, [r7, #28]
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	f04f 0300 	mov.w	r3, #0
 800266a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800266e:	4659      	mov	r1, fp
 8002670:	018b      	lsls	r3, r1, #6
 8002672:	4651      	mov	r1, sl
 8002674:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002678:	4651      	mov	r1, sl
 800267a:	018a      	lsls	r2, r1, #6
 800267c:	4651      	mov	r1, sl
 800267e:	ebb2 0801 	subs.w	r8, r2, r1
 8002682:	4659      	mov	r1, fp
 8002684:	eb63 0901 	sbc.w	r9, r3, r1
 8002688:	f04f 0200 	mov.w	r2, #0
 800268c:	f04f 0300 	mov.w	r3, #0
 8002690:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002694:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002698:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800269c:	4690      	mov	r8, r2
 800269e:	4699      	mov	r9, r3
 80026a0:	4623      	mov	r3, r4
 80026a2:	eb18 0303 	adds.w	r3, r8, r3
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	462b      	mov	r3, r5
 80026aa:	eb49 0303 	adc.w	r3, r9, r3
 80026ae:	617b      	str	r3, [r7, #20]
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80026bc:	4629      	mov	r1, r5
 80026be:	024b      	lsls	r3, r1, #9
 80026c0:	4621      	mov	r1, r4
 80026c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026c6:	4621      	mov	r1, r4
 80026c8:	024a      	lsls	r2, r1, #9
 80026ca:	4610      	mov	r0, r2
 80026cc:	4619      	mov	r1, r3
 80026ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80026d2:	2200      	movs	r2, #0
 80026d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80026d6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80026d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80026dc:	f7fe fad4 	bl	8000c88 <__aeabi_uldivmod>
 80026e0:	4602      	mov	r2, r0
 80026e2:	460b      	mov	r3, r1
 80026e4:	4613      	mov	r3, r2
 80026e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026ea:	e065      	b.n	80027b8 <HAL_RCC_GetSysClockFreq+0x420>
 80026ec:	40023800 	.word	0x40023800
 80026f0:	00f42400 	.word	0x00f42400
 80026f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026f8:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	099b      	lsrs	r3, r3, #6
 80026fe:	2200      	movs	r2, #0
 8002700:	4618      	mov	r0, r3
 8002702:	4611      	mov	r1, r2
 8002704:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002708:	653b      	str	r3, [r7, #80]	; 0x50
 800270a:	2300      	movs	r3, #0
 800270c:	657b      	str	r3, [r7, #84]	; 0x54
 800270e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002712:	4642      	mov	r2, r8
 8002714:	464b      	mov	r3, r9
 8002716:	f04f 0000 	mov.w	r0, #0
 800271a:	f04f 0100 	mov.w	r1, #0
 800271e:	0159      	lsls	r1, r3, #5
 8002720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002724:	0150      	lsls	r0, r2, #5
 8002726:	4602      	mov	r2, r0
 8002728:	460b      	mov	r3, r1
 800272a:	4641      	mov	r1, r8
 800272c:	1a51      	subs	r1, r2, r1
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	4649      	mov	r1, r9
 8002732:	eb63 0301 	sbc.w	r3, r3, r1
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	f04f 0200 	mov.w	r2, #0
 800273c:	f04f 0300 	mov.w	r3, #0
 8002740:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002744:	4659      	mov	r1, fp
 8002746:	018b      	lsls	r3, r1, #6
 8002748:	4651      	mov	r1, sl
 800274a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800274e:	4651      	mov	r1, sl
 8002750:	018a      	lsls	r2, r1, #6
 8002752:	4651      	mov	r1, sl
 8002754:	1a54      	subs	r4, r2, r1
 8002756:	4659      	mov	r1, fp
 8002758:	eb63 0501 	sbc.w	r5, r3, r1
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	00eb      	lsls	r3, r5, #3
 8002766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800276a:	00e2      	lsls	r2, r4, #3
 800276c:	4614      	mov	r4, r2
 800276e:	461d      	mov	r5, r3
 8002770:	4643      	mov	r3, r8
 8002772:	18e3      	adds	r3, r4, r3
 8002774:	603b      	str	r3, [r7, #0]
 8002776:	464b      	mov	r3, r9
 8002778:	eb45 0303 	adc.w	r3, r5, r3
 800277c:	607b      	str	r3, [r7, #4]
 800277e:	f04f 0200 	mov.w	r2, #0
 8002782:	f04f 0300 	mov.w	r3, #0
 8002786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800278a:	4629      	mov	r1, r5
 800278c:	028b      	lsls	r3, r1, #10
 800278e:	4621      	mov	r1, r4
 8002790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002794:	4621      	mov	r1, r4
 8002796:	028a      	lsls	r2, r1, #10
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027a0:	2200      	movs	r2, #0
 80027a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80027a6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027aa:	f7fe fa6d 	bl	8000c88 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4613      	mov	r3, r2
 80027b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x458>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	0f1b      	lsrs	r3, r3, #28
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80027c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80027ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027d6:	e003      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x45c>)
 80027da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027de:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	37b8      	adds	r7, #184	; 0xb8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800
 80027f4:	00f42400 	.word	0x00f42400

080027f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e28d      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	2b00      	cmp	r3, #0
 8002814:	f000 8083 	beq.w	800291e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002818:	4b94      	ldr	r3, [pc, #592]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 030c 	and.w	r3, r3, #12
 8002820:	2b04      	cmp	r3, #4
 8002822:	d019      	beq.n	8002858 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002824:	4b91      	ldr	r3, [pc, #580]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800282c:	2b08      	cmp	r3, #8
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002830:	4b8e      	ldr	r3, [pc, #568]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002838:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b8b      	ldr	r3, [pc, #556]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b88      	ldr	r3, [pc, #544]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b84      	ldr	r3, [pc, #528]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05b      	beq.n	800291c <HAL_RCC_OscConfig+0x124>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d157      	bne.n	800291c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e25a      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x90>
 800287a:	4b7c      	ldr	r3, [pc, #496]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a7b      	ldr	r2, [pc, #492]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xcc>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0xb4>
 8002892:	4b76      	ldr	r3, [pc, #472]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a75      	ldr	r2, [pc, #468]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b73      	ldr	r3, [pc, #460]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a72      	ldr	r2, [pc, #456]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xcc>
 80028ac:	4b6f      	ldr	r3, [pc, #444]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a6e      	ldr	r2, [pc, #440]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b6c      	ldr	r3, [pc, #432]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a6b      	ldr	r2, [pc, #428]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff f97c 	bl	8001bc8 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff f978 	bl	8001bc8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	; 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e21f      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b61      	ldr	r3, [pc, #388]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xdc>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7ff f968 	bl	8001bc8 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff f964 	bl	8001bc8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	; 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e20b      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x104>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d06f      	beq.n	8002a0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800292a:	4b50      	ldr	r3, [pc, #320]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d017      	beq.n	8002966 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002936:	4b4d      	ldr	r3, [pc, #308]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800293e:	2b08      	cmp	r3, #8
 8002940:	d105      	bne.n	800294e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d00b      	beq.n	8002966 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294e:	4b47      	ldr	r3, [pc, #284]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002956:	2b0c      	cmp	r3, #12
 8002958:	d11c      	bne.n	8002994 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800295a:	4b44      	ldr	r3, [pc, #272]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d116      	bne.n	8002994 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002966:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d005      	beq.n	800297e <HAL_RCC_OscConfig+0x186>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d001      	beq.n	800297e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e1d3      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800297e:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	00db      	lsls	r3, r3, #3
 800298c:	4937      	ldr	r1, [pc, #220]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 800298e:	4313      	orrs	r3, r2
 8002990:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002992:	e03a      	b.n	8002a0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d020      	beq.n	80029de <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800299c:	4b34      	ldr	r3, [pc, #208]	; (8002a70 <HAL_RCC_OscConfig+0x278>)
 800299e:	2201      	movs	r2, #1
 80029a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7ff f911 	bl	8001bc8 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029aa:	f7ff f90d 	bl	8001bc8 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e1b4      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0f0      	beq.n	80029aa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	691b      	ldr	r3, [r3, #16]
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4925      	ldr	r1, [pc, #148]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	600b      	str	r3, [r1, #0]
 80029dc:	e015      	b.n	8002a0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <HAL_RCC_OscConfig+0x278>)
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e4:	f7ff f8f0 	bl	8001bc8 <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029ec:	f7ff f8ec 	bl	8001bc8 <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e193      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029fe:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f0      	bne.n	80029ec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f003 0308 	and.w	r3, r3, #8
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d036      	beq.n	8002a84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d016      	beq.n	8002a4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a1e:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002a20:	2201      	movs	r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7ff f8d0 	bl	8001bc8 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a2c:	f7ff f8cc 	bl	8001bc8 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e173      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_RCC_OscConfig+0x274>)
 8002a40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a42:	f003 0302 	and.w	r3, r3, #2
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x234>
 8002a4a:	e01b      	b.n	8002a84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <HAL_RCC_OscConfig+0x27c>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a52:	f7ff f8b9 	bl	8001bc8 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a58:	e00e      	b.n	8002a78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a5a:	f7ff f8b5 	bl	8001bc8 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d907      	bls.n	8002a78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e15c      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	42470000 	.word	0x42470000
 8002a74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a78:	4b8a      	ldr	r3, [pc, #552]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d1ea      	bne.n	8002a5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 8097 	beq.w	8002bc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a92:	2300      	movs	r3, #0
 8002a94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a96:	4b83      	ldr	r3, [pc, #524]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	4b7f      	ldr	r3, [pc, #508]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	4a7e      	ldr	r2, [pc, #504]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab2:	4b7c      	ldr	r3, [pc, #496]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac2:	4b79      	ldr	r3, [pc, #484]	; (8002ca8 <HAL_RCC_OscConfig+0x4b0>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ace:	4b76      	ldr	r3, [pc, #472]	; (8002ca8 <HAL_RCC_OscConfig+0x4b0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a75      	ldr	r2, [pc, #468]	; (8002ca8 <HAL_RCC_OscConfig+0x4b0>)
 8002ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ad8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ada:	f7ff f875 	bl	8001bc8 <HAL_GetTick>
 8002ade:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae2:	f7ff f871 	bl	8001bc8 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e118      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002af4:	4b6c      	ldr	r3, [pc, #432]	; (8002ca8 <HAL_RCC_OscConfig+0x4b0>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0f0      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	2b01      	cmp	r3, #1
 8002b06:	d106      	bne.n	8002b16 <HAL_RCC_OscConfig+0x31e>
 8002b08:	4b66      	ldr	r3, [pc, #408]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b0c:	4a65      	ldr	r2, [pc, #404]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b0e:	f043 0301 	orr.w	r3, r3, #1
 8002b12:	6713      	str	r3, [r2, #112]	; 0x70
 8002b14:	e01c      	b.n	8002b50 <HAL_RCC_OscConfig+0x358>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	2b05      	cmp	r3, #5
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCC_OscConfig+0x340>
 8002b1e:	4b61      	ldr	r3, [pc, #388]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b22:	4a60      	ldr	r2, [pc, #384]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	6713      	str	r3, [r2, #112]	; 0x70
 8002b2a:	4b5e      	ldr	r3, [pc, #376]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6713      	str	r3, [r2, #112]	; 0x70
 8002b36:	e00b      	b.n	8002b50 <HAL_RCC_OscConfig+0x358>
 8002b38:	4b5a      	ldr	r3, [pc, #360]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	4a59      	ldr	r2, [pc, #356]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b3e:	f023 0301 	bic.w	r3, r3, #1
 8002b42:	6713      	str	r3, [r2, #112]	; 0x70
 8002b44:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b48:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b4a:	f023 0304 	bic.w	r3, r3, #4
 8002b4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d015      	beq.n	8002b84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b58:	f7ff f836 	bl	8001bc8 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	e00a      	b.n	8002b76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b60:	f7ff f832 	bl	8001bc8 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e0d7      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b76:	4b4b      	ldr	r3, [pc, #300]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ee      	beq.n	8002b60 <HAL_RCC_OscConfig+0x368>
 8002b82:	e014      	b.n	8002bae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b84:	f7ff f820 	bl	8001bc8 <HAL_GetTick>
 8002b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	e00a      	b.n	8002ba2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b8c:	f7ff f81c 	bl	8001bc8 <HAL_GetTick>
 8002b90:	4602      	mov	r2, r0
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	1ad3      	subs	r3, r2, r3
 8002b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d901      	bls.n	8002ba2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e0c1      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ba2:	4b40      	ldr	r3, [pc, #256]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ba6:	f003 0302 	and.w	r3, r3, #2
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d1ee      	bne.n	8002b8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bae:	7dfb      	ldrb	r3, [r7, #23]
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d105      	bne.n	8002bc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	4a3a      	ldr	r2, [pc, #232]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002bba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	699b      	ldr	r3, [r3, #24]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	f000 80ad 	beq.w	8002d24 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 030c 	and.w	r3, r3, #12
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d060      	beq.n	8002c98 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	699b      	ldr	r3, [r3, #24]
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d145      	bne.n	8002c6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <HAL_RCC_OscConfig+0x4b4>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fff0 	bl	8001bc8 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe ffec 	bl	8001bc8 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e093      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bfe:	4b29      	ldr	r3, [pc, #164]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69da      	ldr	r2, [r3, #28]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
 8002c12:	431a      	orrs	r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	019b      	lsls	r3, r3, #6
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c20:	085b      	lsrs	r3, r3, #1
 8002c22:	3b01      	subs	r3, #1
 8002c24:	041b      	lsls	r3, r3, #16
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	071b      	lsls	r3, r3, #28
 8002c36:	491b      	ldr	r1, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c3c:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <HAL_RCC_OscConfig+0x4b4>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c42:	f7fe ffc1 	bl	8001bc8 <HAL_GetTick>
 8002c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c48:	e008      	b.n	8002c5c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4a:	f7fe ffbd 	bl	8001bc8 <HAL_GetTick>
 8002c4e:	4602      	mov	r2, r0
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d901      	bls.n	8002c5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e064      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c5c:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d0f0      	beq.n	8002c4a <HAL_RCC_OscConfig+0x452>
 8002c68:	e05c      	b.n	8002d24 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c6a:	4b10      	ldr	r3, [pc, #64]	; (8002cac <HAL_RCC_OscConfig+0x4b4>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c70:	f7fe ffaa 	bl	8001bc8 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe ffa6 	bl	8001bc8 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04d      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c8a:	4b06      	ldr	r3, [pc, #24]	; (8002ca4 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x480>
 8002c96:	e045      	b.n	8002d24 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d107      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e040      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40007000 	.word	0x40007000
 8002cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002cb0:	4b1f      	ldr	r3, [pc, #124]	; (8002d30 <HAL_RCC_OscConfig+0x538>)
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d030      	beq.n	8002d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	d129      	bne.n	8002d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d122      	bne.n	8002d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	687a      	ldr	r2, [r7, #4]
 8002ce4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d119      	bne.n	8002d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	3b01      	subs	r3, #1
 8002cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d10f      	bne.n	8002d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d107      	bne.n	8002d20 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d001      	beq.n	8002d24 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800

08002d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e041      	b.n	8002dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d106      	bne.n	8002d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f839 	bl	8002dd2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	3304      	adds	r3, #4
 8002d70:	4619      	mov	r1, r3
 8002d72:	4610      	mov	r0, r2
 8002d74:	f000 f9d8 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2201      	movs	r2, #1
 8002d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2201      	movs	r2, #1
 8002da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd2:	b480      	push	{r7}
 8002dd4:	b083      	sub	sp, #12
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
	...

08002de8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b085      	sub	sp, #20
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d001      	beq.n	8002e00 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e04e      	b.n	8002e9e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a23      	ldr	r2, [pc, #140]	; (8002eac <HAL_TIM_Base_Start_IT+0xc4>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d022      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x80>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e2a:	d01d      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x80>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a1f      	ldr	r2, [pc, #124]	; (8002eb0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d018      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x80>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a1e      	ldr	r2, [pc, #120]	; (8002eb4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d013      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x80>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00e      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x80>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a1b      	ldr	r2, [pc, #108]	; (8002ebc <HAL_TIM_Base_Start_IT+0xd4>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d009      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x80>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a19      	ldr	r2, [pc, #100]	; (8002ec0 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d004      	beq.n	8002e68 <HAL_TIM_Base_Start_IT+0x80>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a18      	ldr	r2, [pc, #96]	; (8002ec4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d111      	bne.n	8002e8c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2b06      	cmp	r3, #6
 8002e78:	d010      	beq.n	8002e9c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f042 0201 	orr.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	e007      	b.n	8002e9c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0201 	orr.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40000c00 	.word	0x40000c00
 8002ebc:	40010400 	.word	0x40010400
 8002ec0:	40014000 	.word	0x40014000
 8002ec4:	40001800 	.word	0x40001800

08002ec8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0202 	mvn.w	r2, #2
 8002ef4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	699b      	ldr	r3, [r3, #24]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 f8ee 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 f8e0 	bl	80030d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f8f1 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0204 	mvn.w	r2, #4
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f8c4 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f8b6 	bl	80030d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f000 f8c7 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b08      	cmp	r3, #8
 8002f84:	d122      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d11b      	bne.n	8002fcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0208 	mvn.w	r2, #8
 8002f9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2204      	movs	r2, #4
 8002fa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f003 0303 	and.w	r3, r3, #3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d003      	beq.n	8002fba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f89a 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 8002fb8:	e005      	b.n	8002fc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f88c 	bl	80030d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f89d 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	f003 0310 	and.w	r3, r3, #16
 8002fd6:	2b10      	cmp	r3, #16
 8002fd8:	d122      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b10      	cmp	r3, #16
 8002fe6:	d11b      	bne.n	8003020 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f06f 0210 	mvn.w	r2, #16
 8002ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2208      	movs	r2, #8
 8002ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69db      	ldr	r3, [r3, #28]
 8002ffe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003002:	2b00      	cmp	r3, #0
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	f000 f870 	bl	80030ec <HAL_TIM_IC_CaptureCallback>
 800300c:	e005      	b.n	800301a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 f862 	bl	80030d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f873 	bl	8003100 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	691b      	ldr	r3, [r3, #16]
 8003026:	f003 0301 	and.w	r3, r3, #1
 800302a:	2b01      	cmp	r3, #1
 800302c:	d10e      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f06f 0201 	mvn.w	r2, #1
 8003044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f7fe fb5e 	bl	8001708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003056:	2b80      	cmp	r3, #128	; 0x80
 8003058:	d10e      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003064:	2b80      	cmp	r3, #128	; 0x80
 8003066:	d107      	bne.n	8003078 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 f902 	bl	800327c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b40      	cmp	r3, #64	; 0x40
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003090:	2b40      	cmp	r3, #64	; 0x40
 8003092:	d107      	bne.n	80030a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800309c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 f838 	bl	8003114 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0320 	and.w	r3, r3, #32
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d107      	bne.n	80030d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0220 	mvn.w	r2, #32
 80030c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f8cc 	bl	8003268 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030d0:	bf00      	nop
 80030d2:	3708      	adds	r7, #8
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030f4:	bf00      	nop
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003114:	b480      	push	{r7}
 8003116:	b083      	sub	sp, #12
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a40      	ldr	r2, [pc, #256]	; (800323c <TIM_Base_SetConfig+0x114>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d00f      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3d      	ldr	r2, [pc, #244]	; (8003240 <TIM_Base_SetConfig+0x118>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00b      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3c      	ldr	r2, [pc, #240]	; (8003244 <TIM_Base_SetConfig+0x11c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3b      	ldr	r2, [pc, #236]	; (8003248 <TIM_Base_SetConfig+0x120>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3a      	ldr	r2, [pc, #232]	; (800324c <TIM_Base_SetConfig+0x124>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a2f      	ldr	r2, [pc, #188]	; (800323c <TIM_Base_SetConfig+0x114>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d027      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2c      	ldr	r2, [pc, #176]	; (8003240 <TIM_Base_SetConfig+0x118>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d023      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2b      	ldr	r2, [pc, #172]	; (8003244 <TIM_Base_SetConfig+0x11c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01f      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <TIM_Base_SetConfig+0x120>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a29      	ldr	r2, [pc, #164]	; (800324c <TIM_Base_SetConfig+0x124>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d017      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a28      	ldr	r2, [pc, #160]	; (8003250 <TIM_Base_SetConfig+0x128>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <TIM_Base_SetConfig+0x12c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00f      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a26      	ldr	r2, [pc, #152]	; (8003258 <TIM_Base_SetConfig+0x130>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a25      	ldr	r2, [pc, #148]	; (800325c <TIM_Base_SetConfig+0x134>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a24      	ldr	r2, [pc, #144]	; (8003260 <TIM_Base_SetConfig+0x138>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a23      	ldr	r2, [pc, #140]	; (8003264 <TIM_Base_SetConfig+0x13c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <TIM_Base_SetConfig+0x114>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_Base_SetConfig+0xf8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <TIM_Base_SetConfig+0x124>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d103      	bne.n	8003228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	615a      	str	r2, [r3, #20]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40010000 	.word	0x40010000
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800
 8003248:	40000c00 	.word	0x40000c00
 800324c:	40010400 	.word	0x40010400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800
 800325c:	40001800 	.word	0x40001800
 8003260:	40001c00 	.word	0x40001c00
 8003264:	40002000 	.word	0x40002000

08003268 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003270:	bf00      	nop
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr

0800327c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d101      	bne.n	80032a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e03f      	b.n	8003322 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032b6:	6878      	ldr	r0, [r7, #4]
 80032b8:	f7fe fa6a 	bl	8001790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2224      	movs	r2, #36	; 0x24
 80032c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f929 	bl	800352c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	691a      	ldr	r2, [r3, #16]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003308:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2200      	movs	r2, #0
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3708      	adds	r7, #8
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b08a      	sub	sp, #40	; 0x28
 800332e:	af02      	add	r7, sp, #8
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	4613      	mov	r3, r2
 8003338:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b20      	cmp	r3, #32
 8003348:	d17c      	bne.n	8003444 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_UART_Transmit+0x2c>
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e075      	b.n	8003446 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_UART_Transmit+0x3e>
 8003364:	2302      	movs	r3, #2
 8003366:	e06e      	b.n	8003446 <HAL_UART_Transmit+0x11c>
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2201      	movs	r2, #1
 800336c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2221      	movs	r2, #33	; 0x21
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800337e:	f7fe fc23 	bl	8001bc8 <HAL_GetTick>
 8003382:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	88fa      	ldrh	r2, [r7, #6]
 8003388:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	88fa      	ldrh	r2, [r7, #6]
 800338e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003398:	d108      	bne.n	80033ac <HAL_UART_Transmit+0x82>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d104      	bne.n	80033ac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	e003      	b.n	80033b4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033bc:	e02a      	b.n	8003414 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	9300      	str	r3, [sp, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2200      	movs	r2, #0
 80033c6:	2180      	movs	r1, #128	; 0x80
 80033c8:	68f8      	ldr	r0, [r7, #12]
 80033ca:	f000 f840 	bl	800344e <UART_WaitOnFlagUntilTimeout>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d001      	beq.n	80033d8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e036      	b.n	8003446 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10b      	bne.n	80033f6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	881b      	ldrh	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	3302      	adds	r3, #2
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	e007      	b.n	8003406 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	781a      	ldrb	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	3301      	adds	r3, #1
 8003404:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800340a:	b29b      	uxth	r3, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	b29a      	uxth	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1cf      	bne.n	80033be <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2200      	movs	r2, #0
 8003426:	2140      	movs	r1, #64	; 0x40
 8003428:	68f8      	ldr	r0, [r7, #12]
 800342a:	f000 f810 	bl	800344e <UART_WaitOnFlagUntilTimeout>
 800342e:	4603      	mov	r3, r0
 8003430:	2b00      	cmp	r3, #0
 8003432:	d001      	beq.n	8003438 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003434:	2303      	movs	r3, #3
 8003436:	e006      	b.n	8003446 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2220      	movs	r2, #32
 800343c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b090      	sub	sp, #64	; 0x40
 8003452:	af00      	add	r7, sp, #0
 8003454:	60f8      	str	r0, [r7, #12]
 8003456:	60b9      	str	r1, [r7, #8]
 8003458:	603b      	str	r3, [r7, #0]
 800345a:	4613      	mov	r3, r2
 800345c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800345e:	e050      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003462:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003466:	d04c      	beq.n	8003502 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <UART_WaitOnFlagUntilTimeout+0x30>
 800346e:	f7fe fbab 	bl	8001bc8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800347a:	429a      	cmp	r2, r3
 800347c:	d241      	bcs.n	8003502 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	330c      	adds	r3, #12
 8003484:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003490:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	330c      	adds	r3, #12
 800349c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800349e:	637a      	str	r2, [r7, #52]	; 0x34
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034a6:	e841 2300 	strex	r3, r2, [r1]
 80034aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1e5      	bne.n	800347e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	3314      	adds	r3, #20
 80034b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	e853 3f00 	ldrex	r3, [r3]
 80034c0:	613b      	str	r3, [r7, #16]
   return(result);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	f023 0301 	bic.w	r3, r3, #1
 80034c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	3314      	adds	r3, #20
 80034d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034d2:	623a      	str	r2, [r7, #32]
 80034d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d6:	69f9      	ldr	r1, [r7, #28]
 80034d8:	6a3a      	ldr	r2, [r7, #32]
 80034da:	e841 2300 	strex	r3, r2, [r1]
 80034de:	61bb      	str	r3, [r7, #24]
   return(result);
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1e5      	bne.n	80034b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2220      	movs	r2, #32
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e00f      	b.n	8003522 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d09f      	beq.n	8003460 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3740      	adds	r7, #64	; 0x40
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
	...

0800352c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800352c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003530:	b0c0      	sub	sp, #256	; 0x100
 8003532:	af00      	add	r7, sp, #0
 8003534:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003548:	68d9      	ldr	r1, [r3, #12]
 800354a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	ea40 0301 	orr.w	r3, r0, r1
 8003554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	431a      	orrs	r2, r3
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	431a      	orrs	r2, r3
 800356c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	4313      	orrs	r3, r2
 8003574:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003584:	f021 010c 	bic.w	r1, r1, #12
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003592:	430b      	orrs	r3, r1
 8003594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a6:	6999      	ldr	r1, [r3, #24]
 80035a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	ea40 0301 	orr.w	r3, r0, r1
 80035b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	4b8f      	ldr	r3, [pc, #572]	; (80037f8 <UART_SetConfig+0x2cc>)
 80035bc:	429a      	cmp	r2, r3
 80035be:	d005      	beq.n	80035cc <UART_SetConfig+0xa0>
 80035c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4b8d      	ldr	r3, [pc, #564]	; (80037fc <UART_SetConfig+0x2d0>)
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d104      	bne.n	80035d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035cc:	f7fe fe9e 	bl	800230c <HAL_RCC_GetPCLK2Freq>
 80035d0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80035d4:	e003      	b.n	80035de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80035d6:	f7fe fe85 	bl	80022e4 <HAL_RCC_GetPCLK1Freq>
 80035da:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e2:	69db      	ldr	r3, [r3, #28]
 80035e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035e8:	f040 810c 	bne.w	8003804 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80035f0:	2200      	movs	r2, #0
 80035f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80035f6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80035fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80035fe:	4622      	mov	r2, r4
 8003600:	462b      	mov	r3, r5
 8003602:	1891      	adds	r1, r2, r2
 8003604:	65b9      	str	r1, [r7, #88]	; 0x58
 8003606:	415b      	adcs	r3, r3
 8003608:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800360e:	4621      	mov	r1, r4
 8003610:	eb12 0801 	adds.w	r8, r2, r1
 8003614:	4629      	mov	r1, r5
 8003616:	eb43 0901 	adc.w	r9, r3, r1
 800361a:	f04f 0200 	mov.w	r2, #0
 800361e:	f04f 0300 	mov.w	r3, #0
 8003622:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003626:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800362a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800362e:	4690      	mov	r8, r2
 8003630:	4699      	mov	r9, r3
 8003632:	4623      	mov	r3, r4
 8003634:	eb18 0303 	adds.w	r3, r8, r3
 8003638:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800363c:	462b      	mov	r3, r5
 800363e:	eb49 0303 	adc.w	r3, r9, r3
 8003642:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003652:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003656:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800365a:	460b      	mov	r3, r1
 800365c:	18db      	adds	r3, r3, r3
 800365e:	653b      	str	r3, [r7, #80]	; 0x50
 8003660:	4613      	mov	r3, r2
 8003662:	eb42 0303 	adc.w	r3, r2, r3
 8003666:	657b      	str	r3, [r7, #84]	; 0x54
 8003668:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800366c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003670:	f7fd fb0a 	bl	8000c88 <__aeabi_uldivmod>
 8003674:	4602      	mov	r2, r0
 8003676:	460b      	mov	r3, r1
 8003678:	4b61      	ldr	r3, [pc, #388]	; (8003800 <UART_SetConfig+0x2d4>)
 800367a:	fba3 2302 	umull	r2, r3, r3, r2
 800367e:	095b      	lsrs	r3, r3, #5
 8003680:	011c      	lsls	r4, r3, #4
 8003682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003686:	2200      	movs	r2, #0
 8003688:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800368c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003690:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003694:	4642      	mov	r2, r8
 8003696:	464b      	mov	r3, r9
 8003698:	1891      	adds	r1, r2, r2
 800369a:	64b9      	str	r1, [r7, #72]	; 0x48
 800369c:	415b      	adcs	r3, r3
 800369e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036a4:	4641      	mov	r1, r8
 80036a6:	eb12 0a01 	adds.w	sl, r2, r1
 80036aa:	4649      	mov	r1, r9
 80036ac:	eb43 0b01 	adc.w	fp, r3, r1
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	f04f 0300 	mov.w	r3, #0
 80036b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036c4:	4692      	mov	sl, r2
 80036c6:	469b      	mov	fp, r3
 80036c8:	4643      	mov	r3, r8
 80036ca:	eb1a 0303 	adds.w	r3, sl, r3
 80036ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036d2:	464b      	mov	r3, r9
 80036d4:	eb4b 0303 	adc.w	r3, fp, r3
 80036d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80036dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80036e8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80036ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80036f0:	460b      	mov	r3, r1
 80036f2:	18db      	adds	r3, r3, r3
 80036f4:	643b      	str	r3, [r7, #64]	; 0x40
 80036f6:	4613      	mov	r3, r2
 80036f8:	eb42 0303 	adc.w	r3, r2, r3
 80036fc:	647b      	str	r3, [r7, #68]	; 0x44
 80036fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003706:	f7fd fabf 	bl	8000c88 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4611      	mov	r1, r2
 8003710:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <UART_SetConfig+0x2d4>)
 8003712:	fba3 2301 	umull	r2, r3, r3, r1
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2264      	movs	r2, #100	; 0x64
 800371a:	fb02 f303 	mul.w	r3, r2, r3
 800371e:	1acb      	subs	r3, r1, r3
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003726:	4b36      	ldr	r3, [pc, #216]	; (8003800 <UART_SetConfig+0x2d4>)
 8003728:	fba3 2302 	umull	r2, r3, r3, r2
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003734:	441c      	add	r4, r3
 8003736:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800373a:	2200      	movs	r2, #0
 800373c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003740:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003744:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003748:	4642      	mov	r2, r8
 800374a:	464b      	mov	r3, r9
 800374c:	1891      	adds	r1, r2, r2
 800374e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003750:	415b      	adcs	r3, r3
 8003752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003754:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003758:	4641      	mov	r1, r8
 800375a:	1851      	adds	r1, r2, r1
 800375c:	6339      	str	r1, [r7, #48]	; 0x30
 800375e:	4649      	mov	r1, r9
 8003760:	414b      	adcs	r3, r1
 8003762:	637b      	str	r3, [r7, #52]	; 0x34
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	f04f 0300 	mov.w	r3, #0
 800376c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003770:	4659      	mov	r1, fp
 8003772:	00cb      	lsls	r3, r1, #3
 8003774:	4651      	mov	r1, sl
 8003776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800377a:	4651      	mov	r1, sl
 800377c:	00ca      	lsls	r2, r1, #3
 800377e:	4610      	mov	r0, r2
 8003780:	4619      	mov	r1, r3
 8003782:	4603      	mov	r3, r0
 8003784:	4642      	mov	r2, r8
 8003786:	189b      	adds	r3, r3, r2
 8003788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800378c:	464b      	mov	r3, r9
 800378e:	460a      	mov	r2, r1
 8003790:	eb42 0303 	adc.w	r3, r2, r3
 8003794:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037a4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037ac:	460b      	mov	r3, r1
 80037ae:	18db      	adds	r3, r3, r3
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b2:	4613      	mov	r3, r2
 80037b4:	eb42 0303 	adc.w	r3, r2, r3
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037c2:	f7fd fa61 	bl	8000c88 <__aeabi_uldivmod>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <UART_SetConfig+0x2d4>)
 80037cc:	fba3 1302 	umull	r1, r3, r3, r2
 80037d0:	095b      	lsrs	r3, r3, #5
 80037d2:	2164      	movs	r1, #100	; 0x64
 80037d4:	fb01 f303 	mul.w	r3, r1, r3
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	00db      	lsls	r3, r3, #3
 80037dc:	3332      	adds	r3, #50	; 0x32
 80037de:	4a08      	ldr	r2, [pc, #32]	; (8003800 <UART_SetConfig+0x2d4>)
 80037e0:	fba2 2303 	umull	r2, r3, r2, r3
 80037e4:	095b      	lsrs	r3, r3, #5
 80037e6:	f003 0207 	and.w	r2, r3, #7
 80037ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4422      	add	r2, r4
 80037f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80037f4:	e105      	b.n	8003a02 <UART_SetConfig+0x4d6>
 80037f6:	bf00      	nop
 80037f8:	40011000 	.word	0x40011000
 80037fc:	40011400 	.word	0x40011400
 8003800:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003804:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003808:	2200      	movs	r2, #0
 800380a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800380e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003812:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003816:	4642      	mov	r2, r8
 8003818:	464b      	mov	r3, r9
 800381a:	1891      	adds	r1, r2, r2
 800381c:	6239      	str	r1, [r7, #32]
 800381e:	415b      	adcs	r3, r3
 8003820:	627b      	str	r3, [r7, #36]	; 0x24
 8003822:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003826:	4641      	mov	r1, r8
 8003828:	1854      	adds	r4, r2, r1
 800382a:	4649      	mov	r1, r9
 800382c:	eb43 0501 	adc.w	r5, r3, r1
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	00eb      	lsls	r3, r5, #3
 800383a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800383e:	00e2      	lsls	r2, r4, #3
 8003840:	4614      	mov	r4, r2
 8003842:	461d      	mov	r5, r3
 8003844:	4643      	mov	r3, r8
 8003846:	18e3      	adds	r3, r4, r3
 8003848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800384c:	464b      	mov	r3, r9
 800384e:	eb45 0303 	adc.w	r3, r5, r3
 8003852:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003862:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003872:	4629      	mov	r1, r5
 8003874:	008b      	lsls	r3, r1, #2
 8003876:	4621      	mov	r1, r4
 8003878:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800387c:	4621      	mov	r1, r4
 800387e:	008a      	lsls	r2, r1, #2
 8003880:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003884:	f7fd fa00 	bl	8000c88 <__aeabi_uldivmod>
 8003888:	4602      	mov	r2, r0
 800388a:	460b      	mov	r3, r1
 800388c:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <UART_SetConfig+0x4e4>)
 800388e:	fba3 2302 	umull	r2, r3, r3, r2
 8003892:	095b      	lsrs	r3, r3, #5
 8003894:	011c      	lsls	r4, r3, #4
 8003896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800389a:	2200      	movs	r2, #0
 800389c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038a0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038a8:	4642      	mov	r2, r8
 80038aa:	464b      	mov	r3, r9
 80038ac:	1891      	adds	r1, r2, r2
 80038ae:	61b9      	str	r1, [r7, #24]
 80038b0:	415b      	adcs	r3, r3
 80038b2:	61fb      	str	r3, [r7, #28]
 80038b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038b8:	4641      	mov	r1, r8
 80038ba:	1851      	adds	r1, r2, r1
 80038bc:	6139      	str	r1, [r7, #16]
 80038be:	4649      	mov	r1, r9
 80038c0:	414b      	adcs	r3, r1
 80038c2:	617b      	str	r3, [r7, #20]
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	f04f 0300 	mov.w	r3, #0
 80038cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038d0:	4659      	mov	r1, fp
 80038d2:	00cb      	lsls	r3, r1, #3
 80038d4:	4651      	mov	r1, sl
 80038d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80038da:	4651      	mov	r1, sl
 80038dc:	00ca      	lsls	r2, r1, #3
 80038de:	4610      	mov	r0, r2
 80038e0:	4619      	mov	r1, r3
 80038e2:	4603      	mov	r3, r0
 80038e4:	4642      	mov	r2, r8
 80038e6:	189b      	adds	r3, r3, r2
 80038e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80038ec:	464b      	mov	r3, r9
 80038ee:	460a      	mov	r2, r1
 80038f0:	eb42 0303 	adc.w	r3, r2, r3
 80038f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	67bb      	str	r3, [r7, #120]	; 0x78
 8003902:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003904:	f04f 0200 	mov.w	r2, #0
 8003908:	f04f 0300 	mov.w	r3, #0
 800390c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003910:	4649      	mov	r1, r9
 8003912:	008b      	lsls	r3, r1, #2
 8003914:	4641      	mov	r1, r8
 8003916:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800391a:	4641      	mov	r1, r8
 800391c:	008a      	lsls	r2, r1, #2
 800391e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003922:	f7fd f9b1 	bl	8000c88 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <UART_SetConfig+0x4e4>)
 800392c:	fba3 1302 	umull	r1, r3, r3, r2
 8003930:	095b      	lsrs	r3, r3, #5
 8003932:	2164      	movs	r1, #100	; 0x64
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	011b      	lsls	r3, r3, #4
 800393c:	3332      	adds	r3, #50	; 0x32
 800393e:	4a34      	ldr	r2, [pc, #208]	; (8003a10 <UART_SetConfig+0x4e4>)
 8003940:	fba2 2303 	umull	r2, r3, r2, r3
 8003944:	095b      	lsrs	r3, r3, #5
 8003946:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800394a:	441c      	add	r4, r3
 800394c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003950:	2200      	movs	r2, #0
 8003952:	673b      	str	r3, [r7, #112]	; 0x70
 8003954:	677a      	str	r2, [r7, #116]	; 0x74
 8003956:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800395a:	4642      	mov	r2, r8
 800395c:	464b      	mov	r3, r9
 800395e:	1891      	adds	r1, r2, r2
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	415b      	adcs	r3, r3
 8003964:	60fb      	str	r3, [r7, #12]
 8003966:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800396a:	4641      	mov	r1, r8
 800396c:	1851      	adds	r1, r2, r1
 800396e:	6039      	str	r1, [r7, #0]
 8003970:	4649      	mov	r1, r9
 8003972:	414b      	adcs	r3, r1
 8003974:	607b      	str	r3, [r7, #4]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003982:	4659      	mov	r1, fp
 8003984:	00cb      	lsls	r3, r1, #3
 8003986:	4651      	mov	r1, sl
 8003988:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800398c:	4651      	mov	r1, sl
 800398e:	00ca      	lsls	r2, r1, #3
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	4603      	mov	r3, r0
 8003996:	4642      	mov	r2, r8
 8003998:	189b      	adds	r3, r3, r2
 800399a:	66bb      	str	r3, [r7, #104]	; 0x68
 800399c:	464b      	mov	r3, r9
 800399e:	460a      	mov	r2, r1
 80039a0:	eb42 0303 	adc.w	r3, r2, r3
 80039a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	663b      	str	r3, [r7, #96]	; 0x60
 80039b0:	667a      	str	r2, [r7, #100]	; 0x64
 80039b2:	f04f 0200 	mov.w	r2, #0
 80039b6:	f04f 0300 	mov.w	r3, #0
 80039ba:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039be:	4649      	mov	r1, r9
 80039c0:	008b      	lsls	r3, r1, #2
 80039c2:	4641      	mov	r1, r8
 80039c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039c8:	4641      	mov	r1, r8
 80039ca:	008a      	lsls	r2, r1, #2
 80039cc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039d0:	f7fd f95a 	bl	8000c88 <__aeabi_uldivmod>
 80039d4:	4602      	mov	r2, r0
 80039d6:	460b      	mov	r3, r1
 80039d8:	4b0d      	ldr	r3, [pc, #52]	; (8003a10 <UART_SetConfig+0x4e4>)
 80039da:	fba3 1302 	umull	r1, r3, r3, r2
 80039de:	095b      	lsrs	r3, r3, #5
 80039e0:	2164      	movs	r1, #100	; 0x64
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	3332      	adds	r3, #50	; 0x32
 80039ec:	4a08      	ldr	r2, [pc, #32]	; (8003a10 <UART_SetConfig+0x4e4>)
 80039ee:	fba2 2303 	umull	r2, r3, r2, r3
 80039f2:	095b      	lsrs	r3, r3, #5
 80039f4:	f003 020f 	and.w	r2, r3, #15
 80039f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4422      	add	r2, r4
 8003a00:	609a      	str	r2, [r3, #8]
}
 8003a02:	bf00      	nop
 8003a04:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a0e:	bf00      	nop
 8003a10:	51eb851f 	.word	0x51eb851f

08003a14 <__NVIC_SetPriority>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	6039      	str	r1, [r7, #0]
 8003a1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	db0a      	blt.n	8003a3e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	b2da      	uxtb	r2, r3
 8003a2c:	490c      	ldr	r1, [pc, #48]	; (8003a60 <__NVIC_SetPriority+0x4c>)
 8003a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a32:	0112      	lsls	r2, r2, #4
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	440b      	add	r3, r1
 8003a38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003a3c:	e00a      	b.n	8003a54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4908      	ldr	r1, [pc, #32]	; (8003a64 <__NVIC_SetPriority+0x50>)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	3b04      	subs	r3, #4
 8003a4c:	0112      	lsls	r2, r2, #4
 8003a4e:	b2d2      	uxtb	r2, r2
 8003a50:	440b      	add	r3, r1
 8003a52:	761a      	strb	r2, [r3, #24]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	e000e100 	.word	0xe000e100
 8003a64:	e000ed00 	.word	0xe000ed00

08003a68 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003a6c:	4b05      	ldr	r3, [pc, #20]	; (8003a84 <SysTick_Handler+0x1c>)
 8003a6e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003a70:	f002 faa0 	bl	8005fb4 <xTaskGetSchedulerState>
 8003a74:	4603      	mov	r3, r0
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d001      	beq.n	8003a7e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003a7a:	f003 f985 	bl	8006d88 <xPortSysTickHandler>
  }
}
 8003a7e:	bf00      	nop
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	e000e010 	.word	0xe000e010

08003a88 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	f06f 0004 	mvn.w	r0, #4
 8003a92:	f7ff ffbf 	bl	8003a14 <__NVIC_SetPriority>
#endif
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aa2:	f3ef 8305 	mrs	r3, IPSR
 8003aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8003aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d003      	beq.n	8003ab6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003aae:	f06f 0305 	mvn.w	r3, #5
 8003ab2:	607b      	str	r3, [r7, #4]
 8003ab4:	e00c      	b.n	8003ad0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <osKernelInitialize+0x44>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d105      	bne.n	8003aca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003abe:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <osKernelInitialize+0x44>)
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	607b      	str	r3, [r7, #4]
 8003ac8:	e002      	b.n	8003ad0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003aca:	f04f 33ff 	mov.w	r3, #4294967295
 8003ace:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ad0:	687b      	ldr	r3, [r7, #4]
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	370c      	adds	r7, #12
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	200002c8 	.word	0x200002c8

08003ae4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003aea:	f3ef 8305 	mrs	r3, IPSR
 8003aee:	603b      	str	r3, [r7, #0]
  return(result);
 8003af0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <osKernelStart+0x1a>
    stat = osErrorISR;
 8003af6:	f06f 0305 	mvn.w	r3, #5
 8003afa:	607b      	str	r3, [r7, #4]
 8003afc:	e010      	b.n	8003b20 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003afe:	4b0b      	ldr	r3, [pc, #44]	; (8003b2c <osKernelStart+0x48>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d109      	bne.n	8003b1a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003b06:	f7ff ffbf 	bl	8003a88 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003b0a:	4b08      	ldr	r3, [pc, #32]	; (8003b2c <osKernelStart+0x48>)
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003b10:	f001 fdf4 	bl	80056fc <vTaskStartScheduler>
      stat = osOK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	e002      	b.n	8003b20 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8003b1e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003b20:	687b      	ldr	r3, [r7, #4]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	200002c8 	.word	0x200002c8

08003b30 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 8003b36:	4b06      	ldr	r3, [pc, #24]	; (8003b50 <OS_Tick_GetCount+0x20>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 8003b3c:	4b04      	ldr	r3, [pc, #16]	; (8003b50 <OS_Tick_GetCount+0x20>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr
 8003b50:	e000e010 	.word	0xe000e010

08003b54 <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 8003b58:	4b04      	ldr	r3, [pc, #16]	; (8003b6c <OS_Tick_GetOverflow+0x18>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	0c1b      	lsrs	r3, r3, #16
 8003b5e:	f003 0301 	and.w	r3, r3, #1
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6a:	4770      	bx	lr
 8003b6c:	e000e010 	.word	0xe000e010

08003b70 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 8003b74:	4b03      	ldr	r3, [pc, #12]	; (8003b84 <OS_Tick_GetInterval+0x14>)
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	3301      	adds	r3, #1
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	e000e010 	.word	0xe000e010

08003b88 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b086      	sub	sp, #24
 8003b8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003b92:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b94:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d105      	bne.n	8003ba6 <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003b9a:	f3ef 8311 	mrs	r3, BASEPRI
 8003b9e:	607b      	str	r3, [r7, #4]
  return(result);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d001      	beq.n	8003baa <osKernelGetSysTimerCount+0x22>
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e000      	b.n	8003bac <osKernelGetSysTimerCount+0x24>
 8003baa:	2300      	movs	r3, #0
 8003bac:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bae:	b672      	cpsid	i
}
 8003bb0:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 8003bb2:	f001 febf 	bl	8005934 <xTaskGetTickCount>
 8003bb6:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 8003bb8:	f7ff ffba 	bl	8003b30 <OS_Tick_GetCount>
 8003bbc:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 8003bbe:	f7ff ffc9 	bl	8003b54 <OS_Tick_GetOverflow>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d005      	beq.n	8003bd4 <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 8003bc8:	f7ff ffb2 	bl	8003b30 <OS_Tick_GetCount>
 8003bcc:	6138      	str	r0, [r7, #16]
    ticks++;
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 8003bd4:	f7ff ffcc 	bl	8003b70 <OS_Tick_GetInterval>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	fb02 f303 	mul.w	r3, r2, r3
 8003be0:	693a      	ldr	r2, [r7, #16]
 8003be2:	4413      	add	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8003bec:	b662      	cpsie	i
}
 8003bee:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8003bf0:	693b      	ldr	r3, [r7, #16]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b08e      	sub	sp, #56	; 0x38
 8003bfe:	af04      	add	r7, sp, #16
 8003c00:	60f8      	str	r0, [r7, #12]
 8003c02:	60b9      	str	r1, [r7, #8]
 8003c04:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0a:	f3ef 8305 	mrs	r3, IPSR
 8003c0e:	617b      	str	r3, [r7, #20]
  return(result);
 8003c10:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d17e      	bne.n	8003d14 <osThreadNew+0x11a>
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d07b      	beq.n	8003d14 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003c1c:	2380      	movs	r3, #128	; 0x80
 8003c1e:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003c20:	2318      	movs	r3, #24
 8003c22:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d045      	beq.n	8003cc0 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d002      	beq.n	8003c42 <osThreadNew+0x48>
        name = attr->name;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <osThreadNew+0x6e>
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b38      	cmp	r3, #56	; 0x38
 8003c5a:	d805      	bhi.n	8003c68 <osThreadNew+0x6e>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d001      	beq.n	8003c6c <osThreadNew+0x72>
        return (NULL);
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e054      	b.n	8003d16 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d003      	beq.n	8003c7c <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
 8003c78:	089b      	lsrs	r3, r3, #2
 8003c7a:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <osThreadNew+0xa8>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	2bbb      	cmp	r3, #187	; 0xbb
 8003c8a:	d90a      	bls.n	8003ca2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d006      	beq.n	8003ca2 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <osThreadNew+0xa8>
        mem = 1;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	61bb      	str	r3, [r7, #24]
 8003ca0:	e010      	b.n	8003cc4 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d10c      	bne.n	8003cc4 <osThreadNew+0xca>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d108      	bne.n	8003cc4 <osThreadNew+0xca>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d104      	bne.n	8003cc4 <osThreadNew+0xca>
          mem = 0;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	e001      	b.n	8003cc4 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d110      	bne.n	8003cec <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003cce:	687a      	ldr	r2, [r7, #4]
 8003cd0:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003cd2:	9202      	str	r2, [sp, #8]
 8003cd4:	9301      	str	r3, [sp, #4]
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	9300      	str	r3, [sp, #0]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	6a3a      	ldr	r2, [r7, #32]
 8003cde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ce0:	68f8      	ldr	r0, [r7, #12]
 8003ce2:	f001 fb1f 	bl	8005324 <xTaskCreateStatic>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	613b      	str	r3, [r7, #16]
 8003cea:	e013      	b.n	8003d14 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d110      	bne.n	8003d14 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	f107 0310 	add.w	r3, r7, #16
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f001 fb6a 	bl	80053de <xTaskCreate>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d001      	beq.n	8003d14 <osThreadNew+0x11a>
            hTask = NULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003d14:	693b      	ldr	r3, [r7, #16]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3728      	adds	r7, #40	; 0x28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d26:	f3ef 8305 	mrs	r3, IPSR
 8003d2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d2c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d003      	beq.n	8003d3a <osDelay+0x1c>
    stat = osErrorISR;
 8003d32:	f06f 0305 	mvn.w	r3, #5
 8003d36:	60fb      	str	r3, [r7, #12]
 8003d38:	e007      	b.n	8003d4a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <osDelay+0x2c>
      vTaskDelay(ticks);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f001 fca5 	bl	8005694 <vTaskDelay>
    }
  }

  return (stat);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	3710      	adds	r7, #16
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003d60:	f3ef 8305 	mrs	r3, IPSR
 8003d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8003d66:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d174      	bne.n	8003e56 <osMutexNew+0x102>
    if (attr != NULL) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <osMutexNew+0x26>
      type = attr->attr_bits;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	685b      	ldr	r3, [r3, #4]
 8003d76:	61bb      	str	r3, [r7, #24]
 8003d78:	e001      	b.n	8003d7e <osMutexNew+0x2a>
    } else {
      type = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f003 0301 	and.w	r3, r3, #1
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d002      	beq.n	8003d8e <osMutexNew+0x3a>
      rmtx = 1U;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	e001      	b.n	8003d92 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f003 0308 	and.w	r3, r3, #8
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d15c      	bne.n	8003e56 <osMutexNew+0x102>
      mem = -1;
 8003d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8003da0:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d015      	beq.n	8003dd4 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d006      	beq.n	8003dbe <osMutexNew+0x6a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b4f      	cmp	r3, #79	; 0x4f
 8003db6:	d902      	bls.n	8003dbe <osMutexNew+0x6a>
          mem = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	613b      	str	r3, [r7, #16]
 8003dbc:	e00c      	b.n	8003dd8 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d108      	bne.n	8003dd8 <osMutexNew+0x84>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d104      	bne.n	8003dd8 <osMutexNew+0x84>
            mem = 0;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	613b      	str	r3, [r7, #16]
 8003dd2:	e001      	b.n	8003dd8 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d112      	bne.n	8003e04 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d007      	beq.n	8003df4 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	4619      	mov	r1, r3
 8003dea:	2004      	movs	r0, #4
 8003dec:	f000 fbaf 	bl	800454e <xQueueCreateMutexStatic>
 8003df0:	61f8      	str	r0, [r7, #28]
 8003df2:	e016      	b.n	8003e22 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	4619      	mov	r1, r3
 8003dfa:	2001      	movs	r0, #1
 8003dfc:	f000 fba7 	bl	800454e <xQueueCreateMutexStatic>
 8003e00:	61f8      	str	r0, [r7, #28]
 8003e02:	e00e      	b.n	8003e22 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d10b      	bne.n	8003e22 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d004      	beq.n	8003e1a <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8003e10:	2004      	movs	r0, #4
 8003e12:	f000 fb84 	bl	800451e <xQueueCreateMutex>
 8003e16:	61f8      	str	r0, [r7, #28]
 8003e18:	e003      	b.n	8003e22 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	f000 fb7f 	bl	800451e <xQueueCreateMutex>
 8003e20:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00c      	beq.n	8003e42 <osMutexNew+0xee>
        if (attr != NULL) {
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d003      	beq.n	8003e36 <osMutexNew+0xe2>
          name = attr->name;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60fb      	str	r3, [r7, #12]
 8003e34:	e001      	b.n	8003e3a <osMutexNew+0xe6>
        } else {
          name = NULL;
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	69f8      	ldr	r0, [r7, #28]
 8003e3e:	f001 f9e9 	bl	8005214 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d006      	beq.n	8003e56 <osMutexNew+0x102>
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	f043 0301 	orr.w	r3, r3, #1
 8003e54:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8003e56:	69fb      	ldr	r3, [r7, #28]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3720      	adds	r7, #32
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b08a      	sub	sp, #40	; 0x28
 8003e64:	af02      	add	r7, sp, #8
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e70:	f3ef 8305 	mrs	r3, IPSR
 8003e74:	613b      	str	r3, [r7, #16]
  return(result);
 8003e76:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d175      	bne.n	8003f68 <osSemaphoreNew+0x108>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d072      	beq.n	8003f68 <osSemaphoreNew+0x108>
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d86e      	bhi.n	8003f68 <osSemaphoreNew+0x108>
    mem = -1;
 8003e8a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e8e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d015      	beq.n	8003ec2 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <osSemaphoreNew+0x4c>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	68db      	ldr	r3, [r3, #12]
 8003ea2:	2b4f      	cmp	r3, #79	; 0x4f
 8003ea4:	d902      	bls.n	8003eac <osSemaphoreNew+0x4c>
        mem = 1;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61bb      	str	r3, [r7, #24]
 8003eaa:	e00c      	b.n	8003ec6 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d108      	bne.n	8003ec6 <osSemaphoreNew+0x66>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d104      	bne.n	8003ec6 <osSemaphoreNew+0x66>
          mem = 0;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	61bb      	str	r3, [r7, #24]
 8003ec0:	e001      	b.n	8003ec6 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ecc:	d04c      	beq.n	8003f68 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d128      	bne.n	8003f26 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003ed4:	69bb      	ldr	r3, [r7, #24]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10a      	bne.n	8003ef0 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2203      	movs	r2, #3
 8003ee0:	9200      	str	r2, [sp, #0]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	2001      	movs	r0, #1
 8003ee8:	f000 fa2a 	bl	8004340 <xQueueGenericCreateStatic>
 8003eec:	61f8      	str	r0, [r7, #28]
 8003eee:	e005      	b.n	8003efc <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003ef0:	2203      	movs	r2, #3
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	f000 fa9b 	bl	8004430 <xQueueGenericCreate>
 8003efa:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003efc:	69fb      	ldr	r3, [r7, #28]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d022      	beq.n	8003f48 <osSemaphoreNew+0xe8>
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d01f      	beq.n	8003f48 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003f08:	2300      	movs	r3, #0
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	2100      	movs	r1, #0
 8003f0e:	69f8      	ldr	r0, [r7, #28]
 8003f10:	f000 fba2 	bl	8004658 <xQueueGenericSend>
 8003f14:	4603      	mov	r3, r0
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d016      	beq.n	8003f48 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003f1a:	69f8      	ldr	r0, [r7, #28]
 8003f1c:	f001 f82e 	bl	8004f7c <vQueueDelete>
            hSemaphore = NULL;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61fb      	str	r3, [r7, #28]
 8003f24:	e010      	b.n	8003f48 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d108      	bne.n	8003f3e <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	461a      	mov	r2, r3
 8003f32:	68b9      	ldr	r1, [r7, #8]
 8003f34:	68f8      	ldr	r0, [r7, #12]
 8003f36:	f000 fb25 	bl	8004584 <xQueueCreateCountingSemaphoreStatic>
 8003f3a:	61f8      	str	r0, [r7, #28]
 8003f3c:	e004      	b.n	8003f48 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003f3e:	68b9      	ldr	r1, [r7, #8]
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fb56 	bl	80045f2 <xQueueCreateCountingSemaphore>
 8003f46:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <osSemaphoreNew+0xfc>
          name = attr->name;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e001      	b.n	8003f60 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003f60:	6979      	ldr	r1, [r7, #20]
 8003f62:	69f8      	ldr	r0, [r7, #28]
 8003f64:	f001 f956 	bl	8005214 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003f68:	69fb      	ldr	r3, [r7, #28]
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3720      	adds	r7, #32
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003f8c:	f06f 0303 	mvn.w	r3, #3
 8003f90:	617b      	str	r3, [r7, #20]
 8003f92:	e039      	b.n	8004008 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f94:	f3ef 8305 	mrs	r3, IPSR
 8003f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d022      	beq.n	8003fe6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d003      	beq.n	8003fae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003fa6:	f06f 0303 	mvn.w	r3, #3
 8003faa:	617b      	str	r3, [r7, #20]
 8003fac:	e02c      	b.n	8004008 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	2100      	movs	r1, #0
 8003fba:	6938      	ldr	r0, [r7, #16]
 8003fbc:	f000 ff5e 	bl	8004e7c <xQueueReceiveFromISR>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d003      	beq.n	8003fce <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003fc6:	f06f 0302 	mvn.w	r3, #2
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	e01c      	b.n	8004008 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d019      	beq.n	8004008 <osSemaphoreAcquire+0x94>
 8003fd4:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <osSemaphoreAcquire+0xa0>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
 8003fe4:	e010      	b.n	8004008 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003fe6:	6839      	ldr	r1, [r7, #0]
 8003fe8:	6938      	ldr	r0, [r7, #16]
 8003fea:	f000 fe3b 	bl	8004c64 <xQueueSemaphoreTake>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d009      	beq.n	8004008 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003ffa:	f06f 0301 	mvn.w	r3, #1
 8003ffe:	617b      	str	r3, [r7, #20]
 8004000:	e002      	b.n	8004008 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004002:	f06f 0302 	mvn.w	r3, #2
 8004006:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004008:	697b      	ldr	r3, [r7, #20]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3718      	adds	r7, #24
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	e000ed04 	.word	0xe000ed04

08004018 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b086      	sub	sp, #24
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d103      	bne.n	8004036 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800402e:	f06f 0303 	mvn.w	r3, #3
 8004032:	617b      	str	r3, [r7, #20]
 8004034:	e02c      	b.n	8004090 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004036:	f3ef 8305 	mrs	r3, IPSR
 800403a:	60fb      	str	r3, [r7, #12]
  return(result);
 800403c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01a      	beq.n	8004078 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004042:	2300      	movs	r3, #0
 8004044:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004046:	f107 0308 	add.w	r3, r7, #8
 800404a:	4619      	mov	r1, r3
 800404c:	6938      	ldr	r0, [r7, #16]
 800404e:	f000 fc9c 	bl	800498a <xQueueGiveFromISR>
 8004052:	4603      	mov	r3, r0
 8004054:	2b01      	cmp	r3, #1
 8004056:	d003      	beq.n	8004060 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004058:	f06f 0302 	mvn.w	r3, #2
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e017      	b.n	8004090 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d014      	beq.n	8004090 <osSemaphoreRelease+0x78>
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <osSemaphoreRelease+0x84>)
 8004068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406c:	601a      	str	r2, [r3, #0]
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	f3bf 8f6f 	isb	sy
 8004076:	e00b      	b.n	8004090 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004078:	2300      	movs	r3, #0
 800407a:	2200      	movs	r2, #0
 800407c:	2100      	movs	r1, #0
 800407e:	6938      	ldr	r0, [r7, #16]
 8004080:	f000 faea 	bl	8004658 <xQueueGenericSend>
 8004084:	4603      	mov	r3, r0
 8004086:	2b01      	cmp	r3, #1
 8004088:	d002      	beq.n	8004090 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800408a:	f06f 0302 	mvn.w	r3, #2
 800408e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004090:	697b      	ldr	r3, [r7, #20]
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4a07      	ldr	r2, [pc, #28]	; (80040cc <vApplicationGetIdleTaskMemory+0x2c>)
 80040b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	4a06      	ldr	r2, [pc, #24]	; (80040d0 <vApplicationGetIdleTaskMemory+0x30>)
 80040b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2280      	movs	r2, #128	; 0x80
 80040bc:	601a      	str	r2, [r3, #0]
}
 80040be:	bf00      	nop
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	200002cc 	.word	0x200002cc
 80040d0:	20000388 	.word	0x20000388

080040d4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	60b9      	str	r1, [r7, #8]
 80040de:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	4a07      	ldr	r2, [pc, #28]	; (8004100 <vApplicationGetTimerTaskMemory+0x2c>)
 80040e4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <vApplicationGetTimerTaskMemory+0x30>)
 80040ea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040f2:	601a      	str	r2, [r3, #0]
}
 80040f4:	bf00      	nop
 80040f6:	3714      	adds	r7, #20
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr
 8004100:	20000588 	.word	0x20000588
 8004104:	20000644 	.word	0x20000644

08004108 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004108:	b480      	push	{r7}
 800410a:	b083      	sub	sp, #12
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f103 0208 	add.w	r2, r3, #8
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f04f 32ff 	mov.w	r2, #4294967295
 8004120:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f103 0208 	add.w	r2, r3, #8
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f103 0208 	add.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004162:	b480      	push	{r7}
 8004164:	b085      	sub	sp, #20
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	683a      	ldr	r2, [r7, #0]
 8004186:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	683a      	ldr	r2, [r7, #0]
 800418c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	601a      	str	r2, [r3, #0]
}
 800419e:	bf00      	nop
 80041a0:	3714      	adds	r7, #20
 80041a2:	46bd      	mov	sp, r7
 80041a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a8:	4770      	bx	lr

080041aa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041aa:	b480      	push	{r7}
 80041ac:	b085      	sub	sp, #20
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
 80041b2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c0:	d103      	bne.n	80041ca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	691b      	ldr	r3, [r3, #16]
 80041c6:	60fb      	str	r3, [r7, #12]
 80041c8:	e00c      	b.n	80041e4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	3308      	adds	r3, #8
 80041ce:	60fb      	str	r3, [r7, #12]
 80041d0:	e002      	b.n	80041d8 <vListInsert+0x2e>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	60fb      	str	r3, [r7, #12]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	68ba      	ldr	r2, [r7, #8]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d2f6      	bcs.n	80041d2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	683a      	ldr	r2, [r7, #0]
 80041fe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	1c5a      	adds	r2, r3, #1
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	601a      	str	r2, [r3, #0]
}
 8004210:	bf00      	nop
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	6892      	ldr	r2, [r2, #8]
 8004232:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	6852      	ldr	r2, [r2, #4]
 800423c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	429a      	cmp	r2, r3
 8004246:	d103      	bne.n	8004250 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689a      	ldr	r2, [r3, #8]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2200      	movs	r2, #0
 8004254:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10a      	bne.n	800429a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004288:	f383 8811 	msr	BASEPRI, r3
 800428c:	f3bf 8f6f 	isb	sy
 8004290:	f3bf 8f4f 	dsb	sy
 8004294:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004296:	bf00      	nop
 8004298:	e7fe      	b.n	8004298 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800429a:	f002 fce3 	bl	8006c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	68f9      	ldr	r1, [r7, #12]
 80042a8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042aa:	fb01 f303 	mul.w	r3, r1, r3
 80042ae:	441a      	add	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681a      	ldr	r2, [r3, #0]
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ca:	3b01      	subs	r3, #1
 80042cc:	68f9      	ldr	r1, [r7, #12]
 80042ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042d0:	fb01 f303 	mul.w	r3, r1, r3
 80042d4:	441a      	add	r2, r3
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	22ff      	movs	r2, #255	; 0xff
 80042de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	22ff      	movs	r2, #255	; 0xff
 80042e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d114      	bne.n	800431a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	691b      	ldr	r3, [r3, #16]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d01a      	beq.n	800432e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3310      	adds	r3, #16
 80042fc:	4618      	mov	r0, r3
 80042fe:	f001 fc97 	bl	8005c30 <xTaskRemoveFromEventList>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d012      	beq.n	800432e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <xQueueGenericReset+0xcc>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	e009      	b.n	800432e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	3310      	adds	r3, #16
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff fef2 	bl	8004108 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	3324      	adds	r3, #36	; 0x24
 8004328:	4618      	mov	r0, r3
 800432a:	f7ff feed 	bl	8004108 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800432e:	f002 fcc9 	bl	8006cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004332:	2301      	movs	r3, #1
}
 8004334:	4618      	mov	r0, r3
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08e      	sub	sp, #56	; 0x38
 8004344:	af02      	add	r7, sp, #8
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	607a      	str	r2, [r7, #4]
 800434c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10a      	bne.n	800436a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004358:	f383 8811 	msr	BASEPRI, r3
 800435c:	f3bf 8f6f 	isb	sy
 8004360:	f3bf 8f4f 	dsb	sy
 8004364:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004366:	bf00      	nop
 8004368:	e7fe      	b.n	8004368 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d002      	beq.n	8004392 <xQueueGenericCreateStatic+0x52>
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d001      	beq.n	8004396 <xQueueGenericCreateStatic+0x56>
 8004392:	2301      	movs	r3, #1
 8004394:	e000      	b.n	8004398 <xQueueGenericCreateStatic+0x58>
 8004396:	2300      	movs	r3, #0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10a      	bne.n	80043b2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	623b      	str	r3, [r7, #32]
}
 80043ae:	bf00      	nop
 80043b0:	e7fe      	b.n	80043b0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <xQueueGenericCreateStatic+0x7e>
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <xQueueGenericCreateStatic+0x82>
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <xQueueGenericCreateStatic+0x84>
 80043c2:	2300      	movs	r3, #0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10a      	bne.n	80043de <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80043c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043cc:	f383 8811 	msr	BASEPRI, r3
 80043d0:	f3bf 8f6f 	isb	sy
 80043d4:	f3bf 8f4f 	dsb	sy
 80043d8:	61fb      	str	r3, [r7, #28]
}
 80043da:	bf00      	nop
 80043dc:	e7fe      	b.n	80043dc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043de:	2350      	movs	r3, #80	; 0x50
 80043e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b50      	cmp	r3, #80	; 0x50
 80043e6:	d00a      	beq.n	80043fe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61bb      	str	r3, [r7, #24]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004406:	2b00      	cmp	r3, #0
 8004408:	d00d      	beq.n	8004426 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004412:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	4613      	mov	r3, r2
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	68b9      	ldr	r1, [r7, #8]
 8004420:	68f8      	ldr	r0, [r7, #12]
 8004422:	f000 f83f 	bl	80044a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004428:	4618      	mov	r0, r3
 800442a:	3730      	adds	r7, #48	; 0x30
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}

08004430 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004430:	b580      	push	{r7, lr}
 8004432:	b08a      	sub	sp, #40	; 0x28
 8004434:	af02      	add	r7, sp, #8
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	4613      	mov	r3, r2
 800443c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10a      	bne.n	800445a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004448:	f383 8811 	msr	BASEPRI, r3
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	f3bf 8f4f 	dsb	sy
 8004454:	613b      	str	r3, [r7, #16]
}
 8004456:	bf00      	nop
 8004458:	e7fe      	b.n	8004458 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	68ba      	ldr	r2, [r7, #8]
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004464:	69fb      	ldr	r3, [r7, #28]
 8004466:	3350      	adds	r3, #80	; 0x50
 8004468:	4618      	mov	r0, r3
 800446a:	f002 fd1d 	bl	8006ea8 <pvPortMalloc>
 800446e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d011      	beq.n	800449a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	3350      	adds	r3, #80	; 0x50
 800447e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004488:	79fa      	ldrb	r2, [r7, #7]
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	9300      	str	r3, [sp, #0]
 800448e:	4613      	mov	r3, r2
 8004490:	697a      	ldr	r2, [r7, #20]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f805 	bl	80044a4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800449a:	69bb      	ldr	r3, [r7, #24]
	}
 800449c:	4618      	mov	r0, r3
 800449e:	3720      	adds	r7, #32
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
 80044b0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d103      	bne.n	80044c0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e002      	b.n	80044c6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044d2:	2101      	movs	r1, #1
 80044d4:	69b8      	ldr	r0, [r7, #24]
 80044d6:	f7ff fecb 	bl	8004270 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	78fa      	ldrb	r2, [r7, #3]
 80044de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b082      	sub	sp, #8
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00e      	beq.n	8004516 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800450a:	2300      	movs	r3, #0
 800450c:	2200      	movs	r2, #0
 800450e:	2100      	movs	r1, #0
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f8a1 	bl	8004658 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800451e:	b580      	push	{r7, lr}
 8004520:	b086      	sub	sp, #24
 8004522:	af00      	add	r7, sp, #0
 8004524:	4603      	mov	r3, r0
 8004526:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004528:	2301      	movs	r3, #1
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	2300      	movs	r3, #0
 800452e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004530:	79fb      	ldrb	r3, [r7, #7]
 8004532:	461a      	mov	r2, r3
 8004534:	6939      	ldr	r1, [r7, #16]
 8004536:	6978      	ldr	r0, [r7, #20]
 8004538:	f7ff ff7a 	bl	8004430 <xQueueGenericCreate>
 800453c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f7ff ffd3 	bl	80044ea <prvInitialiseMutex>

		return xNewQueue;
 8004544:	68fb      	ldr	r3, [r7, #12]
	}
 8004546:	4618      	mov	r0, r3
 8004548:	3718      	adds	r7, #24
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}

0800454e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800454e:	b580      	push	{r7, lr}
 8004550:	b088      	sub	sp, #32
 8004552:	af02      	add	r7, sp, #8
 8004554:	4603      	mov	r3, r0
 8004556:	6039      	str	r1, [r7, #0]
 8004558:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800455a:	2301      	movs	r3, #1
 800455c:	617b      	str	r3, [r7, #20]
 800455e:	2300      	movs	r3, #0
 8004560:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	9300      	str	r3, [sp, #0]
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	2200      	movs	r2, #0
 800456a:	6939      	ldr	r1, [r7, #16]
 800456c:	6978      	ldr	r0, [r7, #20]
 800456e:	f7ff fee7 	bl	8004340 <xQueueGenericCreateStatic>
 8004572:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	f7ff ffb8 	bl	80044ea <prvInitialiseMutex>

		return xNewQueue;
 800457a:	68fb      	ldr	r3, [r7, #12]
	}
 800457c:	4618      	mov	r0, r3
 800457e:	3718      	adds	r7, #24
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004584:	b580      	push	{r7, lr}
 8004586:	b08a      	sub	sp, #40	; 0x28
 8004588:	af02      	add	r7, sp, #8
 800458a:	60f8      	str	r0, [r7, #12]
 800458c:	60b9      	str	r1, [r7, #8]
 800458e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	61bb      	str	r3, [r7, #24]
}
 80045a8:	bf00      	nop
 80045aa:	e7fe      	b.n	80045aa <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80045ac:	68ba      	ldr	r2, [r7, #8]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d90a      	bls.n	80045ca <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80045b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045b8:	f383 8811 	msr	BASEPRI, r3
 80045bc:	f3bf 8f6f 	isb	sy
 80045c0:	f3bf 8f4f 	dsb	sy
 80045c4:	617b      	str	r3, [r7, #20]
}
 80045c6:	bf00      	nop
 80045c8:	e7fe      	b.n	80045c8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80045ca:	2302      	movs	r3, #2
 80045cc:	9300      	str	r3, [sp, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	2100      	movs	r1, #0
 80045d4:	68f8      	ldr	r0, [r7, #12]
 80045d6:	f7ff feb3 	bl	8004340 <xQueueGenericCreateStatic>
 80045da:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d002      	beq.n	80045e8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	68ba      	ldr	r2, [r7, #8]
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80045e8:	69fb      	ldr	r3, [r7, #28]
	}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3720      	adds	r7, #32
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	b086      	sub	sp, #24
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
 80045fa:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10a      	bne.n	8004618 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	613b      	str	r3, [r7, #16]
}
 8004614:	bf00      	nop
 8004616:	e7fe      	b.n	8004616 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004618:	683a      	ldr	r2, [r7, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	429a      	cmp	r2, r3
 800461e:	d90a      	bls.n	8004636 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	e7fe      	b.n	8004634 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004636:	2202      	movs	r2, #2
 8004638:	2100      	movs	r1, #0
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff fef8 	bl	8004430 <xQueueGenericCreate>
 8004640:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800464e:	697b      	ldr	r3, [r7, #20]
	}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08e      	sub	sp, #56	; 0x38
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
 8004664:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004666:	2300      	movs	r3, #0
 8004668:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800466e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <xQueueGenericSend+0x32>
	__asm volatile
 8004674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004678:	f383 8811 	msr	BASEPRI, r3
 800467c:	f3bf 8f6f 	isb	sy
 8004680:	f3bf 8f4f 	dsb	sy
 8004684:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004686:	bf00      	nop
 8004688:	e7fe      	b.n	8004688 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <xQueueGenericSend+0x40>
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004694:	2b00      	cmp	r3, #0
 8004696:	d101      	bne.n	800469c <xQueueGenericSend+0x44>
 8004698:	2301      	movs	r3, #1
 800469a:	e000      	b.n	800469e <xQueueGenericSend+0x46>
 800469c:	2300      	movs	r3, #0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <xQueueGenericSend+0x60>
	__asm volatile
 80046a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a6:	f383 8811 	msr	BASEPRI, r3
 80046aa:	f3bf 8f6f 	isb	sy
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80046b4:	bf00      	nop
 80046b6:	e7fe      	b.n	80046b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d103      	bne.n	80046c6 <xQueueGenericSend+0x6e>
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d101      	bne.n	80046ca <xQueueGenericSend+0x72>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <xQueueGenericSend+0x74>
 80046ca:	2300      	movs	r3, #0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d10a      	bne.n	80046e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	623b      	str	r3, [r7, #32]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80046e6:	f001 fc65 	bl	8005fb4 <xTaskGetSchedulerState>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <xQueueGenericSend+0x9e>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <xQueueGenericSend+0xa2>
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <xQueueGenericSend+0xa4>
 80046fa:	2300      	movs	r3, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <xQueueGenericSend+0xbe>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	61fb      	str	r3, [r7, #28]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004716:	f002 faa5 	bl	8006c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800471a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800471c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004722:	429a      	cmp	r2, r3
 8004724:	d302      	bcc.n	800472c <xQueueGenericSend+0xd4>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b02      	cmp	r3, #2
 800472a:	d129      	bne.n	8004780 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	68b9      	ldr	r1, [r7, #8]
 8004730:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004732:	f000 fc5e 	bl	8004ff2 <prvCopyDataToQueue>
 8004736:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	2b00      	cmp	r3, #0
 800473e:	d010      	beq.n	8004762 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004742:	3324      	adds	r3, #36	; 0x24
 8004744:	4618      	mov	r0, r3
 8004746:	f001 fa73 	bl	8005c30 <xTaskRemoveFromEventList>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d013      	beq.n	8004778 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004750:	4b3f      	ldr	r3, [pc, #252]	; (8004850 <xQueueGenericSend+0x1f8>)
 8004752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	e00a      	b.n	8004778 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d007      	beq.n	8004778 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004768:	4b39      	ldr	r3, [pc, #228]	; (8004850 <xQueueGenericSend+0x1f8>)
 800476a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	f3bf 8f4f 	dsb	sy
 8004774:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004778:	f002 faa4 	bl	8006cc4 <vPortExitCritical>
				return pdPASS;
 800477c:	2301      	movs	r3, #1
 800477e:	e063      	b.n	8004848 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d103      	bne.n	800478e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004786:	f002 fa9d 	bl	8006cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800478a:	2300      	movs	r3, #0
 800478c:	e05c      	b.n	8004848 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800478e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004790:	2b00      	cmp	r3, #0
 8004792:	d106      	bne.n	80047a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004794:	f107 0314 	add.w	r3, r7, #20
 8004798:	4618      	mov	r0, r3
 800479a:	f001 faad 	bl	8005cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800479e:	2301      	movs	r3, #1
 80047a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047a2:	f002 fa8f 	bl	8006cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047a6:	f001 f819 	bl	80057dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80047aa:	f002 fa5b 	bl	8006c64 <vPortEnterCritical>
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047b4:	b25b      	sxtb	r3, r3
 80047b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047ba:	d103      	bne.n	80047c4 <xQueueGenericSend+0x16c>
 80047bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047be:	2200      	movs	r2, #0
 80047c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047ca:	b25b      	sxtb	r3, r3
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d103      	bne.n	80047da <xQueueGenericSend+0x182>
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047da:	f002 fa73 	bl	8006cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80047de:	1d3a      	adds	r2, r7, #4
 80047e0:	f107 0314 	add.w	r3, r7, #20
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f001 fa9c 	bl	8005d24 <xTaskCheckForTimeOut>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d124      	bne.n	800483c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80047f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047f4:	f000 fcf5 	bl	80051e2 <prvIsQueueFull>
 80047f8:	4603      	mov	r3, r0
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d018      	beq.n	8004830 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80047fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004800:	3310      	adds	r3, #16
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	4611      	mov	r1, r2
 8004806:	4618      	mov	r0, r3
 8004808:	f001 f9c2 	bl	8005b90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800480c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800480e:	f000 fc80 	bl	8005112 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004812:	f000 fff1 	bl	80057f8 <xTaskResumeAll>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	f47f af7c 	bne.w	8004716 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <xQueueGenericSend+0x1f8>)
 8004820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004824:	601a      	str	r2, [r3, #0]
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	f3bf 8f6f 	isb	sy
 800482e:	e772      	b.n	8004716 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004832:	f000 fc6e 	bl	8005112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004836:	f000 ffdf 	bl	80057f8 <xTaskResumeAll>
 800483a:	e76c      	b.n	8004716 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800483c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800483e:	f000 fc68 	bl	8005112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004842:	f000 ffd9 	bl	80057f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004846:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004848:	4618      	mov	r0, r3
 800484a:	3738      	adds	r7, #56	; 0x38
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	e000ed04 	.word	0xe000ed04

08004854 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b090      	sub	sp, #64	; 0x40
 8004858:	af00      	add	r7, sp, #0
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	60b9      	str	r1, [r7, #8]
 800485e:	607a      	str	r2, [r7, #4]
 8004860:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d103      	bne.n	8004890 <xQueueGenericSendFromISR+0x3c>
 8004888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800488a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <xQueueGenericSendFromISR+0x40>
 8004890:	2301      	movs	r3, #1
 8004892:	e000      	b.n	8004896 <xQueueGenericSendFromISR+0x42>
 8004894:	2300      	movs	r3, #0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10a      	bne.n	80048b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800489a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489e:	f383 8811 	msr	BASEPRI, r3
 80048a2:	f3bf 8f6f 	isb	sy
 80048a6:	f3bf 8f4f 	dsb	sy
 80048aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048ac:	bf00      	nop
 80048ae:	e7fe      	b.n	80048ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d103      	bne.n	80048be <xQueueGenericSendFromISR+0x6a>
 80048b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d101      	bne.n	80048c2 <xQueueGenericSendFromISR+0x6e>
 80048be:	2301      	movs	r3, #1
 80048c0:	e000      	b.n	80048c4 <xQueueGenericSendFromISR+0x70>
 80048c2:	2300      	movs	r3, #0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	623b      	str	r3, [r7, #32]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80048de:	f002 faa3 	bl	8006e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80048e2:	f3ef 8211 	mrs	r2, BASEPRI
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	61fa      	str	r2, [r7, #28]
 80048f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80048fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80048fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004906:	429a      	cmp	r2, r3
 8004908:	d302      	bcc.n	8004910 <xQueueGenericSendFromISR+0xbc>
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d12f      	bne.n	8004970 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800491a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800491e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004920:	683a      	ldr	r2, [r7, #0]
 8004922:	68b9      	ldr	r1, [r7, #8]
 8004924:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004926:	f000 fb64 	bl	8004ff2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800492a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d112      	bne.n	800495a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	2b00      	cmp	r3, #0
 800493a:	d016      	beq.n	800496a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800493c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800493e:	3324      	adds	r3, #36	; 0x24
 8004940:	4618      	mov	r0, r3
 8004942:	f001 f975 	bl	8005c30 <xTaskRemoveFromEventList>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d00e      	beq.n	800496a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00b      	beq.n	800496a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2201      	movs	r2, #1
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	e007      	b.n	800496a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800495a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800495e:	3301      	adds	r3, #1
 8004960:	b2db      	uxtb	r3, r3
 8004962:	b25a      	sxtb	r2, r3
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800496a:	2301      	movs	r3, #1
 800496c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800496e:	e001      	b.n	8004974 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004970:	2300      	movs	r3, #0
 8004972:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004976:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004978:	697b      	ldr	r3, [r7, #20]
 800497a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800497e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004982:	4618      	mov	r0, r3
 8004984:	3740      	adds	r7, #64	; 0x40
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b08e      	sub	sp, #56	; 0x38
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800499a:	2b00      	cmp	r3, #0
 800499c:	d10a      	bne.n	80049b4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800499e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	623b      	str	r3, [r7, #32]
}
 80049b0:	bf00      	nop
 80049b2:	e7fe      	b.n	80049b2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80049b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <xQueueGiveFromISR+0x48>
	__asm volatile
 80049bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c0:	f383 8811 	msr	BASEPRI, r3
 80049c4:	f3bf 8f6f 	isb	sy
 80049c8:	f3bf 8f4f 	dsb	sy
 80049cc:	61fb      	str	r3, [r7, #28]
}
 80049ce:	bf00      	nop
 80049d0:	e7fe      	b.n	80049d0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80049d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d103      	bne.n	80049e2 <xQueueGiveFromISR+0x58>
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d101      	bne.n	80049e6 <xQueueGiveFromISR+0x5c>
 80049e2:	2301      	movs	r3, #1
 80049e4:	e000      	b.n	80049e8 <xQueueGiveFromISR+0x5e>
 80049e6:	2300      	movs	r3, #0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10a      	bne.n	8004a02 <xQueueGiveFromISR+0x78>
	__asm volatile
 80049ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f0:	f383 8811 	msr	BASEPRI, r3
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	f3bf 8f4f 	dsb	sy
 80049fc:	61bb      	str	r3, [r7, #24]
}
 80049fe:	bf00      	nop
 8004a00:	e7fe      	b.n	8004a00 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a02:	f002 fa11 	bl	8006e28 <vPortValidateInterruptPriority>
	__asm volatile
 8004a06:	f3ef 8211 	mrs	r2, BASEPRI
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	617a      	str	r2, [r7, #20]
 8004a1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004a1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d22b      	bcs.n	8004a8a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a3e:	1c5a      	adds	r2, r3, #1
 8004a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4c:	d112      	bne.n	8004a74 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d016      	beq.n	8004a84 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	3324      	adds	r3, #36	; 0x24
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f001 f8e8 	bl	8005c30 <xTaskRemoveFromEventList>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00e      	beq.n	8004a84 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d00b      	beq.n	8004a84 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	e007      	b.n	8004a84 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004a74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004a78:	3301      	adds	r3, #1
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	b25a      	sxtb	r2, r3
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004a84:	2301      	movs	r3, #1
 8004a86:	637b      	str	r3, [r7, #52]	; 0x34
 8004a88:	e001      	b.n	8004a8e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f383 8811 	msr	BASEPRI, r3
}
 8004a98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3738      	adds	r7, #56	; 0x38
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08c      	sub	sp, #48	; 0x30
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d10a      	bne.n	8004ad4 <xQueueReceive+0x30>
	__asm volatile
 8004abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac2:	f383 8811 	msr	BASEPRI, r3
 8004ac6:	f3bf 8f6f 	isb	sy
 8004aca:	f3bf 8f4f 	dsb	sy
 8004ace:	623b      	str	r3, [r7, #32]
}
 8004ad0:	bf00      	nop
 8004ad2:	e7fe      	b.n	8004ad2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d103      	bne.n	8004ae2 <xQueueReceive+0x3e>
 8004ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <xQueueReceive+0x42>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e000      	b.n	8004ae8 <xQueueReceive+0x44>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d10a      	bne.n	8004b02 <xQueueReceive+0x5e>
	__asm volatile
 8004aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af0:	f383 8811 	msr	BASEPRI, r3
 8004af4:	f3bf 8f6f 	isb	sy
 8004af8:	f3bf 8f4f 	dsb	sy
 8004afc:	61fb      	str	r3, [r7, #28]
}
 8004afe:	bf00      	nop
 8004b00:	e7fe      	b.n	8004b00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b02:	f001 fa57 	bl	8005fb4 <xTaskGetSchedulerState>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d102      	bne.n	8004b12 <xQueueReceive+0x6e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <xQueueReceive+0x72>
 8004b12:	2301      	movs	r3, #1
 8004b14:	e000      	b.n	8004b18 <xQueueReceive+0x74>
 8004b16:	2300      	movs	r3, #0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d10a      	bne.n	8004b32 <xQueueReceive+0x8e>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	61bb      	str	r3, [r7, #24]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b32:	f002 f897 	bl	8006c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01f      	beq.n	8004b82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b42:	68b9      	ldr	r1, [r7, #8]
 8004b44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004b46:	f000 fabe 	bl	80050c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4c:	1e5a      	subs	r2, r3, #1
 8004b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b54:	691b      	ldr	r3, [r3, #16]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d00f      	beq.n	8004b7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b5c:	3310      	adds	r3, #16
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f001 f866 	bl	8005c30 <xTaskRemoveFromEventList>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d007      	beq.n	8004b7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b6a:	4b3d      	ldr	r3, [pc, #244]	; (8004c60 <xQueueReceive+0x1bc>)
 8004b6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b7a:	f002 f8a3 	bl	8006cc4 <vPortExitCritical>
				return pdPASS;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e069      	b.n	8004c56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d103      	bne.n	8004b90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b88:	f002 f89c 	bl	8006cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e062      	b.n	8004c56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d106      	bne.n	8004ba4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b96:	f107 0310 	add.w	r3, r7, #16
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f001 f8ac 	bl	8005cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ba4:	f002 f88e 	bl	8006cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004ba8:	f000 fe18 	bl	80057dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bac:	f002 f85a 	bl	8006c64 <vPortEnterCritical>
 8004bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004bb6:	b25b      	sxtb	r3, r3
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d103      	bne.n	8004bc6 <xQueueReceive+0x122>
 8004bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bcc:	b25b      	sxtb	r3, r3
 8004bce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd2:	d103      	bne.n	8004bdc <xQueueReceive+0x138>
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bdc:	f002 f872 	bl	8006cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004be0:	1d3a      	adds	r2, r7, #4
 8004be2:	f107 0310 	add.w	r3, r7, #16
 8004be6:	4611      	mov	r1, r2
 8004be8:	4618      	mov	r0, r3
 8004bea:	f001 f89b 	bl	8005d24 <xTaskCheckForTimeOut>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d123      	bne.n	8004c3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf6:	f000 fade 	bl	80051b6 <prvIsQueueEmpty>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d017      	beq.n	8004c30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c02:	3324      	adds	r3, #36	; 0x24
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	4611      	mov	r1, r2
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 ffc1 	bl	8005b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c10:	f000 fa7f 	bl	8005112 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c14:	f000 fdf0 	bl	80057f8 <xTaskResumeAll>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d189      	bne.n	8004b32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <xQueueReceive+0x1bc>)
 8004c20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c24:	601a      	str	r2, [r3, #0]
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	f3bf 8f6f 	isb	sy
 8004c2e:	e780      	b.n	8004b32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c32:	f000 fa6e 	bl	8005112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c36:	f000 fddf 	bl	80057f8 <xTaskResumeAll>
 8004c3a:	e77a      	b.n	8004b32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c3e:	f000 fa68 	bl	8005112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c42:	f000 fdd9 	bl	80057f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004c48:	f000 fab5 	bl	80051b6 <prvIsQueueEmpty>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f43f af6f 	beq.w	8004b32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3730      	adds	r7, #48	; 0x30
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop
 8004c60:	e000ed04 	.word	0xe000ed04

08004c64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08e      	sub	sp, #56	; 0x38
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004c76:	2300      	movs	r3, #0
 8004c78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d10a      	bne.n	8004c96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c84:	f383 8811 	msr	BASEPRI, r3
 8004c88:	f3bf 8f6f 	isb	sy
 8004c8c:	f3bf 8f4f 	dsb	sy
 8004c90:	623b      	str	r3, [r7, #32]
}
 8004c92:	bf00      	nop
 8004c94:	e7fe      	b.n	8004c94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca2:	f383 8811 	msr	BASEPRI, r3
 8004ca6:	f3bf 8f6f 	isb	sy
 8004caa:	f3bf 8f4f 	dsb	sy
 8004cae:	61fb      	str	r3, [r7, #28]
}
 8004cb0:	bf00      	nop
 8004cb2:	e7fe      	b.n	8004cb2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004cb4:	f001 f97e 	bl	8005fb4 <xTaskGetSchedulerState>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d102      	bne.n	8004cc4 <xQueueSemaphoreTake+0x60>
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <xQueueSemaphoreTake+0x64>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e000      	b.n	8004cca <xQueueSemaphoreTake+0x66>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d10a      	bne.n	8004ce4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	61bb      	str	r3, [r7, #24]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ce4:	f001 ffbe 	bl	8006c64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d024      	beq.n	8004d3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	1e5a      	subs	r2, r3, #1
 8004cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d104      	bne.n	8004d0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004d04:	f001 facc 	bl	80062a0 <pvTaskIncrementMutexHeldCount>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00f      	beq.n	8004d36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d18:	3310      	adds	r3, #16
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 ff88 	bl	8005c30 <xTaskRemoveFromEventList>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d007      	beq.n	8004d36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004d26:	4b54      	ldr	r3, [pc, #336]	; (8004e78 <xQueueSemaphoreTake+0x214>)
 8004d28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004d36:	f001 ffc5 	bl	8006cc4 <vPortExitCritical>
				return pdPASS;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e097      	b.n	8004e6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d111      	bne.n	8004d68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00a      	beq.n	8004d60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4e:	f383 8811 	msr	BASEPRI, r3
 8004d52:	f3bf 8f6f 	isb	sy
 8004d56:	f3bf 8f4f 	dsb	sy
 8004d5a:	617b      	str	r3, [r7, #20]
}
 8004d5c:	bf00      	nop
 8004d5e:	e7fe      	b.n	8004d5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004d60:	f001 ffb0 	bl	8006cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004d64:	2300      	movs	r3, #0
 8004d66:	e082      	b.n	8004e6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d106      	bne.n	8004d7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004d6e:	f107 030c 	add.w	r3, r7, #12
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 ffc0 	bl	8005cf8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004d7c:	f001 ffa2 	bl	8006cc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004d80:	f000 fd2c 	bl	80057dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004d84:	f001 ff6e 	bl	8006c64 <vPortEnterCritical>
 8004d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d8e:	b25b      	sxtb	r3, r3
 8004d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d94:	d103      	bne.n	8004d9e <xQueueSemaphoreTake+0x13a>
 8004d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da4:	b25b      	sxtb	r3, r3
 8004da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004daa:	d103      	bne.n	8004db4 <xQueueSemaphoreTake+0x150>
 8004dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004db4:	f001 ff86 	bl	8006cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004db8:	463a      	mov	r2, r7
 8004dba:	f107 030c 	add.w	r3, r7, #12
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 ffaf 	bl	8005d24 <xTaskCheckForTimeOut>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d132      	bne.n	8004e32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004dcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004dce:	f000 f9f2 	bl	80051b6 <prvIsQueueEmpty>
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d026      	beq.n	8004e26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d109      	bne.n	8004df4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004de0:	f001 ff40 	bl	8006c64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f001 f901 	bl	8005ff0 <xTaskPriorityInherit>
 8004dee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004df0:	f001 ff68 	bl	8006cc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004df4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df6:	3324      	adds	r3, #36	; 0x24
 8004df8:	683a      	ldr	r2, [r7, #0]
 8004dfa:	4611      	mov	r1, r2
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fec7 	bl	8005b90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e04:	f000 f985 	bl	8005112 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e08:	f000 fcf6 	bl	80057f8 <xTaskResumeAll>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	f47f af68 	bne.w	8004ce4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004e14:	4b18      	ldr	r3, [pc, #96]	; (8004e78 <xQueueSemaphoreTake+0x214>)
 8004e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e1a:	601a      	str	r2, [r3, #0]
 8004e1c:	f3bf 8f4f 	dsb	sy
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	e75e      	b.n	8004ce4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004e26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e28:	f000 f973 	bl	8005112 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e2c:	f000 fce4 	bl	80057f8 <xTaskResumeAll>
 8004e30:	e758      	b.n	8004ce4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004e32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e34:	f000 f96d 	bl	8005112 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e38:	f000 fcde 	bl	80057f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e3e:	f000 f9ba 	bl	80051b6 <prvIsQueueEmpty>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f43f af4d 	beq.w	8004ce4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d00d      	beq.n	8004e6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004e50:	f001 ff08 	bl	8006c64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004e54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004e56:	f000 f8b4 	bl	8004fc2 <prvGetDisinheritPriorityAfterTimeout>
 8004e5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e62:	4618      	mov	r0, r3
 8004e64:	f001 f99a 	bl	800619c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004e68:	f001 ff2c 	bl	8006cc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004e6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3738      	adds	r7, #56	; 0x38
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	e000ed04 	.word	0xe000ed04

08004e7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08e      	sub	sp, #56	; 0x38
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	60f8      	str	r0, [r7, #12]
 8004e84:	60b9      	str	r1, [r7, #8]
 8004e86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	623b      	str	r3, [r7, #32]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <xQueueReceiveFromISR+0x3a>
 8004eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <xQueueReceiveFromISR+0x3e>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <xQueueReceiveFromISR+0x40>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	61fb      	str	r3, [r7, #28]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004ed6:	f001 ffa7 	bl	8006e28 <vPortValidateInterruptPriority>
	__asm volatile
 8004eda:	f3ef 8211 	mrs	r2, BASEPRI
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	61ba      	str	r2, [r7, #24]
 8004ef0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004ef2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d02f      	beq.n	8004f62 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f10:	f000 f8d9 	bl	80050c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f16:	1e5a      	subs	r2, r3, #1
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004f1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d112      	bne.n	8004f4c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d016      	beq.n	8004f5c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f30:	3310      	adds	r3, #16
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fe7c 	bl	8005c30 <xTaskRemoveFromEventList>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d00e      	beq.n	8004f5c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d00b      	beq.n	8004f5c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	601a      	str	r2, [r3, #0]
 8004f4a:	e007      	b.n	8004f5c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f50:	3301      	adds	r3, #1
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	b25a      	sxtb	r2, r3
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004f60:	e001      	b.n	8004f66 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
 8004f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f68:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f383 8811 	msr	BASEPRI, r3
}
 8004f70:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004f72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3738      	adds	r7, #56	; 0x38
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10a      	bne.n	8004fa4 <vQueueDelete+0x28>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	60bb      	str	r3, [r7, #8]
}
 8004fa0:	bf00      	nop
 8004fa2:	e7fe      	b.n	8004fa2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004fa4:	68f8      	ldr	r0, [r7, #12]
 8004fa6:	f000 f95f 	bl	8005268 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d102      	bne.n	8004fba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004fb4:	68f8      	ldr	r0, [r7, #12]
 8004fb6:	f002 f843 	bl	8007040 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004fba:	bf00      	nop
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004fc2:	b480      	push	{r7}
 8004fc4:	b085      	sub	sp, #20
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d006      	beq.n	8004fe0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004fdc:	60fb      	str	r3, [r7, #12]
 8004fde:	e001      	b.n	8004fe4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
	}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr

08004ff2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ff2:	b580      	push	{r7, lr}
 8004ff4:	b086      	sub	sp, #24
 8004ff6:	af00      	add	r7, sp, #0
 8004ff8:	60f8      	str	r0, [r7, #12]
 8004ffa:	60b9      	str	r1, [r7, #8]
 8004ffc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500c:	2b00      	cmp	r3, #0
 800500e:	d10d      	bne.n	800502c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d14d      	bne.n	80050b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	4618      	mov	r0, r3
 800501e:	f001 f84f 	bl	80060c0 <xTaskPriorityDisinherit>
 8005022:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	e043      	b.n	80050b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d119      	bne.n	8005066 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6858      	ldr	r0, [r3, #4]
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	461a      	mov	r2, r3
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	f002 fa40 	bl	80074c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800504a:	441a      	add	r2, r3
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	689b      	ldr	r3, [r3, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	d32b      	bcc.n	80050b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	605a      	str	r2, [r3, #4]
 8005064:	e026      	b.n	80050b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68d8      	ldr	r0, [r3, #12]
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	461a      	mov	r2, r3
 8005070:	68b9      	ldr	r1, [r7, #8]
 8005072:	f002 fa26 	bl	80074c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	68da      	ldr	r2, [r3, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	425b      	negs	r3, r3
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	68da      	ldr	r2, [r3, #12]
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d207      	bcs.n	80050a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509a:	425b      	negs	r3, r3
 800509c:	441a      	add	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2b02      	cmp	r3, #2
 80050a6:	d105      	bne.n	80050b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d002      	beq.n	80050b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1c5a      	adds	r2, r3, #1
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050bc:	697b      	ldr	r3, [r7, #20]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3718      	adds	r7, #24
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b082      	sub	sp, #8
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d018      	beq.n	800510a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68da      	ldr	r2, [r3, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e0:	441a      	add	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d303      	bcc.n	80050fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68d9      	ldr	r1, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	461a      	mov	r2, r3
 8005104:	6838      	ldr	r0, [r7, #0]
 8005106:	f002 f9dc 	bl	80074c2 <memcpy>
	}
}
 800510a:	bf00      	nop
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800511a:	f001 fda3 	bl	8006c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005124:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005126:	e011      	b.n	800514c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	2b00      	cmp	r3, #0
 800512e:	d012      	beq.n	8005156 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	3324      	adds	r3, #36	; 0x24
 8005134:	4618      	mov	r0, r3
 8005136:	f000 fd7b 	bl	8005c30 <xTaskRemoveFromEventList>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005140:	f000 fe52 	bl	8005de8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
 8005146:	3b01      	subs	r3, #1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800514c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005150:	2b00      	cmp	r3, #0
 8005152:	dce9      	bgt.n	8005128 <prvUnlockQueue+0x16>
 8005154:	e000      	b.n	8005158 <prvUnlockQueue+0x46>
					break;
 8005156:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	22ff      	movs	r2, #255	; 0xff
 800515c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005160:	f001 fdb0 	bl	8006cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005164:	f001 fd7e 	bl	8006c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800516e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005170:	e011      	b.n	8005196 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d012      	beq.n	80051a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	3310      	adds	r3, #16
 800517e:	4618      	mov	r0, r3
 8005180:	f000 fd56 	bl	8005c30 <xTaskRemoveFromEventList>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800518a:	f000 fe2d 	bl	8005de8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800518e:	7bbb      	ldrb	r3, [r7, #14]
 8005190:	3b01      	subs	r3, #1
 8005192:	b2db      	uxtb	r3, r3
 8005194:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005196:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800519a:	2b00      	cmp	r3, #0
 800519c:	dce9      	bgt.n	8005172 <prvUnlockQueue+0x60>
 800519e:	e000      	b.n	80051a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	22ff      	movs	r2, #255	; 0xff
 80051a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051aa:	f001 fd8b 	bl	8006cc4 <vPortExitCritical>
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b084      	sub	sp, #16
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051be:	f001 fd51 	bl	8006c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d102      	bne.n	80051d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80051ca:	2301      	movs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e001      	b.n	80051d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80051d0:	2300      	movs	r3, #0
 80051d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80051d4:	f001 fd76 	bl	8006cc4 <vPortExitCritical>

	return xReturn;
 80051d8:	68fb      	ldr	r3, [r7, #12]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051ea:	f001 fd3b 	bl	8006c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d102      	bne.n	8005200 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80051fa:	2301      	movs	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]
 80051fe:	e001      	b.n	8005204 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005200:	2300      	movs	r3, #0
 8005202:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005204:	f001 fd5e 	bl	8006cc4 <vPortExitCritical>

	return xReturn;
 8005208:	68fb      	ldr	r3, [r7, #12]
}
 800520a:	4618      	mov	r0, r3
 800520c:	3710      	adds	r7, #16
 800520e:	46bd      	mov	sp, r7
 8005210:	bd80      	pop	{r7, pc}
	...

08005214 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800521e:	2300      	movs	r3, #0
 8005220:	60fb      	str	r3, [r7, #12]
 8005222:	e014      	b.n	800524e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005224:	4a0f      	ldr	r2, [pc, #60]	; (8005264 <vQueueAddToRegistry+0x50>)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10b      	bne.n	8005248 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005230:	490c      	ldr	r1, [pc, #48]	; (8005264 <vQueueAddToRegistry+0x50>)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	683a      	ldr	r2, [r7, #0]
 8005236:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800523a:	4a0a      	ldr	r2, [pc, #40]	; (8005264 <vQueueAddToRegistry+0x50>)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	00db      	lsls	r3, r3, #3
 8005240:	4413      	add	r3, r2
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005246:	e006      	b.n	8005256 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	3301      	adds	r3, #1
 800524c:	60fb      	str	r3, [r7, #12]
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2b07      	cmp	r3, #7
 8005252:	d9e7      	bls.n	8005224 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005254:	bf00      	nop
 8005256:	bf00      	nop
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	20000a44 	.word	0x20000a44

08005268 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
 8005274:	e016      	b.n	80052a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005276:	4a10      	ldr	r2, [pc, #64]	; (80052b8 <vQueueUnregisterQueue+0x50>)
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	4413      	add	r3, r2
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	429a      	cmp	r2, r3
 8005284:	d10b      	bne.n	800529e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005286:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <vQueueUnregisterQueue+0x50>)
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2100      	movs	r1, #0
 800528c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005290:	4a09      	ldr	r2, [pc, #36]	; (80052b8 <vQueueUnregisterQueue+0x50>)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]
				break;
 800529c:	e006      	b.n	80052ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	3301      	adds	r3, #1
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b07      	cmp	r3, #7
 80052a8:	d9e5      	bls.n	8005276 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80052aa:	bf00      	nop
 80052ac:	bf00      	nop
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	20000a44 	.word	0x20000a44

080052bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052cc:	f001 fcca 	bl	8006c64 <vPortEnterCritical>
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052d6:	b25b      	sxtb	r3, r3
 80052d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052dc:	d103      	bne.n	80052e6 <vQueueWaitForMessageRestricted+0x2a>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ec:	b25b      	sxtb	r3, r3
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d103      	bne.n	80052fc <vQueueWaitForMessageRestricted+0x40>
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	2200      	movs	r2, #0
 80052f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052fc:	f001 fce2 	bl	8006cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005304:	2b00      	cmp	r3, #0
 8005306:	d106      	bne.n	8005316 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	3324      	adds	r3, #36	; 0x24
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	68b9      	ldr	r1, [r7, #8]
 8005310:	4618      	mov	r0, r3
 8005312:	f000 fc61 	bl	8005bd8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005316:	6978      	ldr	r0, [r7, #20]
 8005318:	f7ff fefb 	bl	8005112 <prvUnlockQueue>
	}
 800531c:	bf00      	nop
 800531e:	3718      	adds	r7, #24
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005324:	b580      	push	{r7, lr}
 8005326:	b08e      	sub	sp, #56	; 0x38
 8005328:	af04      	add	r7, sp, #16
 800532a:	60f8      	str	r0, [r7, #12]
 800532c:	60b9      	str	r1, [r7, #8]
 800532e:	607a      	str	r2, [r7, #4]
 8005330:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005332:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005334:	2b00      	cmp	r3, #0
 8005336:	d10a      	bne.n	800534e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800533c:	f383 8811 	msr	BASEPRI, r3
 8005340:	f3bf 8f6f 	isb	sy
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	623b      	str	r3, [r7, #32]
}
 800534a:	bf00      	nop
 800534c:	e7fe      	b.n	800534c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800534e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10a      	bne.n	800536a <xTaskCreateStatic+0x46>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	61fb      	str	r3, [r7, #28]
}
 8005366:	bf00      	nop
 8005368:	e7fe      	b.n	8005368 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800536a:	23bc      	movs	r3, #188	; 0xbc
 800536c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2bbc      	cmp	r3, #188	; 0xbc
 8005372:	d00a      	beq.n	800538a <xTaskCreateStatic+0x66>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	61bb      	str	r3, [r7, #24]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800538a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800538c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800538e:	2b00      	cmp	r3, #0
 8005390:	d01e      	beq.n	80053d0 <xTaskCreateStatic+0xac>
 8005392:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005394:	2b00      	cmp	r3, #0
 8005396:	d01b      	beq.n	80053d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800539a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800539c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800539e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053a4:	2202      	movs	r2, #2
 80053a6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053aa:	2300      	movs	r3, #0
 80053ac:	9303      	str	r3, [sp, #12]
 80053ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053b0:	9302      	str	r3, [sp, #8]
 80053b2:	f107 0314 	add.w	r3, r7, #20
 80053b6:	9301      	str	r3, [sp, #4]
 80053b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	68b9      	ldr	r1, [r7, #8]
 80053c2:	68f8      	ldr	r0, [r7, #12]
 80053c4:	f000 f850 	bl	8005468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053ca:	f000 f8f3 	bl	80055b4 <prvAddNewTaskToReadyList>
 80053ce:	e001      	b.n	80053d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053d4:	697b      	ldr	r3, [r7, #20]
	}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3728      	adds	r7, #40	; 0x28
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053de:	b580      	push	{r7, lr}
 80053e0:	b08c      	sub	sp, #48	; 0x30
 80053e2:	af04      	add	r7, sp, #16
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	603b      	str	r3, [r7, #0]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	009b      	lsls	r3, r3, #2
 80053f2:	4618      	mov	r0, r3
 80053f4:	f001 fd58 	bl	8006ea8 <pvPortMalloc>
 80053f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00e      	beq.n	800541e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005400:	20bc      	movs	r0, #188	; 0xbc
 8005402:	f001 fd51 	bl	8006ea8 <pvPortMalloc>
 8005406:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005408:	69fb      	ldr	r3, [r7, #28]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
 8005414:	e005      	b.n	8005422 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005416:	6978      	ldr	r0, [r7, #20]
 8005418:	f001 fe12 	bl	8007040 <vPortFree>
 800541c:	e001      	b.n	8005422 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800541e:	2300      	movs	r3, #0
 8005420:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005428:	69fb      	ldr	r3, [r7, #28]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005430:	88fa      	ldrh	r2, [r7, #6]
 8005432:	2300      	movs	r3, #0
 8005434:	9303      	str	r3, [sp, #12]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	9302      	str	r3, [sp, #8]
 800543a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 f80e 	bl	8005468 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800544c:	69f8      	ldr	r0, [r7, #28]
 800544e:	f000 f8b1 	bl	80055b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005452:	2301      	movs	r3, #1
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e002      	b.n	800545e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005458:	f04f 33ff 	mov.w	r3, #4294967295
 800545c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800545e:	69bb      	ldr	r3, [r7, #24]
	}
 8005460:	4618      	mov	r0, r3
 8005462:	3720      	adds	r7, #32
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}

08005468 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b088      	sub	sp, #32
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
 8005474:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	461a      	mov	r2, r3
 8005480:	21a5      	movs	r1, #165	; 0xa5
 8005482:	f002 f82c 	bl	80074de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005490:	3b01      	subs	r3, #1
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	4413      	add	r3, r2
 8005496:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005498:	69bb      	ldr	r3, [r7, #24]
 800549a:	f023 0307 	bic.w	r3, r3, #7
 800549e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054a0:	69bb      	ldr	r3, [r7, #24]
 80054a2:	f003 0307 	and.w	r3, r3, #7
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80054aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ae:	f383 8811 	msr	BASEPRI, r3
 80054b2:	f3bf 8f6f 	isb	sy
 80054b6:	f3bf 8f4f 	dsb	sy
 80054ba:	617b      	str	r3, [r7, #20]
}
 80054bc:	bf00      	nop
 80054be:	e7fe      	b.n	80054be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d01f      	beq.n	8005506 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054c6:	2300      	movs	r3, #0
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	e012      	b.n	80054f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054cc:	68ba      	ldr	r2, [r7, #8]
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	4413      	add	r3, r2
 80054d2:	7819      	ldrb	r1, [r3, #0]
 80054d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	4413      	add	r3, r2
 80054da:	3334      	adds	r3, #52	; 0x34
 80054dc:	460a      	mov	r2, r1
 80054de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054e0:	68ba      	ldr	r2, [r7, #8]
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	4413      	add	r3, r2
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d006      	beq.n	80054fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ec:	69fb      	ldr	r3, [r7, #28]
 80054ee:	3301      	adds	r3, #1
 80054f0:	61fb      	str	r3, [r7, #28]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	2b0f      	cmp	r3, #15
 80054f6:	d9e9      	bls.n	80054cc <prvInitialiseNewTask+0x64>
 80054f8:	e000      	b.n	80054fc <prvInitialiseNewTask+0x94>
			{
				break;
 80054fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005504:	e003      	b.n	800550e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005508:	2200      	movs	r2, #0
 800550a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	2b37      	cmp	r3, #55	; 0x37
 8005512:	d901      	bls.n	8005518 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005514:	2337      	movs	r3, #55	; 0x37
 8005516:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800551c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800551e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005522:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005526:	2200      	movs	r2, #0
 8005528:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	3304      	adds	r3, #4
 800552e:	4618      	mov	r0, r3
 8005530:	f7fe fe0a 	bl	8004148 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	3318      	adds	r3, #24
 8005538:	4618      	mov	r0, r3
 800553a:	f7fe fe05 	bl	8004148 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800553e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005542:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005546:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800554a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005550:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005552:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	2200      	movs	r2, #0
 8005558:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800555c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555e:	2200      	movs	r2, #0
 8005560:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005566:	3354      	adds	r3, #84	; 0x54
 8005568:	2260      	movs	r2, #96	; 0x60
 800556a:	2100      	movs	r1, #0
 800556c:	4618      	mov	r0, r3
 800556e:	f001 ffb6 	bl	80074de <memset>
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	4a0c      	ldr	r2, [pc, #48]	; (80055a8 <prvInitialiseNewTask+0x140>)
 8005576:	659a      	str	r2, [r3, #88]	; 0x58
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	4a0c      	ldr	r2, [pc, #48]	; (80055ac <prvInitialiseNewTask+0x144>)
 800557c:	65da      	str	r2, [r3, #92]	; 0x5c
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	4a0b      	ldr	r2, [pc, #44]	; (80055b0 <prvInitialiseNewTask+0x148>)
 8005582:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	68f9      	ldr	r1, [r7, #12]
 8005588:	69b8      	ldr	r0, [r7, #24]
 800558a:	f001 fa3f 	bl	8006a0c <pxPortInitialiseStack>
 800558e:	4602      	mov	r2, r0
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005596:	2b00      	cmp	r3, #0
 8005598:	d002      	beq.n	80055a0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800559a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800559c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800559e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055a0:	bf00      	nop
 80055a2:	3720      	adds	r7, #32
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	0800a5c0 	.word	0x0800a5c0
 80055ac:	0800a5e0 	.word	0x0800a5e0
 80055b0:	0800a5a0 	.word	0x0800a5a0

080055b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055bc:	f001 fb52 	bl	8006c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055c0:	4b2d      	ldr	r3, [pc, #180]	; (8005678 <prvAddNewTaskToReadyList+0xc4>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	3301      	adds	r3, #1
 80055c6:	4a2c      	ldr	r2, [pc, #176]	; (8005678 <prvAddNewTaskToReadyList+0xc4>)
 80055c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055ca:	4b2c      	ldr	r3, [pc, #176]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d109      	bne.n	80055e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055d2:	4a2a      	ldr	r2, [pc, #168]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055d8:	4b27      	ldr	r3, [pc, #156]	; (8005678 <prvAddNewTaskToReadyList+0xc4>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d110      	bne.n	8005602 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055e0:	f000 fc26 	bl	8005e30 <prvInitialiseTaskLists>
 80055e4:	e00d      	b.n	8005602 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80055e6:	4b26      	ldr	r3, [pc, #152]	; (8005680 <prvAddNewTaskToReadyList+0xcc>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80055ee:	4b23      	ldr	r3, [pc, #140]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d802      	bhi.n	8005602 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055fc:	4a1f      	ldr	r2, [pc, #124]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005602:	4b20      	ldr	r3, [pc, #128]	; (8005684 <prvAddNewTaskToReadyList+0xd0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	4a1e      	ldr	r2, [pc, #120]	; (8005684 <prvAddNewTaskToReadyList+0xd0>)
 800560a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800560c:	4b1d      	ldr	r3, [pc, #116]	; (8005684 <prvAddNewTaskToReadyList+0xd0>)
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005618:	4b1b      	ldr	r3, [pc, #108]	; (8005688 <prvAddNewTaskToReadyList+0xd4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d903      	bls.n	8005628 <prvAddNewTaskToReadyList+0x74>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005624:	4a18      	ldr	r2, [pc, #96]	; (8005688 <prvAddNewTaskToReadyList+0xd4>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4a15      	ldr	r2, [pc, #84]	; (800568c <prvAddNewTaskToReadyList+0xd8>)
 8005636:	441a      	add	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7fe fd8f 	bl	8004162 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005644:	f001 fb3e 	bl	8006cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005648:	4b0d      	ldr	r3, [pc, #52]	; (8005680 <prvAddNewTaskToReadyList+0xcc>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00e      	beq.n	800566e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005650:	4b0a      	ldr	r3, [pc, #40]	; (800567c <prvAddNewTaskToReadyList+0xc8>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800565a:	429a      	cmp	r2, r3
 800565c:	d207      	bcs.n	800566e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800565e:	4b0c      	ldr	r3, [pc, #48]	; (8005690 <prvAddNewTaskToReadyList+0xdc>)
 8005660:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800566e:	bf00      	nop
 8005670:	3708      	adds	r7, #8
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000f58 	.word	0x20000f58
 800567c:	20000a84 	.word	0x20000a84
 8005680:	20000f64 	.word	0x20000f64
 8005684:	20000f74 	.word	0x20000f74
 8005688:	20000f60 	.word	0x20000f60
 800568c:	20000a88 	.word	0x20000a88
 8005690:	e000ed04 	.word	0xe000ed04

08005694 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d017      	beq.n	80056d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056a6:	4b13      	ldr	r3, [pc, #76]	; (80056f4 <vTaskDelay+0x60>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00a      	beq.n	80056c4 <vTaskDelay+0x30>
	__asm volatile
 80056ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	60bb      	str	r3, [r7, #8]
}
 80056c0:	bf00      	nop
 80056c2:	e7fe      	b.n	80056c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056c4:	f000 f88a 	bl	80057dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056c8:	2100      	movs	r1, #0
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fdfc 	bl	80062c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056d0:	f000 f892 	bl	80057f8 <xTaskResumeAll>
 80056d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d107      	bne.n	80056ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056dc:	4b06      	ldr	r3, [pc, #24]	; (80056f8 <vTaskDelay+0x64>)
 80056de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	f3bf 8f4f 	dsb	sy
 80056e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80056ec:	bf00      	nop
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000f80 	.word	0x20000f80
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b08a      	sub	sp, #40	; 0x28
 8005700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005702:	2300      	movs	r3, #0
 8005704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005706:	2300      	movs	r3, #0
 8005708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800570a:	463a      	mov	r2, r7
 800570c:	1d39      	adds	r1, r7, #4
 800570e:	f107 0308 	add.w	r3, r7, #8
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe fcc4 	bl	80040a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	68ba      	ldr	r2, [r7, #8]
 800571e:	9202      	str	r2, [sp, #8]
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	2300      	movs	r3, #0
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	2300      	movs	r3, #0
 8005728:	460a      	mov	r2, r1
 800572a:	4924      	ldr	r1, [pc, #144]	; (80057bc <vTaskStartScheduler+0xc0>)
 800572c:	4824      	ldr	r0, [pc, #144]	; (80057c0 <vTaskStartScheduler+0xc4>)
 800572e:	f7ff fdf9 	bl	8005324 <xTaskCreateStatic>
 8005732:	4603      	mov	r3, r0
 8005734:	4a23      	ldr	r2, [pc, #140]	; (80057c4 <vTaskStartScheduler+0xc8>)
 8005736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005738:	4b22      	ldr	r3, [pc, #136]	; (80057c4 <vTaskStartScheduler+0xc8>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d002      	beq.n	8005746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005740:	2301      	movs	r3, #1
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e001      	b.n	800574a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005746:	2300      	movs	r3, #0
 8005748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d102      	bne.n	8005756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005750:	f000 fe0e 	bl	8006370 <xTimerCreateTimerTask>
 8005754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d11b      	bne.n	8005794 <vTaskStartScheduler+0x98>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	613b      	str	r3, [r7, #16]
}
 800576e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005770:	4b15      	ldr	r3, [pc, #84]	; (80057c8 <vTaskStartScheduler+0xcc>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3354      	adds	r3, #84	; 0x54
 8005776:	4a15      	ldr	r2, [pc, #84]	; (80057cc <vTaskStartScheduler+0xd0>)
 8005778:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800577a:	4b15      	ldr	r3, [pc, #84]	; (80057d0 <vTaskStartScheduler+0xd4>)
 800577c:	f04f 32ff 	mov.w	r2, #4294967295
 8005780:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005782:	4b14      	ldr	r3, [pc, #80]	; (80057d4 <vTaskStartScheduler+0xd8>)
 8005784:	2201      	movs	r2, #1
 8005786:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005788:	4b13      	ldr	r3, [pc, #76]	; (80057d8 <vTaskStartScheduler+0xdc>)
 800578a:	2200      	movs	r2, #0
 800578c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800578e:	f001 f9c7 	bl	8006b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005792:	e00e      	b.n	80057b2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800579a:	d10a      	bne.n	80057b2 <vTaskStartScheduler+0xb6>
	__asm volatile
 800579c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a0:	f383 8811 	msr	BASEPRI, r3
 80057a4:	f3bf 8f6f 	isb	sy
 80057a8:	f3bf 8f4f 	dsb	sy
 80057ac:	60fb      	str	r3, [r7, #12]
}
 80057ae:	bf00      	nop
 80057b0:	e7fe      	b.n	80057b0 <vTaskStartScheduler+0xb4>
}
 80057b2:	bf00      	nop
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	0800a49c 	.word	0x0800a49c
 80057c0:	08005e01 	.word	0x08005e01
 80057c4:	20000f7c 	.word	0x20000f7c
 80057c8:	20000a84 	.word	0x20000a84
 80057cc:	20000010 	.word	0x20000010
 80057d0:	20000f78 	.word	0x20000f78
 80057d4:	20000f64 	.word	0x20000f64
 80057d8:	20000f5c 	.word	0x20000f5c

080057dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057dc:	b480      	push	{r7}
 80057de:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80057e0:	4b04      	ldr	r3, [pc, #16]	; (80057f4 <vTaskSuspendAll+0x18>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4a03      	ldr	r2, [pc, #12]	; (80057f4 <vTaskSuspendAll+0x18>)
 80057e8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80057ea:	bf00      	nop
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr
 80057f4:	20000f80 	.word	0x20000f80

080057f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005802:	2300      	movs	r3, #0
 8005804:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005806:	4b42      	ldr	r3, [pc, #264]	; (8005910 <xTaskResumeAll+0x118>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d10a      	bne.n	8005824 <xTaskResumeAll+0x2c>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	603b      	str	r3, [r7, #0]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005824:	f001 fa1e 	bl	8006c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005828:	4b39      	ldr	r3, [pc, #228]	; (8005910 <xTaskResumeAll+0x118>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a38      	ldr	r2, [pc, #224]	; (8005910 <xTaskResumeAll+0x118>)
 8005830:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005832:	4b37      	ldr	r3, [pc, #220]	; (8005910 <xTaskResumeAll+0x118>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d162      	bne.n	8005900 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800583a:	4b36      	ldr	r3, [pc, #216]	; (8005914 <xTaskResumeAll+0x11c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d05e      	beq.n	8005900 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005842:	e02f      	b.n	80058a4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005844:	4b34      	ldr	r3, [pc, #208]	; (8005918 <xTaskResumeAll+0x120>)
 8005846:	68db      	ldr	r3, [r3, #12]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	3318      	adds	r3, #24
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe fce3 	bl	800421c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	3304      	adds	r3, #4
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fcde 	bl	800421c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005864:	4b2d      	ldr	r3, [pc, #180]	; (800591c <xTaskResumeAll+0x124>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	429a      	cmp	r2, r3
 800586a:	d903      	bls.n	8005874 <xTaskResumeAll+0x7c>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005870:	4a2a      	ldr	r2, [pc, #168]	; (800591c <xTaskResumeAll+0x124>)
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005878:	4613      	mov	r3, r2
 800587a:	009b      	lsls	r3, r3, #2
 800587c:	4413      	add	r3, r2
 800587e:	009b      	lsls	r3, r3, #2
 8005880:	4a27      	ldr	r2, [pc, #156]	; (8005920 <xTaskResumeAll+0x128>)
 8005882:	441a      	add	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4610      	mov	r0, r2
 800588c:	f7fe fc69 	bl	8004162 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	4b23      	ldr	r3, [pc, #140]	; (8005924 <xTaskResumeAll+0x12c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800589a:	429a      	cmp	r2, r3
 800589c:	d302      	bcc.n	80058a4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800589e:	4b22      	ldr	r3, [pc, #136]	; (8005928 <xTaskResumeAll+0x130>)
 80058a0:	2201      	movs	r2, #1
 80058a2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058a4:	4b1c      	ldr	r3, [pc, #112]	; (8005918 <xTaskResumeAll+0x120>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d1cb      	bne.n	8005844 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d001      	beq.n	80058b6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058b2:	f000 fb5f 	bl	8005f74 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <xTaskResumeAll+0x134>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d010      	beq.n	80058e4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058c2:	f000 f847 	bl	8005954 <xTaskIncrementTick>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058cc:	4b16      	ldr	r3, [pc, #88]	; (8005928 <xTaskResumeAll+0x130>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1f1      	bne.n	80058c2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80058de:	4b13      	ldr	r3, [pc, #76]	; (800592c <xTaskResumeAll+0x134>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80058e4:	4b10      	ldr	r3, [pc, #64]	; (8005928 <xTaskResumeAll+0x130>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d009      	beq.n	8005900 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80058ec:	2301      	movs	r3, #1
 80058ee:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80058f0:	4b0f      	ldr	r3, [pc, #60]	; (8005930 <xTaskResumeAll+0x138>)
 80058f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f6:	601a      	str	r2, [r3, #0]
 80058f8:	f3bf 8f4f 	dsb	sy
 80058fc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005900:	f001 f9e0 	bl	8006cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8005904:	68bb      	ldr	r3, [r7, #8]
}
 8005906:	4618      	mov	r0, r3
 8005908:	3710      	adds	r7, #16
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	20000f80 	.word	0x20000f80
 8005914:	20000f58 	.word	0x20000f58
 8005918:	20000f18 	.word	0x20000f18
 800591c:	20000f60 	.word	0x20000f60
 8005920:	20000a88 	.word	0x20000a88
 8005924:	20000a84 	.word	0x20000a84
 8005928:	20000f6c 	.word	0x20000f6c
 800592c:	20000f68 	.word	0x20000f68
 8005930:	e000ed04 	.word	0xe000ed04

08005934 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800593a:	4b05      	ldr	r3, [pc, #20]	; (8005950 <xTaskGetTickCount+0x1c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005940:	687b      	ldr	r3, [r7, #4]
}
 8005942:	4618      	mov	r0, r3
 8005944:	370c      	adds	r7, #12
 8005946:	46bd      	mov	sp, r7
 8005948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594c:	4770      	bx	lr
 800594e:	bf00      	nop
 8005950:	20000f5c 	.word	0x20000f5c

08005954 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800595a:	2300      	movs	r3, #0
 800595c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800595e:	4b4f      	ldr	r3, [pc, #316]	; (8005a9c <xTaskIncrementTick+0x148>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	2b00      	cmp	r3, #0
 8005964:	f040 808f 	bne.w	8005a86 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005968:	4b4d      	ldr	r3, [pc, #308]	; (8005aa0 <xTaskIncrementTick+0x14c>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005970:	4a4b      	ldr	r2, [pc, #300]	; (8005aa0 <xTaskIncrementTick+0x14c>)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d120      	bne.n	80059be <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <xTaskIncrementTick+0x150>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <xTaskIncrementTick+0x48>
	__asm volatile
 8005986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800598a:	f383 8811 	msr	BASEPRI, r3
 800598e:	f3bf 8f6f 	isb	sy
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	603b      	str	r3, [r7, #0]
}
 8005998:	bf00      	nop
 800599a:	e7fe      	b.n	800599a <xTaskIncrementTick+0x46>
 800599c:	4b41      	ldr	r3, [pc, #260]	; (8005aa4 <xTaskIncrementTick+0x150>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	4b41      	ldr	r3, [pc, #260]	; (8005aa8 <xTaskIncrementTick+0x154>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a3f      	ldr	r2, [pc, #252]	; (8005aa4 <xTaskIncrementTick+0x150>)
 80059a8:	6013      	str	r3, [r2, #0]
 80059aa:	4a3f      	ldr	r2, [pc, #252]	; (8005aa8 <xTaskIncrementTick+0x154>)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6013      	str	r3, [r2, #0]
 80059b0:	4b3e      	ldr	r3, [pc, #248]	; (8005aac <xTaskIncrementTick+0x158>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	3301      	adds	r3, #1
 80059b6:	4a3d      	ldr	r2, [pc, #244]	; (8005aac <xTaskIncrementTick+0x158>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	f000 fadb 	bl	8005f74 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059be:	4b3c      	ldr	r3, [pc, #240]	; (8005ab0 <xTaskIncrementTick+0x15c>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d349      	bcc.n	8005a5c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059c8:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <xTaskIncrementTick+0x150>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d2:	4b37      	ldr	r3, [pc, #220]	; (8005ab0 <xTaskIncrementTick+0x15c>)
 80059d4:	f04f 32ff 	mov.w	r2, #4294967295
 80059d8:	601a      	str	r2, [r3, #0]
					break;
 80059da:	e03f      	b.n	8005a5c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80059dc:	4b31      	ldr	r3, [pc, #196]	; (8005aa4 <xTaskIncrementTick+0x150>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d203      	bcs.n	80059fc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80059f4:	4a2e      	ldr	r2, [pc, #184]	; (8005ab0 <xTaskIncrementTick+0x15c>)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80059fa:	e02f      	b.n	8005a5c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	3304      	adds	r3, #4
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fe fc0b 	bl	800421c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d004      	beq.n	8005a18 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a0e:	68bb      	ldr	r3, [r7, #8]
 8005a10:	3318      	adds	r3, #24
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fc02 	bl	800421c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1c:	4b25      	ldr	r3, [pc, #148]	; (8005ab4 <xTaskIncrementTick+0x160>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d903      	bls.n	8005a2c <xTaskIncrementTick+0xd8>
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	4a22      	ldr	r2, [pc, #136]	; (8005ab4 <xTaskIncrementTick+0x160>)
 8005a2a:	6013      	str	r3, [r2, #0]
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a30:	4613      	mov	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	4413      	add	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4a1f      	ldr	r2, [pc, #124]	; (8005ab8 <xTaskIncrementTick+0x164>)
 8005a3a:	441a      	add	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	3304      	adds	r3, #4
 8005a40:	4619      	mov	r1, r3
 8005a42:	4610      	mov	r0, r2
 8005a44:	f7fe fb8d 	bl	8004162 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <xTaskIncrementTick+0x168>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	429a      	cmp	r2, r3
 8005a54:	d3b8      	bcc.n	80059c8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a56:	2301      	movs	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a5a:	e7b5      	b.n	80059c8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a5c:	4b17      	ldr	r3, [pc, #92]	; (8005abc <xTaskIncrementTick+0x168>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a62:	4915      	ldr	r1, [pc, #84]	; (8005ab8 <xTaskIncrementTick+0x164>)
 8005a64:	4613      	mov	r3, r2
 8005a66:	009b      	lsls	r3, r3, #2
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	440b      	add	r3, r1
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d901      	bls.n	8005a78 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005a78:	4b11      	ldr	r3, [pc, #68]	; (8005ac0 <xTaskIncrementTick+0x16c>)
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005a80:	2301      	movs	r3, #1
 8005a82:	617b      	str	r3, [r7, #20]
 8005a84:	e004      	b.n	8005a90 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005a86:	4b0f      	ldr	r3, [pc, #60]	; (8005ac4 <xTaskIncrementTick+0x170>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3301      	adds	r3, #1
 8005a8c:	4a0d      	ldr	r2, [pc, #52]	; (8005ac4 <xTaskIncrementTick+0x170>)
 8005a8e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005a90:	697b      	ldr	r3, [r7, #20]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3718      	adds	r7, #24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000f80 	.word	0x20000f80
 8005aa0:	20000f5c 	.word	0x20000f5c
 8005aa4:	20000f10 	.word	0x20000f10
 8005aa8:	20000f14 	.word	0x20000f14
 8005aac:	20000f70 	.word	0x20000f70
 8005ab0:	20000f78 	.word	0x20000f78
 8005ab4:	20000f60 	.word	0x20000f60
 8005ab8:	20000a88 	.word	0x20000a88
 8005abc:	20000a84 	.word	0x20000a84
 8005ac0:	20000f6c 	.word	0x20000f6c
 8005ac4:	20000f68 	.word	0x20000f68

08005ac8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b085      	sub	sp, #20
 8005acc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ace:	4b2a      	ldr	r3, [pc, #168]	; (8005b78 <vTaskSwitchContext+0xb0>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005ad6:	4b29      	ldr	r3, [pc, #164]	; (8005b7c <vTaskSwitchContext+0xb4>)
 8005ad8:	2201      	movs	r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005adc:	e046      	b.n	8005b6c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005ade:	4b27      	ldr	r3, [pc, #156]	; (8005b7c <vTaskSwitchContext+0xb4>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ae4:	4b26      	ldr	r3, [pc, #152]	; (8005b80 <vTaskSwitchContext+0xb8>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e010      	b.n	8005b0e <vTaskSwitchContext+0x46>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d10a      	bne.n	8005b08 <vTaskSwitchContext+0x40>
	__asm volatile
 8005af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005af6:	f383 8811 	msr	BASEPRI, r3
 8005afa:	f3bf 8f6f 	isb	sy
 8005afe:	f3bf 8f4f 	dsb	sy
 8005b02:	607b      	str	r3, [r7, #4]
}
 8005b04:	bf00      	nop
 8005b06:	e7fe      	b.n	8005b06 <vTaskSwitchContext+0x3e>
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	3b01      	subs	r3, #1
 8005b0c:	60fb      	str	r3, [r7, #12]
 8005b0e:	491d      	ldr	r1, [pc, #116]	; (8005b84 <vTaskSwitchContext+0xbc>)
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	4613      	mov	r3, r2
 8005b14:	009b      	lsls	r3, r3, #2
 8005b16:	4413      	add	r3, r2
 8005b18:	009b      	lsls	r3, r3, #2
 8005b1a:	440b      	add	r3, r1
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0e4      	beq.n	8005aec <vTaskSwitchContext+0x24>
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	4613      	mov	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	4413      	add	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4a15      	ldr	r2, [pc, #84]	; (8005b84 <vTaskSwitchContext+0xbc>)
 8005b2e:	4413      	add	r3, r2
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	605a      	str	r2, [r3, #4]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	685a      	ldr	r2, [r3, #4]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	3308      	adds	r3, #8
 8005b44:	429a      	cmp	r2, r3
 8005b46:	d104      	bne.n	8005b52 <vTaskSwitchContext+0x8a>
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	605a      	str	r2, [r3, #4]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a0b      	ldr	r2, [pc, #44]	; (8005b88 <vTaskSwitchContext+0xc0>)
 8005b5a:	6013      	str	r3, [r2, #0]
 8005b5c:	4a08      	ldr	r2, [pc, #32]	; (8005b80 <vTaskSwitchContext+0xb8>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b62:	4b09      	ldr	r3, [pc, #36]	; (8005b88 <vTaskSwitchContext+0xc0>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	3354      	adds	r3, #84	; 0x54
 8005b68:	4a08      	ldr	r2, [pc, #32]	; (8005b8c <vTaskSwitchContext+0xc4>)
 8005b6a:	6013      	str	r3, [r2, #0]
}
 8005b6c:	bf00      	nop
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20000f80 	.word	0x20000f80
 8005b7c:	20000f6c 	.word	0x20000f6c
 8005b80:	20000f60 	.word	0x20000f60
 8005b84:	20000a88 	.word	0x20000a88
 8005b88:	20000a84 	.word	0x20000a84
 8005b8c:	20000010 	.word	0x20000010

08005b90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba4:	f383 8811 	msr	BASEPRI, r3
 8005ba8:	f3bf 8f6f 	isb	sy
 8005bac:	f3bf 8f4f 	dsb	sy
 8005bb0:	60fb      	str	r3, [r7, #12]
}
 8005bb2:	bf00      	nop
 8005bb4:	e7fe      	b.n	8005bb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bb6:	4b07      	ldr	r3, [pc, #28]	; (8005bd4 <vTaskPlaceOnEventList+0x44>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3318      	adds	r3, #24
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f7fe faf3 	bl	80041aa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005bc4:	2101      	movs	r1, #1
 8005bc6:	6838      	ldr	r0, [r7, #0]
 8005bc8:	f000 fb7e 	bl	80062c8 <prvAddCurrentTaskToDelayedList>
}
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	20000a84 	.word	0x20000a84

08005bd8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d10a      	bne.n	8005c00 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bee:	f383 8811 	msr	BASEPRI, r3
 8005bf2:	f3bf 8f6f 	isb	sy
 8005bf6:	f3bf 8f4f 	dsb	sy
 8005bfa:	617b      	str	r3, [r7, #20]
}
 8005bfc:	bf00      	nop
 8005bfe:	e7fe      	b.n	8005bfe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c00:	4b0a      	ldr	r3, [pc, #40]	; (8005c2c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3318      	adds	r3, #24
 8005c06:	4619      	mov	r1, r3
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7fe faaa 	bl	8004162 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d002      	beq.n	8005c1a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c14:	f04f 33ff 	mov.w	r3, #4294967295
 8005c18:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c1a:	6879      	ldr	r1, [r7, #4]
 8005c1c:	68b8      	ldr	r0, [r7, #8]
 8005c1e:	f000 fb53 	bl	80062c8 <prvAddCurrentTaskToDelayedList>
	}
 8005c22:	bf00      	nop
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	20000a84 	.word	0x20000a84

08005c30 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b086      	sub	sp, #24
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60fb      	str	r3, [r7, #12]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	3318      	adds	r3, #24
 8005c60:	4618      	mov	r0, r3
 8005c62:	f7fe fadb 	bl	800421c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c66:	4b1e      	ldr	r3, [pc, #120]	; (8005ce0 <xTaskRemoveFromEventList+0xb0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d11d      	bne.n	8005caa <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3304      	adds	r3, #4
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7fe fad2 	bl	800421c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c7c:	4b19      	ldr	r3, [pc, #100]	; (8005ce4 <xTaskRemoveFromEventList+0xb4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d903      	bls.n	8005c8c <xTaskRemoveFromEventList+0x5c>
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <xTaskRemoveFromEventList+0xb4>)
 8005c8a:	6013      	str	r3, [r2, #0]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c90:	4613      	mov	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4a13      	ldr	r2, [pc, #76]	; (8005ce8 <xTaskRemoveFromEventList+0xb8>)
 8005c9a:	441a      	add	r2, r3
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	3304      	adds	r3, #4
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	4610      	mov	r0, r2
 8005ca4:	f7fe fa5d 	bl	8004162 <vListInsertEnd>
 8005ca8:	e005      	b.n	8005cb6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	3318      	adds	r3, #24
 8005cae:	4619      	mov	r1, r3
 8005cb0:	480e      	ldr	r0, [pc, #56]	; (8005cec <xTaskRemoveFromEventList+0xbc>)
 8005cb2:	f7fe fa56 	bl	8004162 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cba:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <xTaskRemoveFromEventList+0xc0>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d905      	bls.n	8005cd0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	; (8005cf4 <xTaskRemoveFromEventList+0xc4>)
 8005cca:	2201      	movs	r2, #1
 8005ccc:	601a      	str	r2, [r3, #0]
 8005cce:	e001      	b.n	8005cd4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005cd4:	697b      	ldr	r3, [r7, #20]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	20000f80 	.word	0x20000f80
 8005ce4:	20000f60 	.word	0x20000f60
 8005ce8:	20000a88 	.word	0x20000a88
 8005cec:	20000f18 	.word	0x20000f18
 8005cf0:	20000a84 	.word	0x20000a84
 8005cf4:	20000f6c 	.word	0x20000f6c

08005cf8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b083      	sub	sp, #12
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d00:	4b06      	ldr	r3, [pc, #24]	; (8005d1c <vTaskInternalSetTimeOutState+0x24>)
 8005d02:	681a      	ldr	r2, [r3, #0]
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d08:	4b05      	ldr	r3, [pc, #20]	; (8005d20 <vTaskInternalSetTimeOutState+0x28>)
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	605a      	str	r2, [r3, #4]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	20000f70 	.word	0x20000f70
 8005d20:	20000f5c 	.word	0x20000f5c

08005d24 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b088      	sub	sp, #32
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d10a      	bne.n	8005d4a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	613b      	str	r3, [r7, #16]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10a      	bne.n	8005d66 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	60fb      	str	r3, [r7, #12]
}
 8005d62:	bf00      	nop
 8005d64:	e7fe      	b.n	8005d64 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d66:	f000 ff7d 	bl	8006c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d6a:	4b1d      	ldr	r3, [pc, #116]	; (8005de0 <xTaskCheckForTimeOut+0xbc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	69ba      	ldr	r2, [r7, #24]
 8005d76:	1ad3      	subs	r3, r2, r3
 8005d78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d82:	d102      	bne.n	8005d8a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005d84:	2300      	movs	r3, #0
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e023      	b.n	8005dd2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	4b15      	ldr	r3, [pc, #84]	; (8005de4 <xTaskCheckForTimeOut+0xc0>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d007      	beq.n	8005da6 <xTaskCheckForTimeOut+0x82>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	69ba      	ldr	r2, [r7, #24]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d302      	bcc.n	8005da6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005da0:	2301      	movs	r3, #1
 8005da2:	61fb      	str	r3, [r7, #28]
 8005da4:	e015      	b.n	8005dd2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d20b      	bcs.n	8005dc8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	1ad2      	subs	r2, r2, r3
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7ff ff9b 	bl	8005cf8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61fb      	str	r3, [r7, #28]
 8005dc6:	e004      	b.n	8005dd2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005dd2:	f000 ff77 	bl	8006cc4 <vPortExitCritical>

	return xReturn;
 8005dd6:	69fb      	ldr	r3, [r7, #28]
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	3720      	adds	r7, #32
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}
 8005de0:	20000f5c 	.word	0x20000f5c
 8005de4:	20000f70 	.word	0x20000f70

08005de8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005dec:	4b03      	ldr	r3, [pc, #12]	; (8005dfc <vTaskMissedYield+0x14>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	601a      	str	r2, [r3, #0]
}
 8005df2:	bf00      	nop
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr
 8005dfc:	20000f6c 	.word	0x20000f6c

08005e00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e08:	f000 f852 	bl	8005eb0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e0c:	4b06      	ldr	r3, [pc, #24]	; (8005e28 <prvIdleTask+0x28>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d9f9      	bls.n	8005e08 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e14:	4b05      	ldr	r3, [pc, #20]	; (8005e2c <prvIdleTask+0x2c>)
 8005e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e1a:	601a      	str	r2, [r3, #0]
 8005e1c:	f3bf 8f4f 	dsb	sy
 8005e20:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e24:	e7f0      	b.n	8005e08 <prvIdleTask+0x8>
 8005e26:	bf00      	nop
 8005e28:	20000a88 	.word	0x20000a88
 8005e2c:	e000ed04 	.word	0xe000ed04

08005e30 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e36:	2300      	movs	r3, #0
 8005e38:	607b      	str	r3, [r7, #4]
 8005e3a:	e00c      	b.n	8005e56 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	4613      	mov	r3, r2
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	4a12      	ldr	r2, [pc, #72]	; (8005e90 <prvInitialiseTaskLists+0x60>)
 8005e48:	4413      	add	r3, r2
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	f7fe f95c 	bl	8004108 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	3301      	adds	r3, #1
 8005e54:	607b      	str	r3, [r7, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b37      	cmp	r3, #55	; 0x37
 8005e5a:	d9ef      	bls.n	8005e3c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e5c:	480d      	ldr	r0, [pc, #52]	; (8005e94 <prvInitialiseTaskLists+0x64>)
 8005e5e:	f7fe f953 	bl	8004108 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e62:	480d      	ldr	r0, [pc, #52]	; (8005e98 <prvInitialiseTaskLists+0x68>)
 8005e64:	f7fe f950 	bl	8004108 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e68:	480c      	ldr	r0, [pc, #48]	; (8005e9c <prvInitialiseTaskLists+0x6c>)
 8005e6a:	f7fe f94d 	bl	8004108 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e6e:	480c      	ldr	r0, [pc, #48]	; (8005ea0 <prvInitialiseTaskLists+0x70>)
 8005e70:	f7fe f94a 	bl	8004108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e74:	480b      	ldr	r0, [pc, #44]	; (8005ea4 <prvInitialiseTaskLists+0x74>)
 8005e76:	f7fe f947 	bl	8004108 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <prvInitialiseTaskLists+0x78>)
 8005e7c:	4a05      	ldr	r2, [pc, #20]	; (8005e94 <prvInitialiseTaskLists+0x64>)
 8005e7e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005e80:	4b0a      	ldr	r3, [pc, #40]	; (8005eac <prvInitialiseTaskLists+0x7c>)
 8005e82:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <prvInitialiseTaskLists+0x68>)
 8005e84:	601a      	str	r2, [r3, #0]
}
 8005e86:	bf00      	nop
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	20000a88 	.word	0x20000a88
 8005e94:	20000ee8 	.word	0x20000ee8
 8005e98:	20000efc 	.word	0x20000efc
 8005e9c:	20000f18 	.word	0x20000f18
 8005ea0:	20000f2c 	.word	0x20000f2c
 8005ea4:	20000f44 	.word	0x20000f44
 8005ea8:	20000f10 	.word	0x20000f10
 8005eac:	20000f14 	.word	0x20000f14

08005eb0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eb6:	e019      	b.n	8005eec <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005eb8:	f000 fed4 	bl	8006c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ebc:	4b10      	ldr	r3, [pc, #64]	; (8005f00 <prvCheckTasksWaitingTermination+0x50>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	3304      	adds	r3, #4
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7fe f9a7 	bl	800421c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005ece:	4b0d      	ldr	r3, [pc, #52]	; (8005f04 <prvCheckTasksWaitingTermination+0x54>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	4a0b      	ldr	r2, [pc, #44]	; (8005f04 <prvCheckTasksWaitingTermination+0x54>)
 8005ed6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ed8:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	3b01      	subs	r3, #1
 8005ede:	4a0a      	ldr	r2, [pc, #40]	; (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005ee0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005ee2:	f000 feef 	bl	8006cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f810 	bl	8005f0c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005eec:	4b06      	ldr	r3, [pc, #24]	; (8005f08 <prvCheckTasksWaitingTermination+0x58>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d1e1      	bne.n	8005eb8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	3708      	adds	r7, #8
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	20000f2c 	.word	0x20000f2c
 8005f04:	20000f58 	.word	0x20000f58
 8005f08:	20000f40 	.word	0x20000f40

08005f0c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	3354      	adds	r3, #84	; 0x54
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f002 f861 	bl	8007fe0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d108      	bne.n	8005f3a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f001 f887 	bl	8007040 <vPortFree>
				vPortFree( pxTCB );
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f001 f884 	bl	8007040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f38:	e018      	b.n	8005f6c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d103      	bne.n	8005f4c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f001 f87b 	bl	8007040 <vPortFree>
	}
 8005f4a:	e00f      	b.n	8005f6c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d00a      	beq.n	8005f6c <prvDeleteTCB+0x60>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	60fb      	str	r3, [r7, #12]
}
 8005f68:	bf00      	nop
 8005f6a:	e7fe      	b.n	8005f6a <prvDeleteTCB+0x5e>
	}
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f74:	b480      	push	{r7}
 8005f76:	b083      	sub	sp, #12
 8005f78:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f7a:	4b0c      	ldr	r3, [pc, #48]	; (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d104      	bne.n	8005f8e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005f84:	4b0a      	ldr	r3, [pc, #40]	; (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f86:	f04f 32ff 	mov.w	r2, #4294967295
 8005f8a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005f8c:	e008      	b.n	8005fa0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f8e:	4b07      	ldr	r3, [pc, #28]	; (8005fac <prvResetNextTaskUnblockTime+0x38>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	4a04      	ldr	r2, [pc, #16]	; (8005fb0 <prvResetNextTaskUnblockTime+0x3c>)
 8005f9e:	6013      	str	r3, [r2, #0]
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr
 8005fac:	20000f10 	.word	0x20000f10
 8005fb0:	20000f78 	.word	0x20000f78

08005fb4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fba:	4b0b      	ldr	r3, [pc, #44]	; (8005fe8 <xTaskGetSchedulerState+0x34>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d102      	bne.n	8005fc8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	607b      	str	r3, [r7, #4]
 8005fc6:	e008      	b.n	8005fda <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fc8:	4b08      	ldr	r3, [pc, #32]	; (8005fec <xTaskGetSchedulerState+0x38>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d102      	bne.n	8005fd6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005fd0:	2302      	movs	r3, #2
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	e001      	b.n	8005fda <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005fda:	687b      	ldr	r3, [r7, #4]
	}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr
 8005fe8:	20000f64 	.word	0x20000f64
 8005fec:	20000f80 	.word	0x20000f80

08005ff0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b084      	sub	sp, #16
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d051      	beq.n	80060aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800600a:	4b2a      	ldr	r3, [pc, #168]	; (80060b4 <xTaskPriorityInherit+0xc4>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	429a      	cmp	r2, r3
 8006012:	d241      	bcs.n	8006098 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	db06      	blt.n	800602a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800601c:	4b25      	ldr	r3, [pc, #148]	; (80060b4 <xTaskPriorityInherit+0xc4>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006022:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6959      	ldr	r1, [r3, #20]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4a1f      	ldr	r2, [pc, #124]	; (80060b8 <xTaskPriorityInherit+0xc8>)
 800603c:	4413      	add	r3, r2
 800603e:	4299      	cmp	r1, r3
 8006040:	d122      	bne.n	8006088 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe f8e8 	bl	800421c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800604c:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <xTaskPriorityInherit+0xc4>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800605a:	4b18      	ldr	r3, [pc, #96]	; (80060bc <xTaskPriorityInherit+0xcc>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d903      	bls.n	800606a <xTaskPriorityInherit+0x7a>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006066:	4a15      	ldr	r2, [pc, #84]	; (80060bc <xTaskPriorityInherit+0xcc>)
 8006068:	6013      	str	r3, [r2, #0]
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800606e:	4613      	mov	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	4413      	add	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4a10      	ldr	r2, [pc, #64]	; (80060b8 <xTaskPriorityInherit+0xc8>)
 8006078:	441a      	add	r2, r3
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	3304      	adds	r3, #4
 800607e:	4619      	mov	r1, r3
 8006080:	4610      	mov	r0, r2
 8006082:	f7fe f86e 	bl	8004162 <vListInsertEnd>
 8006086:	e004      	b.n	8006092 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006088:	4b0a      	ldr	r3, [pc, #40]	; (80060b4 <xTaskPriorityInherit+0xc4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006092:	2301      	movs	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	e008      	b.n	80060aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800609c:	4b05      	ldr	r3, [pc, #20]	; (80060b4 <xTaskPriorityInherit+0xc4>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d201      	bcs.n	80060aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80060a6:	2301      	movs	r3, #1
 80060a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060aa:	68fb      	ldr	r3, [r7, #12]
	}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3710      	adds	r7, #16
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}
 80060b4:	20000a84 	.word	0x20000a84
 80060b8:	20000a88 	.word	0x20000a88
 80060bc:	20000f60 	.word	0x20000f60

080060c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b086      	sub	sp, #24
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80060cc:	2300      	movs	r3, #0
 80060ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d056      	beq.n	8006184 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80060d6:	4b2e      	ldr	r3, [pc, #184]	; (8006190 <xTaskPriorityDisinherit+0xd0>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	693a      	ldr	r2, [r7, #16]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d00a      	beq.n	80060f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	60bb      	str	r3, [r7, #8]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006118:	1e5a      	subs	r2, r3, #1
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006126:	429a      	cmp	r2, r3
 8006128:	d02c      	beq.n	8006184 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612e:	2b00      	cmp	r3, #0
 8006130:	d128      	bne.n	8006184 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	3304      	adds	r3, #4
 8006136:	4618      	mov	r0, r3
 8006138:	f7fe f870 	bl	800421c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006148:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <xTaskPriorityDisinherit+0xd4>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	429a      	cmp	r2, r3
 800615a:	d903      	bls.n	8006164 <xTaskPriorityDisinherit+0xa4>
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006160:	4a0c      	ldr	r2, [pc, #48]	; (8006194 <xTaskPriorityDisinherit+0xd4>)
 8006162:	6013      	str	r3, [r2, #0]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4a09      	ldr	r2, [pc, #36]	; (8006198 <xTaskPriorityDisinherit+0xd8>)
 8006172:	441a      	add	r2, r3
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	3304      	adds	r3, #4
 8006178:	4619      	mov	r1, r3
 800617a:	4610      	mov	r0, r2
 800617c:	f7fd fff1 	bl	8004162 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006180:	2301      	movs	r3, #1
 8006182:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006184:	697b      	ldr	r3, [r7, #20]
	}
 8006186:	4618      	mov	r0, r3
 8006188:	3718      	adds	r7, #24
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000a84 	.word	0x20000a84
 8006194:	20000f60 	.word	0x20000f60
 8006198:	20000a88 	.word	0x20000a88

0800619c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80061aa:	2301      	movs	r3, #1
 80061ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d06a      	beq.n	800628a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80061b4:	69bb      	ldr	r3, [r7, #24]
 80061b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10a      	bne.n	80061d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80061bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061c0:	f383 8811 	msr	BASEPRI, r3
 80061c4:	f3bf 8f6f 	isb	sy
 80061c8:	f3bf 8f4f 	dsb	sy
 80061cc:	60fb      	str	r3, [r7, #12]
}
 80061ce:	bf00      	nop
 80061d0:	e7fe      	b.n	80061d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d902      	bls.n	80061e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	61fb      	str	r3, [r7, #28]
 80061e0:	e002      	b.n	80061e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80061e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80061e8:	69bb      	ldr	r3, [r7, #24]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d04b      	beq.n	800628a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d146      	bne.n	800628a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80061fc:	4b25      	ldr	r3, [pc, #148]	; (8006294 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	429a      	cmp	r2, r3
 8006204:	d10a      	bne.n	800621c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	60bb      	str	r3, [r7, #8]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006222:	69bb      	ldr	r3, [r7, #24]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	db04      	blt.n	800623a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006236:	69bb      	ldr	r3, [r7, #24]
 8006238:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	6959      	ldr	r1, [r3, #20]
 800623e:	693a      	ldr	r2, [r7, #16]
 8006240:	4613      	mov	r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	4413      	add	r3, r2
 8006246:	009b      	lsls	r3, r3, #2
 8006248:	4a13      	ldr	r2, [pc, #76]	; (8006298 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800624a:	4413      	add	r3, r2
 800624c:	4299      	cmp	r1, r3
 800624e:	d11c      	bne.n	800628a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	3304      	adds	r3, #4
 8006254:	4618      	mov	r0, r3
 8006256:	f7fd ffe1 	bl	800421c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800625e:	4b0f      	ldr	r3, [pc, #60]	; (800629c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d903      	bls.n	800626e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	4a0c      	ldr	r2, [pc, #48]	; (800629c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800626c:	6013      	str	r3, [r2, #0]
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006272:	4613      	mov	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	4413      	add	r3, r2
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	4a07      	ldr	r2, [pc, #28]	; (8006298 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800627c:	441a      	add	r2, r3
 800627e:	69bb      	ldr	r3, [r7, #24]
 8006280:	3304      	adds	r3, #4
 8006282:	4619      	mov	r1, r3
 8006284:	4610      	mov	r0, r2
 8006286:	f7fd ff6c 	bl	8004162 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800628a:	bf00      	nop
 800628c:	3720      	adds	r7, #32
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000a84 	.word	0x20000a84
 8006298:	20000a88 	.word	0x20000a88
 800629c:	20000f60 	.word	0x20000f60

080062a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80062a4:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d004      	beq.n	80062b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80062ac:	4b05      	ldr	r3, [pc, #20]	; (80062c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062b2:	3201      	adds	r2, #1
 80062b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80062b6:	4b03      	ldr	r3, [pc, #12]	; (80062c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80062b8:	681b      	ldr	r3, [r3, #0]
	}
 80062ba:	4618      	mov	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	20000a84 	.word	0x20000a84

080062c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80062d2:	4b21      	ldr	r3, [pc, #132]	; (8006358 <prvAddCurrentTaskToDelayedList+0x90>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062d8:	4b20      	ldr	r3, [pc, #128]	; (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fd ff9c 	bl	800421c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ea:	d10a      	bne.n	8006302 <prvAddCurrentTaskToDelayedList+0x3a>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d007      	beq.n	8006302 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062f2:	4b1a      	ldr	r3, [pc, #104]	; (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	3304      	adds	r3, #4
 80062f8:	4619      	mov	r1, r3
 80062fa:	4819      	ldr	r0, [pc, #100]	; (8006360 <prvAddCurrentTaskToDelayedList+0x98>)
 80062fc:	f7fd ff31 	bl	8004162 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006300:	e026      	b.n	8006350 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	4413      	add	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800630a:	4b14      	ldr	r3, [pc, #80]	; (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68ba      	ldr	r2, [r7, #8]
 8006310:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	429a      	cmp	r2, r3
 8006318:	d209      	bcs.n	800632e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800631a:	4b12      	ldr	r3, [pc, #72]	; (8006364 <prvAddCurrentTaskToDelayedList+0x9c>)
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	4b0f      	ldr	r3, [pc, #60]	; (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f7fd ff3f 	bl	80041aa <vListInsert>
}
 800632c:	e010      	b.n	8006350 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800632e:	4b0e      	ldr	r3, [pc, #56]	; (8006368 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b0a      	ldr	r3, [pc, #40]	; (800635c <prvAddCurrentTaskToDelayedList+0x94>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f7fd ff35 	bl	80041aa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006340:	4b0a      	ldr	r3, [pc, #40]	; (800636c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	68ba      	ldr	r2, [r7, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	d202      	bcs.n	8006350 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800634a:	4a08      	ldr	r2, [pc, #32]	; (800636c <prvAddCurrentTaskToDelayedList+0xa4>)
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	6013      	str	r3, [r2, #0]
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	20000f5c 	.word	0x20000f5c
 800635c:	20000a84 	.word	0x20000a84
 8006360:	20000f44 	.word	0x20000f44
 8006364:	20000f14 	.word	0x20000f14
 8006368:	20000f10 	.word	0x20000f10
 800636c:	20000f78 	.word	0x20000f78

08006370 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b08a      	sub	sp, #40	; 0x28
 8006374:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006376:	2300      	movs	r3, #0
 8006378:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800637a:	f000 fb07 	bl	800698c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800637e:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <xTimerCreateTimerTask+0x80>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d021      	beq.n	80063ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006386:	2300      	movs	r3, #0
 8006388:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800638e:	1d3a      	adds	r2, r7, #4
 8006390:	f107 0108 	add.w	r1, r7, #8
 8006394:	f107 030c 	add.w	r3, r7, #12
 8006398:	4618      	mov	r0, r3
 800639a:	f7fd fe9b 	bl	80040d4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	9202      	str	r2, [sp, #8]
 80063a6:	9301      	str	r3, [sp, #4]
 80063a8:	2302      	movs	r3, #2
 80063aa:	9300      	str	r3, [sp, #0]
 80063ac:	2300      	movs	r3, #0
 80063ae:	460a      	mov	r2, r1
 80063b0:	4910      	ldr	r1, [pc, #64]	; (80063f4 <xTimerCreateTimerTask+0x84>)
 80063b2:	4811      	ldr	r0, [pc, #68]	; (80063f8 <xTimerCreateTimerTask+0x88>)
 80063b4:	f7fe ffb6 	bl	8005324 <xTaskCreateStatic>
 80063b8:	4603      	mov	r3, r0
 80063ba:	4a10      	ldr	r2, [pc, #64]	; (80063fc <xTimerCreateTimerTask+0x8c>)
 80063bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80063be:	4b0f      	ldr	r3, [pc, #60]	; (80063fc <xTimerCreateTimerTask+0x8c>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d001      	beq.n	80063ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80063c6:	2301      	movs	r3, #1
 80063c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10a      	bne.n	80063e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	613b      	str	r3, [r7, #16]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80063e6:	697b      	ldr	r3, [r7, #20]
}
 80063e8:	4618      	mov	r0, r3
 80063ea:	3718      	adds	r7, #24
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bd80      	pop	{r7, pc}
 80063f0:	20000fb4 	.word	0x20000fb4
 80063f4:	0800a4a4 	.word	0x0800a4a4
 80063f8:	08006535 	.word	0x08006535
 80063fc:	20000fb8 	.word	0x20000fb8

08006400 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	; 0x28
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800640e:	2300      	movs	r3, #0
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10a      	bne.n	800642e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	623b      	str	r3, [r7, #32]
}
 800642a:	bf00      	nop
 800642c:	e7fe      	b.n	800642c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800642e:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <xTimerGenericCommand+0x98>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d02a      	beq.n	800648c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	2b05      	cmp	r3, #5
 8006446:	dc18      	bgt.n	800647a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006448:	f7ff fdb4 	bl	8005fb4 <xTaskGetSchedulerState>
 800644c:	4603      	mov	r3, r0
 800644e:	2b02      	cmp	r3, #2
 8006450:	d109      	bne.n	8006466 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006452:	4b11      	ldr	r3, [pc, #68]	; (8006498 <xTimerGenericCommand+0x98>)
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	f107 0110 	add.w	r1, r7, #16
 800645a:	2300      	movs	r3, #0
 800645c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800645e:	f7fe f8fb 	bl	8004658 <xQueueGenericSend>
 8006462:	6278      	str	r0, [r7, #36]	; 0x24
 8006464:	e012      	b.n	800648c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006466:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <xTimerGenericCommand+0x98>)
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	f107 0110 	add.w	r1, r7, #16
 800646e:	2300      	movs	r3, #0
 8006470:	2200      	movs	r2, #0
 8006472:	f7fe f8f1 	bl	8004658 <xQueueGenericSend>
 8006476:	6278      	str	r0, [r7, #36]	; 0x24
 8006478:	e008      	b.n	800648c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <xTimerGenericCommand+0x98>)
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	f107 0110 	add.w	r1, r7, #16
 8006482:	2300      	movs	r3, #0
 8006484:	683a      	ldr	r2, [r7, #0]
 8006486:	f7fe f9e5 	bl	8004854 <xQueueGenericSendFromISR>
 800648a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800648e:	4618      	mov	r0, r3
 8006490:	3728      	adds	r7, #40	; 0x28
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000fb4 	.word	0x20000fb4

0800649c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af02      	add	r7, sp, #8
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064a6:	4b22      	ldr	r3, [pc, #136]	; (8006530 <prvProcessExpiredTimer+0x94>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	3304      	adds	r3, #4
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7fd feb1 	bl	800421c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d022      	beq.n	800650e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	699a      	ldr	r2, [r3, #24]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	18d1      	adds	r1, r2, r3
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	6978      	ldr	r0, [r7, #20]
 80064d6:	f000 f8d1 	bl	800667c <prvInsertTimerInActiveList>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d01f      	beq.n	8006520 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064e0:	2300      	movs	r3, #0
 80064e2:	9300      	str	r3, [sp, #0]
 80064e4:	2300      	movs	r3, #0
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	2100      	movs	r1, #0
 80064ea:	6978      	ldr	r0, [r7, #20]
 80064ec:	f7ff ff88 	bl	8006400 <xTimerGenericCommand>
 80064f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d113      	bne.n	8006520 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80064f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fc:	f383 8811 	msr	BASEPRI, r3
 8006500:	f3bf 8f6f 	isb	sy
 8006504:	f3bf 8f4f 	dsb	sy
 8006508:	60fb      	str	r3, [r7, #12]
}
 800650a:	bf00      	nop
 800650c:	e7fe      	b.n	800650c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006514:	f023 0301 	bic.w	r3, r3, #1
 8006518:	b2da      	uxtb	r2, r3
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	6978      	ldr	r0, [r7, #20]
 8006526:	4798      	blx	r3
}
 8006528:	bf00      	nop
 800652a:	3718      	adds	r7, #24
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	20000fac 	.word	0x20000fac

08006534 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800653c:	f107 0308 	add.w	r3, r7, #8
 8006540:	4618      	mov	r0, r3
 8006542:	f000 f857 	bl	80065f4 <prvGetNextExpireTime>
 8006546:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4619      	mov	r1, r3
 800654c:	68f8      	ldr	r0, [r7, #12]
 800654e:	f000 f803 	bl	8006558 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006552:	f000 f8d5 	bl	8006700 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006556:	e7f1      	b.n	800653c <prvTimerTask+0x8>

08006558 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006562:	f7ff f93b 	bl	80057dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006566:	f107 0308 	add.w	r3, r7, #8
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f866 	bl	800663c <prvSampleTimeNow>
 8006570:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d130      	bne.n	80065da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10a      	bne.n	8006594 <prvProcessTimerOrBlockTask+0x3c>
 800657e:	687a      	ldr	r2, [r7, #4]
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	429a      	cmp	r2, r3
 8006584:	d806      	bhi.n	8006594 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006586:	f7ff f937 	bl	80057f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800658a:	68f9      	ldr	r1, [r7, #12]
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f7ff ff85 	bl	800649c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006592:	e024      	b.n	80065de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d008      	beq.n	80065ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800659a:	4b13      	ldr	r3, [pc, #76]	; (80065e8 <prvProcessTimerOrBlockTask+0x90>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d101      	bne.n	80065a8 <prvProcessTimerOrBlockTask+0x50>
 80065a4:	2301      	movs	r3, #1
 80065a6:	e000      	b.n	80065aa <prvProcessTimerOrBlockTask+0x52>
 80065a8:	2300      	movs	r3, #0
 80065aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80065ac:	4b0f      	ldr	r3, [pc, #60]	; (80065ec <prvProcessTimerOrBlockTask+0x94>)
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	687a      	ldr	r2, [r7, #4]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	1ad3      	subs	r3, r2, r3
 80065b6:	683a      	ldr	r2, [r7, #0]
 80065b8:	4619      	mov	r1, r3
 80065ba:	f7fe fe7f 	bl	80052bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80065be:	f7ff f91b 	bl	80057f8 <xTaskResumeAll>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d10a      	bne.n	80065de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80065c8:	4b09      	ldr	r3, [pc, #36]	; (80065f0 <prvProcessTimerOrBlockTask+0x98>)
 80065ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80065ce:	601a      	str	r2, [r3, #0]
 80065d0:	f3bf 8f4f 	dsb	sy
 80065d4:	f3bf 8f6f 	isb	sy
}
 80065d8:	e001      	b.n	80065de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80065da:	f7ff f90d 	bl	80057f8 <xTaskResumeAll>
}
 80065de:	bf00      	nop
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	20000fb0 	.word	0x20000fb0
 80065ec:	20000fb4 	.word	0x20000fb4
 80065f0:	e000ed04 	.word	0xe000ed04

080065f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80065f4:	b480      	push	{r7}
 80065f6:	b085      	sub	sp, #20
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80065fc:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <prvGetNextExpireTime+0x44>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <prvGetNextExpireTime+0x16>
 8006606:	2201      	movs	r2, #1
 8006608:	e000      	b.n	800660c <prvGetNextExpireTime+0x18>
 800660a:	2200      	movs	r2, #0
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d105      	bne.n	8006624 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006618:	4b07      	ldr	r3, [pc, #28]	; (8006638 <prvGetNextExpireTime+0x44>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	e001      	b.n	8006628 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006628:	68fb      	ldr	r3, [r7, #12]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	20000fac 	.word	0x20000fac

0800663c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006644:	f7ff f976 	bl	8005934 <xTaskGetTickCount>
 8006648:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800664a:	4b0b      	ldr	r3, [pc, #44]	; (8006678 <prvSampleTimeNow+0x3c>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68fa      	ldr	r2, [r7, #12]
 8006650:	429a      	cmp	r2, r3
 8006652:	d205      	bcs.n	8006660 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006654:	f000 f936 	bl	80068c4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e002      	b.n	8006666 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006666:	4a04      	ldr	r2, [pc, #16]	; (8006678 <prvSampleTimeNow+0x3c>)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800666c:	68fb      	ldr	r3, [r7, #12]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	20000fbc 	.word	0x20000fbc

0800667c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b086      	sub	sp, #24
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	607a      	str	r2, [r7, #4]
 8006688:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800668a:	2300      	movs	r3, #0
 800668c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	68ba      	ldr	r2, [r7, #8]
 8006692:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	68fa      	ldr	r2, [r7, #12]
 8006698:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800669a:	68ba      	ldr	r2, [r7, #8]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d812      	bhi.n	80066c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	1ad2      	subs	r2, r2, r3
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d302      	bcc.n	80066b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80066b0:	2301      	movs	r3, #1
 80066b2:	617b      	str	r3, [r7, #20]
 80066b4:	e01b      	b.n	80066ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80066b6:	4b10      	ldr	r3, [pc, #64]	; (80066f8 <prvInsertTimerInActiveList+0x7c>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3304      	adds	r3, #4
 80066be:	4619      	mov	r1, r3
 80066c0:	4610      	mov	r0, r2
 80066c2:	f7fd fd72 	bl	80041aa <vListInsert>
 80066c6:	e012      	b.n	80066ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d206      	bcs.n	80066de <prvInsertTimerInActiveList+0x62>
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d302      	bcc.n	80066de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80066d8:	2301      	movs	r3, #1
 80066da:	617b      	str	r3, [r7, #20]
 80066dc:	e007      	b.n	80066ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066de:	4b07      	ldr	r3, [pc, #28]	; (80066fc <prvInsertTimerInActiveList+0x80>)
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	3304      	adds	r3, #4
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7fd fd5e 	bl	80041aa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80066ee:	697b      	ldr	r3, [r7, #20]
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3718      	adds	r7, #24
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	20000fb0 	.word	0x20000fb0
 80066fc:	20000fac 	.word	0x20000fac

08006700 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b08e      	sub	sp, #56	; 0x38
 8006704:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006706:	e0ca      	b.n	800689e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2b00      	cmp	r3, #0
 800670c:	da18      	bge.n	8006740 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800670e:	1d3b      	adds	r3, r7, #4
 8006710:	3304      	adds	r3, #4
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800671a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800671e:	f383 8811 	msr	BASEPRI, r3
 8006722:	f3bf 8f6f 	isb	sy
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	61fb      	str	r3, [r7, #28]
}
 800672c:	bf00      	nop
 800672e:	e7fe      	b.n	800672e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006736:	6850      	ldr	r0, [r2, #4]
 8006738:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800673a:	6892      	ldr	r2, [r2, #8]
 800673c:	4611      	mov	r1, r2
 800673e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	f2c0 80aa 	blt.w	800689c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d004      	beq.n	800675e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006756:	3304      	adds	r3, #4
 8006758:	4618      	mov	r0, r3
 800675a:	f7fd fd5f 	bl	800421c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800675e:	463b      	mov	r3, r7
 8006760:	4618      	mov	r0, r3
 8006762:	f7ff ff6b 	bl	800663c <prvSampleTimeNow>
 8006766:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b09      	cmp	r3, #9
 800676c:	f200 8097 	bhi.w	800689e <prvProcessReceivedCommands+0x19e>
 8006770:	a201      	add	r2, pc, #4	; (adr r2, 8006778 <prvProcessReceivedCommands+0x78>)
 8006772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006776:	bf00      	nop
 8006778:	080067a1 	.word	0x080067a1
 800677c:	080067a1 	.word	0x080067a1
 8006780:	080067a1 	.word	0x080067a1
 8006784:	08006815 	.word	0x08006815
 8006788:	08006829 	.word	0x08006829
 800678c:	08006873 	.word	0x08006873
 8006790:	080067a1 	.word	0x080067a1
 8006794:	080067a1 	.word	0x080067a1
 8006798:	08006815 	.word	0x08006815
 800679c:	08006829 	.word	0x08006829
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067a6:	f043 0301 	orr.w	r3, r3, #1
 80067aa:	b2da      	uxtb	r2, r3
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80067b2:	68ba      	ldr	r2, [r7, #8]
 80067b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	18d1      	adds	r1, r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067c0:	f7ff ff5c 	bl	800667c <prvInsertTimerInActiveList>
 80067c4:	4603      	mov	r3, r0
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d069      	beq.n	800689e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80067ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80067d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80067d8:	f003 0304 	and.w	r3, r3, #4
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d05e      	beq.n	800689e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	441a      	add	r2, r3
 80067e8:	2300      	movs	r3, #0
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	2100      	movs	r1, #0
 80067f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f2:	f7ff fe05 	bl	8006400 <xTimerGenericCommand>
 80067f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d14f      	bne.n	800689e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	61bb      	str	r3, [r7, #24]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006816:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800681a:	f023 0301 	bic.w	r3, r3, #1
 800681e:	b2da      	uxtb	r2, r3
 8006820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006822:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006826:	e03a      	b.n	800689e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800682a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	b2da      	uxtb	r2, r3
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800683a:	68ba      	ldr	r2, [r7, #8]
 800683c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006842:	699b      	ldr	r3, [r3, #24]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10a      	bne.n	800685e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	617b      	str	r3, [r7, #20]
}
 800685a:	bf00      	nop
 800685c:	e7fe      	b.n	800685c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800685e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006864:	18d1      	adds	r1, r2, r3
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800686a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800686c:	f7ff ff06 	bl	800667c <prvInsertTimerInActiveList>
					break;
 8006870:	e015      	b.n	800689e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006874:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006878:	f003 0302 	and.w	r3, r3, #2
 800687c:	2b00      	cmp	r3, #0
 800687e:	d103      	bne.n	8006888 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006882:	f000 fbdd 	bl	8007040 <vPortFree>
 8006886:	e00a      	b.n	800689e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800688a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	b2da      	uxtb	r2, r3
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800689a:	e000      	b.n	800689e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800689c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800689e:	4b08      	ldr	r3, [pc, #32]	; (80068c0 <prvProcessReceivedCommands+0x1c0>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	1d39      	adds	r1, r7, #4
 80068a4:	2200      	movs	r2, #0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7fe f8fc 	bl	8004aa4 <xQueueReceive>
 80068ac:	4603      	mov	r3, r0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f47f af2a 	bne.w	8006708 <prvProcessReceivedCommands+0x8>
	}
}
 80068b4:	bf00      	nop
 80068b6:	bf00      	nop
 80068b8:	3730      	adds	r7, #48	; 0x30
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
 80068be:	bf00      	nop
 80068c0:	20000fb4 	.word	0x20000fb4

080068c4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80068ca:	e048      	b.n	800695e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80068cc:	4b2d      	ldr	r3, [pc, #180]	; (8006984 <prvSwitchTimerLists+0xc0>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68db      	ldr	r3, [r3, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068d6:	4b2b      	ldr	r3, [pc, #172]	; (8006984 <prvSwitchTimerLists+0xc0>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	68db      	ldr	r3, [r3, #12]
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3304      	adds	r3, #4
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7fd fc99 	bl	800421c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6a1b      	ldr	r3, [r3, #32]
 80068ee:	68f8      	ldr	r0, [r7, #12]
 80068f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d02e      	beq.n	800695e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	699b      	ldr	r3, [r3, #24]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	4413      	add	r3, r2
 8006908:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	429a      	cmp	r2, r3
 8006910:	d90e      	bls.n	8006930 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	68ba      	ldr	r2, [r7, #8]
 8006916:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	68fa      	ldr	r2, [r7, #12]
 800691c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800691e:	4b19      	ldr	r3, [pc, #100]	; (8006984 <prvSwitchTimerLists+0xc0>)
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	3304      	adds	r3, #4
 8006926:	4619      	mov	r1, r3
 8006928:	4610      	mov	r0, r2
 800692a:	f7fd fc3e 	bl	80041aa <vListInsert>
 800692e:	e016      	b.n	800695e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006930:	2300      	movs	r3, #0
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	2300      	movs	r3, #0
 8006936:	693a      	ldr	r2, [r7, #16]
 8006938:	2100      	movs	r1, #0
 800693a:	68f8      	ldr	r0, [r7, #12]
 800693c:	f7ff fd60 	bl	8006400 <xTimerGenericCommand>
 8006940:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d10a      	bne.n	800695e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800694c:	f383 8811 	msr	BASEPRI, r3
 8006950:	f3bf 8f6f 	isb	sy
 8006954:	f3bf 8f4f 	dsb	sy
 8006958:	603b      	str	r3, [r7, #0]
}
 800695a:	bf00      	nop
 800695c:	e7fe      	b.n	800695c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800695e:	4b09      	ldr	r3, [pc, #36]	; (8006984 <prvSwitchTimerLists+0xc0>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d1b1      	bne.n	80068cc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006968:	4b06      	ldr	r3, [pc, #24]	; (8006984 <prvSwitchTimerLists+0xc0>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800696e:	4b06      	ldr	r3, [pc, #24]	; (8006988 <prvSwitchTimerLists+0xc4>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a04      	ldr	r2, [pc, #16]	; (8006984 <prvSwitchTimerLists+0xc0>)
 8006974:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006976:	4a04      	ldr	r2, [pc, #16]	; (8006988 <prvSwitchTimerLists+0xc4>)
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	6013      	str	r3, [r2, #0]
}
 800697c:	bf00      	nop
 800697e:	3718      	adds	r7, #24
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20000fac 	.word	0x20000fac
 8006988:	20000fb0 	.word	0x20000fb0

0800698c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006992:	f000 f967 	bl	8006c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006996:	4b15      	ldr	r3, [pc, #84]	; (80069ec <prvCheckForValidListAndQueue+0x60>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d120      	bne.n	80069e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800699e:	4814      	ldr	r0, [pc, #80]	; (80069f0 <prvCheckForValidListAndQueue+0x64>)
 80069a0:	f7fd fbb2 	bl	8004108 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80069a4:	4813      	ldr	r0, [pc, #76]	; (80069f4 <prvCheckForValidListAndQueue+0x68>)
 80069a6:	f7fd fbaf 	bl	8004108 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80069aa:	4b13      	ldr	r3, [pc, #76]	; (80069f8 <prvCheckForValidListAndQueue+0x6c>)
 80069ac:	4a10      	ldr	r2, [pc, #64]	; (80069f0 <prvCheckForValidListAndQueue+0x64>)
 80069ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80069b0:	4b12      	ldr	r3, [pc, #72]	; (80069fc <prvCheckForValidListAndQueue+0x70>)
 80069b2:	4a10      	ldr	r2, [pc, #64]	; (80069f4 <prvCheckForValidListAndQueue+0x68>)
 80069b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80069b6:	2300      	movs	r3, #0
 80069b8:	9300      	str	r3, [sp, #0]
 80069ba:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <prvCheckForValidListAndQueue+0x74>)
 80069bc:	4a11      	ldr	r2, [pc, #68]	; (8006a04 <prvCheckForValidListAndQueue+0x78>)
 80069be:	2110      	movs	r1, #16
 80069c0:	200a      	movs	r0, #10
 80069c2:	f7fd fcbd 	bl	8004340 <xQueueGenericCreateStatic>
 80069c6:	4603      	mov	r3, r0
 80069c8:	4a08      	ldr	r2, [pc, #32]	; (80069ec <prvCheckForValidListAndQueue+0x60>)
 80069ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80069cc:	4b07      	ldr	r3, [pc, #28]	; (80069ec <prvCheckForValidListAndQueue+0x60>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d005      	beq.n	80069e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80069d4:	4b05      	ldr	r3, [pc, #20]	; (80069ec <prvCheckForValidListAndQueue+0x60>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	490b      	ldr	r1, [pc, #44]	; (8006a08 <prvCheckForValidListAndQueue+0x7c>)
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fc1a 	bl	8005214 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069e0:	f000 f970 	bl	8006cc4 <vPortExitCritical>
}
 80069e4:	bf00      	nop
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	20000fb4 	.word	0x20000fb4
 80069f0:	20000f84 	.word	0x20000f84
 80069f4:	20000f98 	.word	0x20000f98
 80069f8:	20000fac 	.word	0x20000fac
 80069fc:	20000fb0 	.word	0x20000fb0
 8006a00:	20001060 	.word	0x20001060
 8006a04:	20000fc0 	.word	0x20000fc0
 8006a08:	0800a4ac 	.word	0x0800a4ac

08006a0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b085      	sub	sp, #20
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3b04      	subs	r3, #4
 8006a1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006a24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	3b04      	subs	r3, #4
 8006a2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	f023 0201 	bic.w	r2, r3, #1
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	3b04      	subs	r3, #4
 8006a3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006a3c:	4a0c      	ldr	r2, [pc, #48]	; (8006a70 <pxPortInitialiseStack+0x64>)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	3b14      	subs	r3, #20
 8006a46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006a48:	687a      	ldr	r2, [r7, #4]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	3b04      	subs	r3, #4
 8006a52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f06f 0202 	mvn.w	r2, #2
 8006a5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	3b20      	subs	r3, #32
 8006a60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006a62:	68fb      	ldr	r3, [r7, #12]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	3714      	adds	r7, #20
 8006a68:	46bd      	mov	sp, r7
 8006a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6e:	4770      	bx	lr
 8006a70:	08006a75 	.word	0x08006a75

08006a74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006a7e:	4b12      	ldr	r3, [pc, #72]	; (8006ac8 <prvTaskExitError+0x54>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a86:	d00a      	beq.n	8006a9e <prvTaskExitError+0x2a>
	__asm volatile
 8006a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a8c:	f383 8811 	msr	BASEPRI, r3
 8006a90:	f3bf 8f6f 	isb	sy
 8006a94:	f3bf 8f4f 	dsb	sy
 8006a98:	60fb      	str	r3, [r7, #12]
}
 8006a9a:	bf00      	nop
 8006a9c:	e7fe      	b.n	8006a9c <prvTaskExitError+0x28>
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	60bb      	str	r3, [r7, #8]
}
 8006ab0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ab2:	bf00      	nop
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0fc      	beq.n	8006ab4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006aba:	bf00      	nop
 8006abc:	bf00      	nop
 8006abe:	3714      	adds	r7, #20
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr
 8006ac8:	2000000c 	.word	0x2000000c
 8006acc:	00000000 	.word	0x00000000

08006ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ad0:	4b07      	ldr	r3, [pc, #28]	; (8006af0 <pxCurrentTCBConst2>)
 8006ad2:	6819      	ldr	r1, [r3, #0]
 8006ad4:	6808      	ldr	r0, [r1, #0]
 8006ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ada:	f380 8809 	msr	PSP, r0
 8006ade:	f3bf 8f6f 	isb	sy
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f380 8811 	msr	BASEPRI, r0
 8006aea:	4770      	bx	lr
 8006aec:	f3af 8000 	nop.w

08006af0 <pxCurrentTCBConst2>:
 8006af0:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006af4:	bf00      	nop
 8006af6:	bf00      	nop

08006af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006af8:	4808      	ldr	r0, [pc, #32]	; (8006b1c <prvPortStartFirstTask+0x24>)
 8006afa:	6800      	ldr	r0, [r0, #0]
 8006afc:	6800      	ldr	r0, [r0, #0]
 8006afe:	f380 8808 	msr	MSP, r0
 8006b02:	f04f 0000 	mov.w	r0, #0
 8006b06:	f380 8814 	msr	CONTROL, r0
 8006b0a:	b662      	cpsie	i
 8006b0c:	b661      	cpsie	f
 8006b0e:	f3bf 8f4f 	dsb	sy
 8006b12:	f3bf 8f6f 	isb	sy
 8006b16:	df00      	svc	0
 8006b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006b1a:	bf00      	nop
 8006b1c:	e000ed08 	.word	0xe000ed08

08006b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006b26:	4b46      	ldr	r3, [pc, #280]	; (8006c40 <xPortStartScheduler+0x120>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a46      	ldr	r2, [pc, #280]	; (8006c44 <xPortStartScheduler+0x124>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d10a      	bne.n	8006b46 <xPortStartScheduler+0x26>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	613b      	str	r3, [r7, #16]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006b46:	4b3e      	ldr	r3, [pc, #248]	; (8006c40 <xPortStartScheduler+0x120>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	4a3f      	ldr	r2, [pc, #252]	; (8006c48 <xPortStartScheduler+0x128>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10a      	bne.n	8006b66 <xPortStartScheduler+0x46>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	60fb      	str	r3, [r7, #12]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006b66:	4b39      	ldr	r3, [pc, #228]	; (8006c4c <xPortStartScheduler+0x12c>)
 8006b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	b2db      	uxtb	r3, r3
 8006b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	22ff      	movs	r2, #255	; 0xff
 8006b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006b80:	78fb      	ldrb	r3, [r7, #3]
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	4b31      	ldr	r3, [pc, #196]	; (8006c50 <xPortStartScheduler+0x130>)
 8006b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006b8e:	4b31      	ldr	r3, [pc, #196]	; (8006c54 <xPortStartScheduler+0x134>)
 8006b90:	2207      	movs	r2, #7
 8006b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006b94:	e009      	b.n	8006baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006b96:	4b2f      	ldr	r3, [pc, #188]	; (8006c54 <xPortStartScheduler+0x134>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	4a2d      	ldr	r2, [pc, #180]	; (8006c54 <xPortStartScheduler+0x134>)
 8006b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ba0:	78fb      	ldrb	r3, [r7, #3]
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	005b      	lsls	r3, r3, #1
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006baa:	78fb      	ldrb	r3, [r7, #3]
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bb2:	2b80      	cmp	r3, #128	; 0x80
 8006bb4:	d0ef      	beq.n	8006b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006bb6:	4b27      	ldr	r3, [pc, #156]	; (8006c54 <xPortStartScheduler+0x134>)
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f1c3 0307 	rsb	r3, r3, #7
 8006bbe:	2b04      	cmp	r3, #4
 8006bc0:	d00a      	beq.n	8006bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	60bb      	str	r3, [r7, #8]
}
 8006bd4:	bf00      	nop
 8006bd6:	e7fe      	b.n	8006bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006bd8:	4b1e      	ldr	r3, [pc, #120]	; (8006c54 <xPortStartScheduler+0x134>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	4a1d      	ldr	r2, [pc, #116]	; (8006c54 <xPortStartScheduler+0x134>)
 8006be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006be2:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <xPortStartScheduler+0x134>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006bea:	4a1a      	ldr	r2, [pc, #104]	; (8006c54 <xPortStartScheduler+0x134>)
 8006bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	b2da      	uxtb	r2, r3
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006bf6:	4b18      	ldr	r3, [pc, #96]	; (8006c58 <xPortStartScheduler+0x138>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <xPortStartScheduler+0x138>)
 8006bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <xPortStartScheduler+0x138>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a14      	ldr	r2, [pc, #80]	; (8006c58 <xPortStartScheduler+0x138>)
 8006c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006c0e:	f000 f8dd 	bl	8006dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006c12:	4b12      	ldr	r3, [pc, #72]	; (8006c5c <xPortStartScheduler+0x13c>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006c18:	f000 f8fc 	bl	8006e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006c1c:	4b10      	ldr	r3, [pc, #64]	; (8006c60 <xPortStartScheduler+0x140>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a0f      	ldr	r2, [pc, #60]	; (8006c60 <xPortStartScheduler+0x140>)
 8006c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006c28:	f7ff ff66 	bl	8006af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006c2c:	f7fe ff4c 	bl	8005ac8 <vTaskSwitchContext>
	prvTaskExitError();
 8006c30:	f7ff ff20 	bl	8006a74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006c34:	2300      	movs	r3, #0
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3718      	adds	r7, #24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	e000ed00 	.word	0xe000ed00
 8006c44:	410fc271 	.word	0x410fc271
 8006c48:	410fc270 	.word	0x410fc270
 8006c4c:	e000e400 	.word	0xe000e400
 8006c50:	200010b0 	.word	0x200010b0
 8006c54:	200010b4 	.word	0x200010b4
 8006c58:	e000ed20 	.word	0xe000ed20
 8006c5c:	2000000c 	.word	0x2000000c
 8006c60:	e000ef34 	.word	0xe000ef34

08006c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
	__asm volatile
 8006c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c6e:	f383 8811 	msr	BASEPRI, r3
 8006c72:	f3bf 8f6f 	isb	sy
 8006c76:	f3bf 8f4f 	dsb	sy
 8006c7a:	607b      	str	r3, [r7, #4]
}
 8006c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <vPortEnterCritical+0x58>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	3301      	adds	r3, #1
 8006c84:	4a0d      	ldr	r2, [pc, #52]	; (8006cbc <vPortEnterCritical+0x58>)
 8006c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006c88:	4b0c      	ldr	r3, [pc, #48]	; (8006cbc <vPortEnterCritical+0x58>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b01      	cmp	r3, #1
 8006c8e:	d10f      	bne.n	8006cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006c90:	4b0b      	ldr	r3, [pc, #44]	; (8006cc0 <vPortEnterCritical+0x5c>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d00a      	beq.n	8006cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	603b      	str	r3, [r7, #0]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <vPortEnterCritical+0x4a>
	}
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	2000000c 	.word	0x2000000c
 8006cc0:	e000ed04 	.word	0xe000ed04

08006cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006cca:	4b12      	ldr	r3, [pc, #72]	; (8006d14 <vPortExitCritical+0x50>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10a      	bne.n	8006ce8 <vPortExitCritical+0x24>
	__asm volatile
 8006cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd6:	f383 8811 	msr	BASEPRI, r3
 8006cda:	f3bf 8f6f 	isb	sy
 8006cde:	f3bf 8f4f 	dsb	sy
 8006ce2:	607b      	str	r3, [r7, #4]
}
 8006ce4:	bf00      	nop
 8006ce6:	e7fe      	b.n	8006ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006ce8:	4b0a      	ldr	r3, [pc, #40]	; (8006d14 <vPortExitCritical+0x50>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3b01      	subs	r3, #1
 8006cee:	4a09      	ldr	r2, [pc, #36]	; (8006d14 <vPortExitCritical+0x50>)
 8006cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006cf2:	4b08      	ldr	r3, [pc, #32]	; (8006d14 <vPortExitCritical+0x50>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d105      	bne.n	8006d06 <vPortExitCritical+0x42>
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	f383 8811 	msr	BASEPRI, r3
}
 8006d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006d06:	bf00      	nop
 8006d08:	370c      	adds	r7, #12
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr
 8006d12:	bf00      	nop
 8006d14:	2000000c 	.word	0x2000000c
	...

08006d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006d20:	f3ef 8009 	mrs	r0, PSP
 8006d24:	f3bf 8f6f 	isb	sy
 8006d28:	4b15      	ldr	r3, [pc, #84]	; (8006d80 <pxCurrentTCBConst>)
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	f01e 0f10 	tst.w	lr, #16
 8006d30:	bf08      	it	eq
 8006d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3a:	6010      	str	r0, [r2, #0]
 8006d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006d44:	f380 8811 	msr	BASEPRI, r0
 8006d48:	f3bf 8f4f 	dsb	sy
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f7fe feba 	bl	8005ac8 <vTaskSwitchContext>
 8006d54:	f04f 0000 	mov.w	r0, #0
 8006d58:	f380 8811 	msr	BASEPRI, r0
 8006d5c:	bc09      	pop	{r0, r3}
 8006d5e:	6819      	ldr	r1, [r3, #0]
 8006d60:	6808      	ldr	r0, [r1, #0]
 8006d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d66:	f01e 0f10 	tst.w	lr, #16
 8006d6a:	bf08      	it	eq
 8006d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006d70:	f380 8809 	msr	PSP, r0
 8006d74:	f3bf 8f6f 	isb	sy
 8006d78:	4770      	bx	lr
 8006d7a:	bf00      	nop
 8006d7c:	f3af 8000 	nop.w

08006d80 <pxCurrentTCBConst>:
 8006d80:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006d84:	bf00      	nop
 8006d86:	bf00      	nop

08006d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	607b      	str	r3, [r7, #4]
}
 8006da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006da2:	f7fe fdd7 	bl	8005954 <xTaskIncrementTick>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d003      	beq.n	8006db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006dac:	4b06      	ldr	r3, [pc, #24]	; (8006dc8 <xPortSysTickHandler+0x40>)
 8006dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	2300      	movs	r3, #0
 8006db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	f383 8811 	msr	BASEPRI, r3
}
 8006dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006dc0:	bf00      	nop
 8006dc2:	3708      	adds	r7, #8
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006dd0:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <vPortSetupTimerInterrupt+0x34>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006dd6:	4b0b      	ldr	r3, [pc, #44]	; (8006e04 <vPortSetupTimerInterrupt+0x38>)
 8006dd8:	2200      	movs	r2, #0
 8006dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <vPortSetupTimerInterrupt+0x3c>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a0a      	ldr	r2, [pc, #40]	; (8006e0c <vPortSetupTimerInterrupt+0x40>)
 8006de2:	fba2 2303 	umull	r2, r3, r2, r3
 8006de6:	099b      	lsrs	r3, r3, #6
 8006de8:	4a09      	ldr	r2, [pc, #36]	; (8006e10 <vPortSetupTimerInterrupt+0x44>)
 8006dea:	3b01      	subs	r3, #1
 8006dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006dee:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <vPortSetupTimerInterrupt+0x34>)
 8006df0:	2207      	movs	r2, #7
 8006df2:	601a      	str	r2, [r3, #0]
}
 8006df4:	bf00      	nop
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
 8006dfe:	bf00      	nop
 8006e00:	e000e010 	.word	0xe000e010
 8006e04:	e000e018 	.word	0xe000e018
 8006e08:	20000000 	.word	0x20000000
 8006e0c:	10624dd3 	.word	0x10624dd3
 8006e10:	e000e014 	.word	0xe000e014

08006e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006e24 <vPortEnableVFP+0x10>
 8006e18:	6801      	ldr	r1, [r0, #0]
 8006e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006e1e:	6001      	str	r1, [r0, #0]
 8006e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006e22:	bf00      	nop
 8006e24:	e000ed88 	.word	0xe000ed88

08006e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006e2e:	f3ef 8305 	mrs	r3, IPSR
 8006e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2b0f      	cmp	r3, #15
 8006e38:	d914      	bls.n	8006e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006e3a:	4a17      	ldr	r2, [pc, #92]	; (8006e98 <vPortValidateInterruptPriority+0x70>)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	781b      	ldrb	r3, [r3, #0]
 8006e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006e44:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <vPortValidateInterruptPriority+0x74>)
 8006e46:	781b      	ldrb	r3, [r3, #0]
 8006e48:	7afa      	ldrb	r2, [r7, #11]
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d20a      	bcs.n	8006e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	607b      	str	r3, [r7, #4]
}
 8006e60:	bf00      	nop
 8006e62:	e7fe      	b.n	8006e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006e64:	4b0e      	ldr	r3, [pc, #56]	; (8006ea0 <vPortValidateInterruptPriority+0x78>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006e6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ea4 <vPortValidateInterruptPriority+0x7c>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d90a      	bls.n	8006e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e78:	f383 8811 	msr	BASEPRI, r3
 8006e7c:	f3bf 8f6f 	isb	sy
 8006e80:	f3bf 8f4f 	dsb	sy
 8006e84:	603b      	str	r3, [r7, #0]
}
 8006e86:	bf00      	nop
 8006e88:	e7fe      	b.n	8006e88 <vPortValidateInterruptPriority+0x60>
	}
 8006e8a:	bf00      	nop
 8006e8c:	3714      	adds	r7, #20
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	e000e3f0 	.word	0xe000e3f0
 8006e9c:	200010b0 	.word	0x200010b0
 8006ea0:	e000ed0c 	.word	0xe000ed0c
 8006ea4:	200010b4 	.word	0x200010b4

08006ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b08a      	sub	sp, #40	; 0x28
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006eb4:	f7fe fc92 	bl	80057dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006eb8:	4b5b      	ldr	r3, [pc, #364]	; (8007028 <pvPortMalloc+0x180>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d101      	bne.n	8006ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006ec0:	f000 f920 	bl	8007104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006ec4:	4b59      	ldr	r3, [pc, #356]	; (800702c <pvPortMalloc+0x184>)
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	4013      	ands	r3, r2
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f040 8093 	bne.w	8006ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d01d      	beq.n	8006f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006ed8:	2208      	movs	r2, #8
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4413      	add	r3, r2
 8006ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f003 0307 	and.w	r3, r3, #7
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d014      	beq.n	8006f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f023 0307 	bic.w	r3, r3, #7
 8006ef0:	3308      	adds	r3, #8
 8006ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00a      	beq.n	8006f14 <pvPortMalloc+0x6c>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	617b      	str	r3, [r7, #20]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d06e      	beq.n	8006ff8 <pvPortMalloc+0x150>
 8006f1a:	4b45      	ldr	r3, [pc, #276]	; (8007030 <pvPortMalloc+0x188>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	429a      	cmp	r2, r3
 8006f22:	d869      	bhi.n	8006ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006f24:	4b43      	ldr	r3, [pc, #268]	; (8007034 <pvPortMalloc+0x18c>)
 8006f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006f28:	4b42      	ldr	r3, [pc, #264]	; (8007034 <pvPortMalloc+0x18c>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f2e:	e004      	b.n	8006f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	429a      	cmp	r2, r3
 8006f42:	d903      	bls.n	8006f4c <pvPortMalloc+0xa4>
 8006f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f1      	bne.n	8006f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006f4c:	4b36      	ldr	r3, [pc, #216]	; (8007028 <pvPortMalloc+0x180>)
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d050      	beq.n	8006ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006f56:	6a3b      	ldr	r3, [r7, #32]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	4413      	add	r3, r2
 8006f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	6a3b      	ldr	r3, [r7, #32]
 8006f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	685a      	ldr	r2, [r3, #4]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	2308      	movs	r3, #8
 8006f72:	005b      	lsls	r3, r3, #1
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d91f      	bls.n	8006fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	4413      	add	r3, r2
 8006f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	f003 0307 	and.w	r3, r3, #7
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8006f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8e:	f383 8811 	msr	BASEPRI, r3
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	f3bf 8f4f 	dsb	sy
 8006f9a:	613b      	str	r3, [r7, #16]
}
 8006f9c:	bf00      	nop
 8006f9e:	e7fe      	b.n	8006f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa2:	685a      	ldr	r2, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	1ad2      	subs	r2, r2, r3
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006fb2:	69b8      	ldr	r0, [r7, #24]
 8006fb4:	f000 f908 	bl	80071c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006fb8:	4b1d      	ldr	r3, [pc, #116]	; (8007030 <pvPortMalloc+0x188>)
 8006fba:	681a      	ldr	r2, [r3, #0]
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	4a1b      	ldr	r2, [pc, #108]	; (8007030 <pvPortMalloc+0x188>)
 8006fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006fc6:	4b1a      	ldr	r3, [pc, #104]	; (8007030 <pvPortMalloc+0x188>)
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	4b1b      	ldr	r3, [pc, #108]	; (8007038 <pvPortMalloc+0x190>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d203      	bcs.n	8006fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006fd2:	4b17      	ldr	r3, [pc, #92]	; (8007030 <pvPortMalloc+0x188>)
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a18      	ldr	r2, [pc, #96]	; (8007038 <pvPortMalloc+0x190>)
 8006fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	4b13      	ldr	r3, [pc, #76]	; (800702c <pvPortMalloc+0x184>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	431a      	orrs	r2, r3
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006fee:	4b13      	ldr	r3, [pc, #76]	; (800703c <pvPortMalloc+0x194>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	4a11      	ldr	r2, [pc, #68]	; (800703c <pvPortMalloc+0x194>)
 8006ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ff8:	f7fe fbfe 	bl	80057f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	f003 0307 	and.w	r3, r3, #7
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00a      	beq.n	800701c <pvPortMalloc+0x174>
	__asm volatile
 8007006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700a:	f383 8811 	msr	BASEPRI, r3
 800700e:	f3bf 8f6f 	isb	sy
 8007012:	f3bf 8f4f 	dsb	sy
 8007016:	60fb      	str	r3, [r7, #12]
}
 8007018:	bf00      	nop
 800701a:	e7fe      	b.n	800701a <pvPortMalloc+0x172>
	return pvReturn;
 800701c:	69fb      	ldr	r3, [r7, #28]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3728      	adds	r7, #40	; 0x28
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	20004cc0 	.word	0x20004cc0
 800702c:	20004cd4 	.word	0x20004cd4
 8007030:	20004cc4 	.word	0x20004cc4
 8007034:	20004cb8 	.word	0x20004cb8
 8007038:	20004cc8 	.word	0x20004cc8
 800703c:	20004ccc 	.word	0x20004ccc

08007040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b086      	sub	sp, #24
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d04d      	beq.n	80070ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007052:	2308      	movs	r3, #8
 8007054:	425b      	negs	r3, r3
 8007056:	697a      	ldr	r2, [r7, #20]
 8007058:	4413      	add	r3, r2
 800705a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	4b24      	ldr	r3, [pc, #144]	; (80070f8 <vPortFree+0xb8>)
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4013      	ands	r3, r2
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10a      	bne.n	8007084 <vPortFree+0x44>
	__asm volatile
 800706e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007072:	f383 8811 	msr	BASEPRI, r3
 8007076:	f3bf 8f6f 	isb	sy
 800707a:	f3bf 8f4f 	dsb	sy
 800707e:	60fb      	str	r3, [r7, #12]
}
 8007080:	bf00      	nop
 8007082:	e7fe      	b.n	8007082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007084:	693b      	ldr	r3, [r7, #16]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d00a      	beq.n	80070a2 <vPortFree+0x62>
	__asm volatile
 800708c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007090:	f383 8811 	msr	BASEPRI, r3
 8007094:	f3bf 8f6f 	isb	sy
 8007098:	f3bf 8f4f 	dsb	sy
 800709c:	60bb      	str	r3, [r7, #8]
}
 800709e:	bf00      	nop
 80070a0:	e7fe      	b.n	80070a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	4b14      	ldr	r3, [pc, #80]	; (80070f8 <vPortFree+0xb8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4013      	ands	r3, r2
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d01e      	beq.n	80070ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d11a      	bne.n	80070ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	685a      	ldr	r2, [r3, #4]
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <vPortFree+0xb8>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	43db      	mvns	r3, r3
 80070c2:	401a      	ands	r2, r3
 80070c4:	693b      	ldr	r3, [r7, #16]
 80070c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80070c8:	f7fe fb88 	bl	80057dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <vPortFree+0xbc>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4413      	add	r3, r2
 80070d6:	4a09      	ldr	r2, [pc, #36]	; (80070fc <vPortFree+0xbc>)
 80070d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80070da:	6938      	ldr	r0, [r7, #16]
 80070dc:	f000 f874 	bl	80071c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80070e0:	4b07      	ldr	r3, [pc, #28]	; (8007100 <vPortFree+0xc0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	3301      	adds	r3, #1
 80070e6:	4a06      	ldr	r2, [pc, #24]	; (8007100 <vPortFree+0xc0>)
 80070e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80070ea:	f7fe fb85 	bl	80057f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80070ee:	bf00      	nop
 80070f0:	3718      	adds	r7, #24
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	20004cd4 	.word	0x20004cd4
 80070fc:	20004cc4 	.word	0x20004cc4
 8007100:	20004cd0 	.word	0x20004cd0

08007104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800710a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800710e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007110:	4b27      	ldr	r3, [pc, #156]	; (80071b0 <prvHeapInit+0xac>)
 8007112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00c      	beq.n	8007138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3307      	adds	r3, #7
 8007122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0307 	bic.w	r3, r3, #7
 800712a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	1ad3      	subs	r3, r2, r3
 8007132:	4a1f      	ldr	r2, [pc, #124]	; (80071b0 <prvHeapInit+0xac>)
 8007134:	4413      	add	r3, r2
 8007136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800713c:	4a1d      	ldr	r2, [pc, #116]	; (80071b4 <prvHeapInit+0xb0>)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007142:	4b1c      	ldr	r3, [pc, #112]	; (80071b4 <prvHeapInit+0xb0>)
 8007144:	2200      	movs	r2, #0
 8007146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	4413      	add	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007150:	2208      	movs	r2, #8
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	1a9b      	subs	r3, r3, r2
 8007156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	f023 0307 	bic.w	r3, r3, #7
 800715e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4a15      	ldr	r2, [pc, #84]	; (80071b8 <prvHeapInit+0xb4>)
 8007164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007166:	4b14      	ldr	r3, [pc, #80]	; (80071b8 <prvHeapInit+0xb4>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2200      	movs	r2, #0
 800716c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800716e:	4b12      	ldr	r3, [pc, #72]	; (80071b8 <prvHeapInit+0xb4>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	1ad2      	subs	r2, r2, r3
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007184:	4b0c      	ldr	r3, [pc, #48]	; (80071b8 <prvHeapInit+0xb4>)
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	4a0a      	ldr	r2, [pc, #40]	; (80071bc <prvHeapInit+0xb8>)
 8007192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	4a09      	ldr	r2, [pc, #36]	; (80071c0 <prvHeapInit+0xbc>)
 800719a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800719c:	4b09      	ldr	r3, [pc, #36]	; (80071c4 <prvHeapInit+0xc0>)
 800719e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80071a2:	601a      	str	r2, [r3, #0]
}
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	200010b8 	.word	0x200010b8
 80071b4:	20004cb8 	.word	0x20004cb8
 80071b8:	20004cc0 	.word	0x20004cc0
 80071bc:	20004cc8 	.word	0x20004cc8
 80071c0:	20004cc4 	.word	0x20004cc4
 80071c4:	20004cd4 	.word	0x20004cd4

080071c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80071d0:	4b28      	ldr	r3, [pc, #160]	; (8007274 <prvInsertBlockIntoFreeList+0xac>)
 80071d2:	60fb      	str	r3, [r7, #12]
 80071d4:	e002      	b.n	80071dc <prvInsertBlockIntoFreeList+0x14>
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	60fb      	str	r3, [r7, #12]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d8f7      	bhi.n	80071d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	685b      	ldr	r3, [r3, #4]
 80071ee:	68ba      	ldr	r2, [r7, #8]
 80071f0:	4413      	add	r3, r2
 80071f2:	687a      	ldr	r2, [r7, #4]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d108      	bne.n	800720a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	441a      	add	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	441a      	add	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	429a      	cmp	r2, r3
 800721c:	d118      	bne.n	8007250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	4b15      	ldr	r3, [pc, #84]	; (8007278 <prvInsertBlockIntoFreeList+0xb0>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	429a      	cmp	r2, r3
 8007228:	d00d      	beq.n	8007246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	441a      	add	r2, r3
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	e008      	b.n	8007258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007246:	4b0c      	ldr	r3, [pc, #48]	; (8007278 <prvInsertBlockIntoFreeList+0xb0>)
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	601a      	str	r2, [r3, #0]
 800724e:	e003      	b.n	8007258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681a      	ldr	r2, [r3, #0]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007258:	68fa      	ldr	r2, [r7, #12]
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	429a      	cmp	r2, r3
 800725e:	d002      	beq.n	8007266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	20004cb8 	.word	0x20004cb8
 8007278:	20004cc0 	.word	0x20004cc0

0800727c <__errno>:
 800727c:	4b01      	ldr	r3, [pc, #4]	; (8007284 <__errno+0x8>)
 800727e:	6818      	ldr	r0, [r3, #0]
 8007280:	4770      	bx	lr
 8007282:	bf00      	nop
 8007284:	20000010 	.word	0x20000010

08007288 <std>:
 8007288:	2300      	movs	r3, #0
 800728a:	b510      	push	{r4, lr}
 800728c:	4604      	mov	r4, r0
 800728e:	e9c0 3300 	strd	r3, r3, [r0]
 8007292:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007296:	6083      	str	r3, [r0, #8]
 8007298:	8181      	strh	r1, [r0, #12]
 800729a:	6643      	str	r3, [r0, #100]	; 0x64
 800729c:	81c2      	strh	r2, [r0, #14]
 800729e:	6183      	str	r3, [r0, #24]
 80072a0:	4619      	mov	r1, r3
 80072a2:	2208      	movs	r2, #8
 80072a4:	305c      	adds	r0, #92	; 0x5c
 80072a6:	f000 f91a 	bl	80074de <memset>
 80072aa:	4b05      	ldr	r3, [pc, #20]	; (80072c0 <std+0x38>)
 80072ac:	6263      	str	r3, [r4, #36]	; 0x24
 80072ae:	4b05      	ldr	r3, [pc, #20]	; (80072c4 <std+0x3c>)
 80072b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80072b2:	4b05      	ldr	r3, [pc, #20]	; (80072c8 <std+0x40>)
 80072b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80072b6:	4b05      	ldr	r3, [pc, #20]	; (80072cc <std+0x44>)
 80072b8:	6224      	str	r4, [r4, #32]
 80072ba:	6323      	str	r3, [r4, #48]	; 0x30
 80072bc:	bd10      	pop	{r4, pc}
 80072be:	bf00      	nop
 80072c0:	080080f9 	.word	0x080080f9
 80072c4:	0800811b 	.word	0x0800811b
 80072c8:	08008153 	.word	0x08008153
 80072cc:	08008177 	.word	0x08008177

080072d0 <_cleanup_r>:
 80072d0:	4901      	ldr	r1, [pc, #4]	; (80072d8 <_cleanup_r+0x8>)
 80072d2:	f000 b8af 	b.w	8007434 <_fwalk_reent>
 80072d6:	bf00      	nop
 80072d8:	08009001 	.word	0x08009001

080072dc <__sfmoreglue>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	2268      	movs	r2, #104	; 0x68
 80072e0:	1e4d      	subs	r5, r1, #1
 80072e2:	4355      	muls	r5, r2
 80072e4:	460e      	mov	r6, r1
 80072e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80072ea:	f000 f921 	bl	8007530 <_malloc_r>
 80072ee:	4604      	mov	r4, r0
 80072f0:	b140      	cbz	r0, 8007304 <__sfmoreglue+0x28>
 80072f2:	2100      	movs	r1, #0
 80072f4:	e9c0 1600 	strd	r1, r6, [r0]
 80072f8:	300c      	adds	r0, #12
 80072fa:	60a0      	str	r0, [r4, #8]
 80072fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007300:	f000 f8ed 	bl	80074de <memset>
 8007304:	4620      	mov	r0, r4
 8007306:	bd70      	pop	{r4, r5, r6, pc}

08007308 <__sfp_lock_acquire>:
 8007308:	4801      	ldr	r0, [pc, #4]	; (8007310 <__sfp_lock_acquire+0x8>)
 800730a:	f000 b8d8 	b.w	80074be <__retarget_lock_acquire_recursive>
 800730e:	bf00      	nop
 8007310:	20004cd9 	.word	0x20004cd9

08007314 <__sfp_lock_release>:
 8007314:	4801      	ldr	r0, [pc, #4]	; (800731c <__sfp_lock_release+0x8>)
 8007316:	f000 b8d3 	b.w	80074c0 <__retarget_lock_release_recursive>
 800731a:	bf00      	nop
 800731c:	20004cd9 	.word	0x20004cd9

08007320 <__sinit_lock_acquire>:
 8007320:	4801      	ldr	r0, [pc, #4]	; (8007328 <__sinit_lock_acquire+0x8>)
 8007322:	f000 b8cc 	b.w	80074be <__retarget_lock_acquire_recursive>
 8007326:	bf00      	nop
 8007328:	20004cda 	.word	0x20004cda

0800732c <__sinit_lock_release>:
 800732c:	4801      	ldr	r0, [pc, #4]	; (8007334 <__sinit_lock_release+0x8>)
 800732e:	f000 b8c7 	b.w	80074c0 <__retarget_lock_release_recursive>
 8007332:	bf00      	nop
 8007334:	20004cda 	.word	0x20004cda

08007338 <__sinit>:
 8007338:	b510      	push	{r4, lr}
 800733a:	4604      	mov	r4, r0
 800733c:	f7ff fff0 	bl	8007320 <__sinit_lock_acquire>
 8007340:	69a3      	ldr	r3, [r4, #24]
 8007342:	b11b      	cbz	r3, 800734c <__sinit+0x14>
 8007344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007348:	f7ff bff0 	b.w	800732c <__sinit_lock_release>
 800734c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007350:	6523      	str	r3, [r4, #80]	; 0x50
 8007352:	4b13      	ldr	r3, [pc, #76]	; (80073a0 <__sinit+0x68>)
 8007354:	4a13      	ldr	r2, [pc, #76]	; (80073a4 <__sinit+0x6c>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	62a2      	str	r2, [r4, #40]	; 0x28
 800735a:	42a3      	cmp	r3, r4
 800735c:	bf04      	itt	eq
 800735e:	2301      	moveq	r3, #1
 8007360:	61a3      	streq	r3, [r4, #24]
 8007362:	4620      	mov	r0, r4
 8007364:	f000 f820 	bl	80073a8 <__sfp>
 8007368:	6060      	str	r0, [r4, #4]
 800736a:	4620      	mov	r0, r4
 800736c:	f000 f81c 	bl	80073a8 <__sfp>
 8007370:	60a0      	str	r0, [r4, #8]
 8007372:	4620      	mov	r0, r4
 8007374:	f000 f818 	bl	80073a8 <__sfp>
 8007378:	2200      	movs	r2, #0
 800737a:	60e0      	str	r0, [r4, #12]
 800737c:	2104      	movs	r1, #4
 800737e:	6860      	ldr	r0, [r4, #4]
 8007380:	f7ff ff82 	bl	8007288 <std>
 8007384:	68a0      	ldr	r0, [r4, #8]
 8007386:	2201      	movs	r2, #1
 8007388:	2109      	movs	r1, #9
 800738a:	f7ff ff7d 	bl	8007288 <std>
 800738e:	68e0      	ldr	r0, [r4, #12]
 8007390:	2202      	movs	r2, #2
 8007392:	2112      	movs	r1, #18
 8007394:	f7ff ff78 	bl	8007288 <std>
 8007398:	2301      	movs	r3, #1
 800739a:	61a3      	str	r3, [r4, #24]
 800739c:	e7d2      	b.n	8007344 <__sinit+0xc>
 800739e:	bf00      	nop
 80073a0:	0800a600 	.word	0x0800a600
 80073a4:	080072d1 	.word	0x080072d1

080073a8 <__sfp>:
 80073a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073aa:	4607      	mov	r7, r0
 80073ac:	f7ff ffac 	bl	8007308 <__sfp_lock_acquire>
 80073b0:	4b1e      	ldr	r3, [pc, #120]	; (800742c <__sfp+0x84>)
 80073b2:	681e      	ldr	r6, [r3, #0]
 80073b4:	69b3      	ldr	r3, [r6, #24]
 80073b6:	b913      	cbnz	r3, 80073be <__sfp+0x16>
 80073b8:	4630      	mov	r0, r6
 80073ba:	f7ff ffbd 	bl	8007338 <__sinit>
 80073be:	3648      	adds	r6, #72	; 0x48
 80073c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80073c4:	3b01      	subs	r3, #1
 80073c6:	d503      	bpl.n	80073d0 <__sfp+0x28>
 80073c8:	6833      	ldr	r3, [r6, #0]
 80073ca:	b30b      	cbz	r3, 8007410 <__sfp+0x68>
 80073cc:	6836      	ldr	r6, [r6, #0]
 80073ce:	e7f7      	b.n	80073c0 <__sfp+0x18>
 80073d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80073d4:	b9d5      	cbnz	r5, 800740c <__sfp+0x64>
 80073d6:	4b16      	ldr	r3, [pc, #88]	; (8007430 <__sfp+0x88>)
 80073d8:	60e3      	str	r3, [r4, #12]
 80073da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80073de:	6665      	str	r5, [r4, #100]	; 0x64
 80073e0:	f000 f86c 	bl	80074bc <__retarget_lock_init_recursive>
 80073e4:	f7ff ff96 	bl	8007314 <__sfp_lock_release>
 80073e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80073ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80073f0:	6025      	str	r5, [r4, #0]
 80073f2:	61a5      	str	r5, [r4, #24]
 80073f4:	2208      	movs	r2, #8
 80073f6:	4629      	mov	r1, r5
 80073f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80073fc:	f000 f86f 	bl	80074de <memset>
 8007400:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007404:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007408:	4620      	mov	r0, r4
 800740a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800740c:	3468      	adds	r4, #104	; 0x68
 800740e:	e7d9      	b.n	80073c4 <__sfp+0x1c>
 8007410:	2104      	movs	r1, #4
 8007412:	4638      	mov	r0, r7
 8007414:	f7ff ff62 	bl	80072dc <__sfmoreglue>
 8007418:	4604      	mov	r4, r0
 800741a:	6030      	str	r0, [r6, #0]
 800741c:	2800      	cmp	r0, #0
 800741e:	d1d5      	bne.n	80073cc <__sfp+0x24>
 8007420:	f7ff ff78 	bl	8007314 <__sfp_lock_release>
 8007424:	230c      	movs	r3, #12
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	e7ee      	b.n	8007408 <__sfp+0x60>
 800742a:	bf00      	nop
 800742c:	0800a600 	.word	0x0800a600
 8007430:	ffff0001 	.word	0xffff0001

08007434 <_fwalk_reent>:
 8007434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007438:	4606      	mov	r6, r0
 800743a:	4688      	mov	r8, r1
 800743c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007440:	2700      	movs	r7, #0
 8007442:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007446:	f1b9 0901 	subs.w	r9, r9, #1
 800744a:	d505      	bpl.n	8007458 <_fwalk_reent+0x24>
 800744c:	6824      	ldr	r4, [r4, #0]
 800744e:	2c00      	cmp	r4, #0
 8007450:	d1f7      	bne.n	8007442 <_fwalk_reent+0xe>
 8007452:	4638      	mov	r0, r7
 8007454:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007458:	89ab      	ldrh	r3, [r5, #12]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d907      	bls.n	800746e <_fwalk_reent+0x3a>
 800745e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007462:	3301      	adds	r3, #1
 8007464:	d003      	beq.n	800746e <_fwalk_reent+0x3a>
 8007466:	4629      	mov	r1, r5
 8007468:	4630      	mov	r0, r6
 800746a:	47c0      	blx	r8
 800746c:	4307      	orrs	r7, r0
 800746e:	3568      	adds	r5, #104	; 0x68
 8007470:	e7e9      	b.n	8007446 <_fwalk_reent+0x12>
	...

08007474 <__libc_init_array>:
 8007474:	b570      	push	{r4, r5, r6, lr}
 8007476:	4d0d      	ldr	r5, [pc, #52]	; (80074ac <__libc_init_array+0x38>)
 8007478:	4c0d      	ldr	r4, [pc, #52]	; (80074b0 <__libc_init_array+0x3c>)
 800747a:	1b64      	subs	r4, r4, r5
 800747c:	10a4      	asrs	r4, r4, #2
 800747e:	2600      	movs	r6, #0
 8007480:	42a6      	cmp	r6, r4
 8007482:	d109      	bne.n	8007498 <__libc_init_array+0x24>
 8007484:	4d0b      	ldr	r5, [pc, #44]	; (80074b4 <__libc_init_array+0x40>)
 8007486:	4c0c      	ldr	r4, [pc, #48]	; (80074b8 <__libc_init_array+0x44>)
 8007488:	f002 ffc2 	bl	800a410 <_init>
 800748c:	1b64      	subs	r4, r4, r5
 800748e:	10a4      	asrs	r4, r4, #2
 8007490:	2600      	movs	r6, #0
 8007492:	42a6      	cmp	r6, r4
 8007494:	d105      	bne.n	80074a2 <__libc_init_array+0x2e>
 8007496:	bd70      	pop	{r4, r5, r6, pc}
 8007498:	f855 3b04 	ldr.w	r3, [r5], #4
 800749c:	4798      	blx	r3
 800749e:	3601      	adds	r6, #1
 80074a0:	e7ee      	b.n	8007480 <__libc_init_array+0xc>
 80074a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80074a6:	4798      	blx	r3
 80074a8:	3601      	adds	r6, #1
 80074aa:	e7f2      	b.n	8007492 <__libc_init_array+0x1e>
 80074ac:	0800a9e0 	.word	0x0800a9e0
 80074b0:	0800a9e0 	.word	0x0800a9e0
 80074b4:	0800a9e0 	.word	0x0800a9e0
 80074b8:	0800a9e4 	.word	0x0800a9e4

080074bc <__retarget_lock_init_recursive>:
 80074bc:	4770      	bx	lr

080074be <__retarget_lock_acquire_recursive>:
 80074be:	4770      	bx	lr

080074c0 <__retarget_lock_release_recursive>:
 80074c0:	4770      	bx	lr

080074c2 <memcpy>:
 80074c2:	440a      	add	r2, r1
 80074c4:	4291      	cmp	r1, r2
 80074c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80074ca:	d100      	bne.n	80074ce <memcpy+0xc>
 80074cc:	4770      	bx	lr
 80074ce:	b510      	push	{r4, lr}
 80074d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074d8:	4291      	cmp	r1, r2
 80074da:	d1f9      	bne.n	80074d0 <memcpy+0xe>
 80074dc:	bd10      	pop	{r4, pc}

080074de <memset>:
 80074de:	4402      	add	r2, r0
 80074e0:	4603      	mov	r3, r0
 80074e2:	4293      	cmp	r3, r2
 80074e4:	d100      	bne.n	80074e8 <memset+0xa>
 80074e6:	4770      	bx	lr
 80074e8:	f803 1b01 	strb.w	r1, [r3], #1
 80074ec:	e7f9      	b.n	80074e2 <memset+0x4>
	...

080074f0 <sbrk_aligned>:
 80074f0:	b570      	push	{r4, r5, r6, lr}
 80074f2:	4e0e      	ldr	r6, [pc, #56]	; (800752c <sbrk_aligned+0x3c>)
 80074f4:	460c      	mov	r4, r1
 80074f6:	6831      	ldr	r1, [r6, #0]
 80074f8:	4605      	mov	r5, r0
 80074fa:	b911      	cbnz	r1, 8007502 <sbrk_aligned+0x12>
 80074fc:	f000 fdcc 	bl	8008098 <_sbrk_r>
 8007500:	6030      	str	r0, [r6, #0]
 8007502:	4621      	mov	r1, r4
 8007504:	4628      	mov	r0, r5
 8007506:	f000 fdc7 	bl	8008098 <_sbrk_r>
 800750a:	1c43      	adds	r3, r0, #1
 800750c:	d00a      	beq.n	8007524 <sbrk_aligned+0x34>
 800750e:	1cc4      	adds	r4, r0, #3
 8007510:	f024 0403 	bic.w	r4, r4, #3
 8007514:	42a0      	cmp	r0, r4
 8007516:	d007      	beq.n	8007528 <sbrk_aligned+0x38>
 8007518:	1a21      	subs	r1, r4, r0
 800751a:	4628      	mov	r0, r5
 800751c:	f000 fdbc 	bl	8008098 <_sbrk_r>
 8007520:	3001      	adds	r0, #1
 8007522:	d101      	bne.n	8007528 <sbrk_aligned+0x38>
 8007524:	f04f 34ff 	mov.w	r4, #4294967295
 8007528:	4620      	mov	r0, r4
 800752a:	bd70      	pop	{r4, r5, r6, pc}
 800752c:	20004ce0 	.word	0x20004ce0

08007530 <_malloc_r>:
 8007530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007534:	1ccd      	adds	r5, r1, #3
 8007536:	f025 0503 	bic.w	r5, r5, #3
 800753a:	3508      	adds	r5, #8
 800753c:	2d0c      	cmp	r5, #12
 800753e:	bf38      	it	cc
 8007540:	250c      	movcc	r5, #12
 8007542:	2d00      	cmp	r5, #0
 8007544:	4607      	mov	r7, r0
 8007546:	db01      	blt.n	800754c <_malloc_r+0x1c>
 8007548:	42a9      	cmp	r1, r5
 800754a:	d905      	bls.n	8007558 <_malloc_r+0x28>
 800754c:	230c      	movs	r3, #12
 800754e:	603b      	str	r3, [r7, #0]
 8007550:	2600      	movs	r6, #0
 8007552:	4630      	mov	r0, r6
 8007554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007558:	4e2e      	ldr	r6, [pc, #184]	; (8007614 <_malloc_r+0xe4>)
 800755a:	f001 fdbd 	bl	80090d8 <__malloc_lock>
 800755e:	6833      	ldr	r3, [r6, #0]
 8007560:	461c      	mov	r4, r3
 8007562:	bb34      	cbnz	r4, 80075b2 <_malloc_r+0x82>
 8007564:	4629      	mov	r1, r5
 8007566:	4638      	mov	r0, r7
 8007568:	f7ff ffc2 	bl	80074f0 <sbrk_aligned>
 800756c:	1c43      	adds	r3, r0, #1
 800756e:	4604      	mov	r4, r0
 8007570:	d14d      	bne.n	800760e <_malloc_r+0xde>
 8007572:	6834      	ldr	r4, [r6, #0]
 8007574:	4626      	mov	r6, r4
 8007576:	2e00      	cmp	r6, #0
 8007578:	d140      	bne.n	80075fc <_malloc_r+0xcc>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	4631      	mov	r1, r6
 800757e:	4638      	mov	r0, r7
 8007580:	eb04 0803 	add.w	r8, r4, r3
 8007584:	f000 fd88 	bl	8008098 <_sbrk_r>
 8007588:	4580      	cmp	r8, r0
 800758a:	d13a      	bne.n	8007602 <_malloc_r+0xd2>
 800758c:	6821      	ldr	r1, [r4, #0]
 800758e:	3503      	adds	r5, #3
 8007590:	1a6d      	subs	r5, r5, r1
 8007592:	f025 0503 	bic.w	r5, r5, #3
 8007596:	3508      	adds	r5, #8
 8007598:	2d0c      	cmp	r5, #12
 800759a:	bf38      	it	cc
 800759c:	250c      	movcc	r5, #12
 800759e:	4629      	mov	r1, r5
 80075a0:	4638      	mov	r0, r7
 80075a2:	f7ff ffa5 	bl	80074f0 <sbrk_aligned>
 80075a6:	3001      	adds	r0, #1
 80075a8:	d02b      	beq.n	8007602 <_malloc_r+0xd2>
 80075aa:	6823      	ldr	r3, [r4, #0]
 80075ac:	442b      	add	r3, r5
 80075ae:	6023      	str	r3, [r4, #0]
 80075b0:	e00e      	b.n	80075d0 <_malloc_r+0xa0>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	1b52      	subs	r2, r2, r5
 80075b6:	d41e      	bmi.n	80075f6 <_malloc_r+0xc6>
 80075b8:	2a0b      	cmp	r2, #11
 80075ba:	d916      	bls.n	80075ea <_malloc_r+0xba>
 80075bc:	1961      	adds	r1, r4, r5
 80075be:	42a3      	cmp	r3, r4
 80075c0:	6025      	str	r5, [r4, #0]
 80075c2:	bf18      	it	ne
 80075c4:	6059      	strne	r1, [r3, #4]
 80075c6:	6863      	ldr	r3, [r4, #4]
 80075c8:	bf08      	it	eq
 80075ca:	6031      	streq	r1, [r6, #0]
 80075cc:	5162      	str	r2, [r4, r5]
 80075ce:	604b      	str	r3, [r1, #4]
 80075d0:	4638      	mov	r0, r7
 80075d2:	f104 060b 	add.w	r6, r4, #11
 80075d6:	f001 fd85 	bl	80090e4 <__malloc_unlock>
 80075da:	f026 0607 	bic.w	r6, r6, #7
 80075de:	1d23      	adds	r3, r4, #4
 80075e0:	1af2      	subs	r2, r6, r3
 80075e2:	d0b6      	beq.n	8007552 <_malloc_r+0x22>
 80075e4:	1b9b      	subs	r3, r3, r6
 80075e6:	50a3      	str	r3, [r4, r2]
 80075e8:	e7b3      	b.n	8007552 <_malloc_r+0x22>
 80075ea:	6862      	ldr	r2, [r4, #4]
 80075ec:	42a3      	cmp	r3, r4
 80075ee:	bf0c      	ite	eq
 80075f0:	6032      	streq	r2, [r6, #0]
 80075f2:	605a      	strne	r2, [r3, #4]
 80075f4:	e7ec      	b.n	80075d0 <_malloc_r+0xa0>
 80075f6:	4623      	mov	r3, r4
 80075f8:	6864      	ldr	r4, [r4, #4]
 80075fa:	e7b2      	b.n	8007562 <_malloc_r+0x32>
 80075fc:	4634      	mov	r4, r6
 80075fe:	6876      	ldr	r6, [r6, #4]
 8007600:	e7b9      	b.n	8007576 <_malloc_r+0x46>
 8007602:	230c      	movs	r3, #12
 8007604:	603b      	str	r3, [r7, #0]
 8007606:	4638      	mov	r0, r7
 8007608:	f001 fd6c 	bl	80090e4 <__malloc_unlock>
 800760c:	e7a1      	b.n	8007552 <_malloc_r+0x22>
 800760e:	6025      	str	r5, [r4, #0]
 8007610:	e7de      	b.n	80075d0 <_malloc_r+0xa0>
 8007612:	bf00      	nop
 8007614:	20004cdc 	.word	0x20004cdc

08007618 <__cvt>:
 8007618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800761c:	ec55 4b10 	vmov	r4, r5, d0
 8007620:	2d00      	cmp	r5, #0
 8007622:	460e      	mov	r6, r1
 8007624:	4619      	mov	r1, r3
 8007626:	462b      	mov	r3, r5
 8007628:	bfbb      	ittet	lt
 800762a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800762e:	461d      	movlt	r5, r3
 8007630:	2300      	movge	r3, #0
 8007632:	232d      	movlt	r3, #45	; 0x2d
 8007634:	700b      	strb	r3, [r1, #0]
 8007636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007638:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800763c:	4691      	mov	r9, r2
 800763e:	f023 0820 	bic.w	r8, r3, #32
 8007642:	bfbc      	itt	lt
 8007644:	4622      	movlt	r2, r4
 8007646:	4614      	movlt	r4, r2
 8007648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800764c:	d005      	beq.n	800765a <__cvt+0x42>
 800764e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007652:	d100      	bne.n	8007656 <__cvt+0x3e>
 8007654:	3601      	adds	r6, #1
 8007656:	2102      	movs	r1, #2
 8007658:	e000      	b.n	800765c <__cvt+0x44>
 800765a:	2103      	movs	r1, #3
 800765c:	ab03      	add	r3, sp, #12
 800765e:	9301      	str	r3, [sp, #4]
 8007660:	ab02      	add	r3, sp, #8
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	ec45 4b10 	vmov	d0, r4, r5
 8007668:	4653      	mov	r3, sl
 800766a:	4632      	mov	r2, r6
 800766c:	f000 fe54 	bl	8008318 <_dtoa_r>
 8007670:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007674:	4607      	mov	r7, r0
 8007676:	d102      	bne.n	800767e <__cvt+0x66>
 8007678:	f019 0f01 	tst.w	r9, #1
 800767c:	d022      	beq.n	80076c4 <__cvt+0xac>
 800767e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007682:	eb07 0906 	add.w	r9, r7, r6
 8007686:	d110      	bne.n	80076aa <__cvt+0x92>
 8007688:	783b      	ldrb	r3, [r7, #0]
 800768a:	2b30      	cmp	r3, #48	; 0x30
 800768c:	d10a      	bne.n	80076a4 <__cvt+0x8c>
 800768e:	2200      	movs	r2, #0
 8007690:	2300      	movs	r3, #0
 8007692:	4620      	mov	r0, r4
 8007694:	4629      	mov	r1, r5
 8007696:	f7f9 fa37 	bl	8000b08 <__aeabi_dcmpeq>
 800769a:	b918      	cbnz	r0, 80076a4 <__cvt+0x8c>
 800769c:	f1c6 0601 	rsb	r6, r6, #1
 80076a0:	f8ca 6000 	str.w	r6, [sl]
 80076a4:	f8da 3000 	ldr.w	r3, [sl]
 80076a8:	4499      	add	r9, r3
 80076aa:	2200      	movs	r2, #0
 80076ac:	2300      	movs	r3, #0
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f9 fa29 	bl	8000b08 <__aeabi_dcmpeq>
 80076b6:	b108      	cbz	r0, 80076bc <__cvt+0xa4>
 80076b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80076bc:	2230      	movs	r2, #48	; 0x30
 80076be:	9b03      	ldr	r3, [sp, #12]
 80076c0:	454b      	cmp	r3, r9
 80076c2:	d307      	bcc.n	80076d4 <__cvt+0xbc>
 80076c4:	9b03      	ldr	r3, [sp, #12]
 80076c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076c8:	1bdb      	subs	r3, r3, r7
 80076ca:	4638      	mov	r0, r7
 80076cc:	6013      	str	r3, [r2, #0]
 80076ce:	b004      	add	sp, #16
 80076d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d4:	1c59      	adds	r1, r3, #1
 80076d6:	9103      	str	r1, [sp, #12]
 80076d8:	701a      	strb	r2, [r3, #0]
 80076da:	e7f0      	b.n	80076be <__cvt+0xa6>

080076dc <__exponent>:
 80076dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076de:	4603      	mov	r3, r0
 80076e0:	2900      	cmp	r1, #0
 80076e2:	bfb8      	it	lt
 80076e4:	4249      	neglt	r1, r1
 80076e6:	f803 2b02 	strb.w	r2, [r3], #2
 80076ea:	bfb4      	ite	lt
 80076ec:	222d      	movlt	r2, #45	; 0x2d
 80076ee:	222b      	movge	r2, #43	; 0x2b
 80076f0:	2909      	cmp	r1, #9
 80076f2:	7042      	strb	r2, [r0, #1]
 80076f4:	dd2a      	ble.n	800774c <__exponent+0x70>
 80076f6:	f10d 0407 	add.w	r4, sp, #7
 80076fa:	46a4      	mov	ip, r4
 80076fc:	270a      	movs	r7, #10
 80076fe:	46a6      	mov	lr, r4
 8007700:	460a      	mov	r2, r1
 8007702:	fb91 f6f7 	sdiv	r6, r1, r7
 8007706:	fb07 1516 	mls	r5, r7, r6, r1
 800770a:	3530      	adds	r5, #48	; 0x30
 800770c:	2a63      	cmp	r2, #99	; 0x63
 800770e:	f104 34ff 	add.w	r4, r4, #4294967295
 8007712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007716:	4631      	mov	r1, r6
 8007718:	dcf1      	bgt.n	80076fe <__exponent+0x22>
 800771a:	3130      	adds	r1, #48	; 0x30
 800771c:	f1ae 0502 	sub.w	r5, lr, #2
 8007720:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007724:	1c44      	adds	r4, r0, #1
 8007726:	4629      	mov	r1, r5
 8007728:	4561      	cmp	r1, ip
 800772a:	d30a      	bcc.n	8007742 <__exponent+0x66>
 800772c:	f10d 0209 	add.w	r2, sp, #9
 8007730:	eba2 020e 	sub.w	r2, r2, lr
 8007734:	4565      	cmp	r5, ip
 8007736:	bf88      	it	hi
 8007738:	2200      	movhi	r2, #0
 800773a:	4413      	add	r3, r2
 800773c:	1a18      	subs	r0, r3, r0
 800773e:	b003      	add	sp, #12
 8007740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007746:	f804 2f01 	strb.w	r2, [r4, #1]!
 800774a:	e7ed      	b.n	8007728 <__exponent+0x4c>
 800774c:	2330      	movs	r3, #48	; 0x30
 800774e:	3130      	adds	r1, #48	; 0x30
 8007750:	7083      	strb	r3, [r0, #2]
 8007752:	70c1      	strb	r1, [r0, #3]
 8007754:	1d03      	adds	r3, r0, #4
 8007756:	e7f1      	b.n	800773c <__exponent+0x60>

08007758 <_printf_float>:
 8007758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	ed2d 8b02 	vpush	{d8}
 8007760:	b08d      	sub	sp, #52	; 0x34
 8007762:	460c      	mov	r4, r1
 8007764:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007768:	4616      	mov	r6, r2
 800776a:	461f      	mov	r7, r3
 800776c:	4605      	mov	r5, r0
 800776e:	f001 fc95 	bl	800909c <_localeconv_r>
 8007772:	f8d0 a000 	ldr.w	sl, [r0]
 8007776:	4650      	mov	r0, sl
 8007778:	f7f8 fd4a 	bl	8000210 <strlen>
 800777c:	2300      	movs	r3, #0
 800777e:	930a      	str	r3, [sp, #40]	; 0x28
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	9305      	str	r3, [sp, #20]
 8007784:	f8d8 3000 	ldr.w	r3, [r8]
 8007788:	f894 b018 	ldrb.w	fp, [r4, #24]
 800778c:	3307      	adds	r3, #7
 800778e:	f023 0307 	bic.w	r3, r3, #7
 8007792:	f103 0208 	add.w	r2, r3, #8
 8007796:	f8c8 2000 	str.w	r2, [r8]
 800779a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800779e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80077a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077aa:	9307      	str	r3, [sp, #28]
 80077ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80077b0:	ee08 0a10 	vmov	s16, r0
 80077b4:	4b9f      	ldr	r3, [pc, #636]	; (8007a34 <_printf_float+0x2dc>)
 80077b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077ba:	f04f 32ff 	mov.w	r2, #4294967295
 80077be:	f7f9 f9d5 	bl	8000b6c <__aeabi_dcmpun>
 80077c2:	bb88      	cbnz	r0, 8007828 <_printf_float+0xd0>
 80077c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077c8:	4b9a      	ldr	r3, [pc, #616]	; (8007a34 <_printf_float+0x2dc>)
 80077ca:	f04f 32ff 	mov.w	r2, #4294967295
 80077ce:	f7f9 f9af 	bl	8000b30 <__aeabi_dcmple>
 80077d2:	bb48      	cbnz	r0, 8007828 <_printf_float+0xd0>
 80077d4:	2200      	movs	r2, #0
 80077d6:	2300      	movs	r3, #0
 80077d8:	4640      	mov	r0, r8
 80077da:	4649      	mov	r1, r9
 80077dc:	f7f9 f99e 	bl	8000b1c <__aeabi_dcmplt>
 80077e0:	b110      	cbz	r0, 80077e8 <_printf_float+0x90>
 80077e2:	232d      	movs	r3, #45	; 0x2d
 80077e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077e8:	4b93      	ldr	r3, [pc, #588]	; (8007a38 <_printf_float+0x2e0>)
 80077ea:	4894      	ldr	r0, [pc, #592]	; (8007a3c <_printf_float+0x2e4>)
 80077ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80077f0:	bf94      	ite	ls
 80077f2:	4698      	movls	r8, r3
 80077f4:	4680      	movhi	r8, r0
 80077f6:	2303      	movs	r3, #3
 80077f8:	6123      	str	r3, [r4, #16]
 80077fa:	9b05      	ldr	r3, [sp, #20]
 80077fc:	f023 0204 	bic.w	r2, r3, #4
 8007800:	6022      	str	r2, [r4, #0]
 8007802:	f04f 0900 	mov.w	r9, #0
 8007806:	9700      	str	r7, [sp, #0]
 8007808:	4633      	mov	r3, r6
 800780a:	aa0b      	add	r2, sp, #44	; 0x2c
 800780c:	4621      	mov	r1, r4
 800780e:	4628      	mov	r0, r5
 8007810:	f000 f9d8 	bl	8007bc4 <_printf_common>
 8007814:	3001      	adds	r0, #1
 8007816:	f040 8090 	bne.w	800793a <_printf_float+0x1e2>
 800781a:	f04f 30ff 	mov.w	r0, #4294967295
 800781e:	b00d      	add	sp, #52	; 0x34
 8007820:	ecbd 8b02 	vpop	{d8}
 8007824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007828:	4642      	mov	r2, r8
 800782a:	464b      	mov	r3, r9
 800782c:	4640      	mov	r0, r8
 800782e:	4649      	mov	r1, r9
 8007830:	f7f9 f99c 	bl	8000b6c <__aeabi_dcmpun>
 8007834:	b140      	cbz	r0, 8007848 <_printf_float+0xf0>
 8007836:	464b      	mov	r3, r9
 8007838:	2b00      	cmp	r3, #0
 800783a:	bfbc      	itt	lt
 800783c:	232d      	movlt	r3, #45	; 0x2d
 800783e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007842:	487f      	ldr	r0, [pc, #508]	; (8007a40 <_printf_float+0x2e8>)
 8007844:	4b7f      	ldr	r3, [pc, #508]	; (8007a44 <_printf_float+0x2ec>)
 8007846:	e7d1      	b.n	80077ec <_printf_float+0x94>
 8007848:	6863      	ldr	r3, [r4, #4]
 800784a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800784e:	9206      	str	r2, [sp, #24]
 8007850:	1c5a      	adds	r2, r3, #1
 8007852:	d13f      	bne.n	80078d4 <_printf_float+0x17c>
 8007854:	2306      	movs	r3, #6
 8007856:	6063      	str	r3, [r4, #4]
 8007858:	9b05      	ldr	r3, [sp, #20]
 800785a:	6861      	ldr	r1, [r4, #4]
 800785c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007860:	2300      	movs	r3, #0
 8007862:	9303      	str	r3, [sp, #12]
 8007864:	ab0a      	add	r3, sp, #40	; 0x28
 8007866:	e9cd b301 	strd	fp, r3, [sp, #4]
 800786a:	ab09      	add	r3, sp, #36	; 0x24
 800786c:	ec49 8b10 	vmov	d0, r8, r9
 8007870:	9300      	str	r3, [sp, #0]
 8007872:	6022      	str	r2, [r4, #0]
 8007874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007878:	4628      	mov	r0, r5
 800787a:	f7ff fecd 	bl	8007618 <__cvt>
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007882:	2b47      	cmp	r3, #71	; 0x47
 8007884:	4680      	mov	r8, r0
 8007886:	d108      	bne.n	800789a <_printf_float+0x142>
 8007888:	1cc8      	adds	r0, r1, #3
 800788a:	db02      	blt.n	8007892 <_printf_float+0x13a>
 800788c:	6863      	ldr	r3, [r4, #4]
 800788e:	4299      	cmp	r1, r3
 8007890:	dd41      	ble.n	8007916 <_printf_float+0x1be>
 8007892:	f1ab 0b02 	sub.w	fp, fp, #2
 8007896:	fa5f fb8b 	uxtb.w	fp, fp
 800789a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800789e:	d820      	bhi.n	80078e2 <_printf_float+0x18a>
 80078a0:	3901      	subs	r1, #1
 80078a2:	465a      	mov	r2, fp
 80078a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078a8:	9109      	str	r1, [sp, #36]	; 0x24
 80078aa:	f7ff ff17 	bl	80076dc <__exponent>
 80078ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078b0:	1813      	adds	r3, r2, r0
 80078b2:	2a01      	cmp	r2, #1
 80078b4:	4681      	mov	r9, r0
 80078b6:	6123      	str	r3, [r4, #16]
 80078b8:	dc02      	bgt.n	80078c0 <_printf_float+0x168>
 80078ba:	6822      	ldr	r2, [r4, #0]
 80078bc:	07d2      	lsls	r2, r2, #31
 80078be:	d501      	bpl.n	80078c4 <_printf_float+0x16c>
 80078c0:	3301      	adds	r3, #1
 80078c2:	6123      	str	r3, [r4, #16]
 80078c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d09c      	beq.n	8007806 <_printf_float+0xae>
 80078cc:	232d      	movs	r3, #45	; 0x2d
 80078ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078d2:	e798      	b.n	8007806 <_printf_float+0xae>
 80078d4:	9a06      	ldr	r2, [sp, #24]
 80078d6:	2a47      	cmp	r2, #71	; 0x47
 80078d8:	d1be      	bne.n	8007858 <_printf_float+0x100>
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1bc      	bne.n	8007858 <_printf_float+0x100>
 80078de:	2301      	movs	r3, #1
 80078e0:	e7b9      	b.n	8007856 <_printf_float+0xfe>
 80078e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078e6:	d118      	bne.n	800791a <_printf_float+0x1c2>
 80078e8:	2900      	cmp	r1, #0
 80078ea:	6863      	ldr	r3, [r4, #4]
 80078ec:	dd0b      	ble.n	8007906 <_printf_float+0x1ae>
 80078ee:	6121      	str	r1, [r4, #16]
 80078f0:	b913      	cbnz	r3, 80078f8 <_printf_float+0x1a0>
 80078f2:	6822      	ldr	r2, [r4, #0]
 80078f4:	07d0      	lsls	r0, r2, #31
 80078f6:	d502      	bpl.n	80078fe <_printf_float+0x1a6>
 80078f8:	3301      	adds	r3, #1
 80078fa:	440b      	add	r3, r1
 80078fc:	6123      	str	r3, [r4, #16]
 80078fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8007900:	f04f 0900 	mov.w	r9, #0
 8007904:	e7de      	b.n	80078c4 <_printf_float+0x16c>
 8007906:	b913      	cbnz	r3, 800790e <_printf_float+0x1b6>
 8007908:	6822      	ldr	r2, [r4, #0]
 800790a:	07d2      	lsls	r2, r2, #31
 800790c:	d501      	bpl.n	8007912 <_printf_float+0x1ba>
 800790e:	3302      	adds	r3, #2
 8007910:	e7f4      	b.n	80078fc <_printf_float+0x1a4>
 8007912:	2301      	movs	r3, #1
 8007914:	e7f2      	b.n	80078fc <_printf_float+0x1a4>
 8007916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800791a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800791c:	4299      	cmp	r1, r3
 800791e:	db05      	blt.n	800792c <_printf_float+0x1d4>
 8007920:	6823      	ldr	r3, [r4, #0]
 8007922:	6121      	str	r1, [r4, #16]
 8007924:	07d8      	lsls	r0, r3, #31
 8007926:	d5ea      	bpl.n	80078fe <_printf_float+0x1a6>
 8007928:	1c4b      	adds	r3, r1, #1
 800792a:	e7e7      	b.n	80078fc <_printf_float+0x1a4>
 800792c:	2900      	cmp	r1, #0
 800792e:	bfd4      	ite	le
 8007930:	f1c1 0202 	rsble	r2, r1, #2
 8007934:	2201      	movgt	r2, #1
 8007936:	4413      	add	r3, r2
 8007938:	e7e0      	b.n	80078fc <_printf_float+0x1a4>
 800793a:	6823      	ldr	r3, [r4, #0]
 800793c:	055a      	lsls	r2, r3, #21
 800793e:	d407      	bmi.n	8007950 <_printf_float+0x1f8>
 8007940:	6923      	ldr	r3, [r4, #16]
 8007942:	4642      	mov	r2, r8
 8007944:	4631      	mov	r1, r6
 8007946:	4628      	mov	r0, r5
 8007948:	47b8      	blx	r7
 800794a:	3001      	adds	r0, #1
 800794c:	d12c      	bne.n	80079a8 <_printf_float+0x250>
 800794e:	e764      	b.n	800781a <_printf_float+0xc2>
 8007950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007954:	f240 80e0 	bls.w	8007b18 <_printf_float+0x3c0>
 8007958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800795c:	2200      	movs	r2, #0
 800795e:	2300      	movs	r3, #0
 8007960:	f7f9 f8d2 	bl	8000b08 <__aeabi_dcmpeq>
 8007964:	2800      	cmp	r0, #0
 8007966:	d034      	beq.n	80079d2 <_printf_float+0x27a>
 8007968:	4a37      	ldr	r2, [pc, #220]	; (8007a48 <_printf_float+0x2f0>)
 800796a:	2301      	movs	r3, #1
 800796c:	4631      	mov	r1, r6
 800796e:	4628      	mov	r0, r5
 8007970:	47b8      	blx	r7
 8007972:	3001      	adds	r0, #1
 8007974:	f43f af51 	beq.w	800781a <_printf_float+0xc2>
 8007978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800797c:	429a      	cmp	r2, r3
 800797e:	db02      	blt.n	8007986 <_printf_float+0x22e>
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	07d8      	lsls	r0, r3, #31
 8007984:	d510      	bpl.n	80079a8 <_printf_float+0x250>
 8007986:	ee18 3a10 	vmov	r3, s16
 800798a:	4652      	mov	r2, sl
 800798c:	4631      	mov	r1, r6
 800798e:	4628      	mov	r0, r5
 8007990:	47b8      	blx	r7
 8007992:	3001      	adds	r0, #1
 8007994:	f43f af41 	beq.w	800781a <_printf_float+0xc2>
 8007998:	f04f 0800 	mov.w	r8, #0
 800799c:	f104 091a 	add.w	r9, r4, #26
 80079a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079a2:	3b01      	subs	r3, #1
 80079a4:	4543      	cmp	r3, r8
 80079a6:	dc09      	bgt.n	80079bc <_printf_float+0x264>
 80079a8:	6823      	ldr	r3, [r4, #0]
 80079aa:	079b      	lsls	r3, r3, #30
 80079ac:	f100 8105 	bmi.w	8007bba <_printf_float+0x462>
 80079b0:	68e0      	ldr	r0, [r4, #12]
 80079b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079b4:	4298      	cmp	r0, r3
 80079b6:	bfb8      	it	lt
 80079b8:	4618      	movlt	r0, r3
 80079ba:	e730      	b.n	800781e <_printf_float+0xc6>
 80079bc:	2301      	movs	r3, #1
 80079be:	464a      	mov	r2, r9
 80079c0:	4631      	mov	r1, r6
 80079c2:	4628      	mov	r0, r5
 80079c4:	47b8      	blx	r7
 80079c6:	3001      	adds	r0, #1
 80079c8:	f43f af27 	beq.w	800781a <_printf_float+0xc2>
 80079cc:	f108 0801 	add.w	r8, r8, #1
 80079d0:	e7e6      	b.n	80079a0 <_printf_float+0x248>
 80079d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	dc39      	bgt.n	8007a4c <_printf_float+0x2f4>
 80079d8:	4a1b      	ldr	r2, [pc, #108]	; (8007a48 <_printf_float+0x2f0>)
 80079da:	2301      	movs	r3, #1
 80079dc:	4631      	mov	r1, r6
 80079de:	4628      	mov	r0, r5
 80079e0:	47b8      	blx	r7
 80079e2:	3001      	adds	r0, #1
 80079e4:	f43f af19 	beq.w	800781a <_printf_float+0xc2>
 80079e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079ec:	4313      	orrs	r3, r2
 80079ee:	d102      	bne.n	80079f6 <_printf_float+0x29e>
 80079f0:	6823      	ldr	r3, [r4, #0]
 80079f2:	07d9      	lsls	r1, r3, #31
 80079f4:	d5d8      	bpl.n	80079a8 <_printf_float+0x250>
 80079f6:	ee18 3a10 	vmov	r3, s16
 80079fa:	4652      	mov	r2, sl
 80079fc:	4631      	mov	r1, r6
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	f43f af09 	beq.w	800781a <_printf_float+0xc2>
 8007a08:	f04f 0900 	mov.w	r9, #0
 8007a0c:	f104 0a1a 	add.w	sl, r4, #26
 8007a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a12:	425b      	negs	r3, r3
 8007a14:	454b      	cmp	r3, r9
 8007a16:	dc01      	bgt.n	8007a1c <_printf_float+0x2c4>
 8007a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a1a:	e792      	b.n	8007942 <_printf_float+0x1ea>
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	4652      	mov	r2, sl
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	f43f aef7 	beq.w	800781a <_printf_float+0xc2>
 8007a2c:	f109 0901 	add.w	r9, r9, #1
 8007a30:	e7ee      	b.n	8007a10 <_printf_float+0x2b8>
 8007a32:	bf00      	nop
 8007a34:	7fefffff 	.word	0x7fefffff
 8007a38:	0800a604 	.word	0x0800a604
 8007a3c:	0800a608 	.word	0x0800a608
 8007a40:	0800a610 	.word	0x0800a610
 8007a44:	0800a60c 	.word	0x0800a60c
 8007a48:	0800a614 	.word	0x0800a614
 8007a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a50:	429a      	cmp	r2, r3
 8007a52:	bfa8      	it	ge
 8007a54:	461a      	movge	r2, r3
 8007a56:	2a00      	cmp	r2, #0
 8007a58:	4691      	mov	r9, r2
 8007a5a:	dc37      	bgt.n	8007acc <_printf_float+0x374>
 8007a5c:	f04f 0b00 	mov.w	fp, #0
 8007a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a64:	f104 021a 	add.w	r2, r4, #26
 8007a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a6a:	9305      	str	r3, [sp, #20]
 8007a6c:	eba3 0309 	sub.w	r3, r3, r9
 8007a70:	455b      	cmp	r3, fp
 8007a72:	dc33      	bgt.n	8007adc <_printf_float+0x384>
 8007a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	db3b      	blt.n	8007af4 <_printf_float+0x39c>
 8007a7c:	6823      	ldr	r3, [r4, #0]
 8007a7e:	07da      	lsls	r2, r3, #31
 8007a80:	d438      	bmi.n	8007af4 <_printf_float+0x39c>
 8007a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a84:	9a05      	ldr	r2, [sp, #20]
 8007a86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a88:	1a9a      	subs	r2, r3, r2
 8007a8a:	eba3 0901 	sub.w	r9, r3, r1
 8007a8e:	4591      	cmp	r9, r2
 8007a90:	bfa8      	it	ge
 8007a92:	4691      	movge	r9, r2
 8007a94:	f1b9 0f00 	cmp.w	r9, #0
 8007a98:	dc35      	bgt.n	8007b06 <_printf_float+0x3ae>
 8007a9a:	f04f 0800 	mov.w	r8, #0
 8007a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aa2:	f104 0a1a 	add.w	sl, r4, #26
 8007aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007aaa:	1a9b      	subs	r3, r3, r2
 8007aac:	eba3 0309 	sub.w	r3, r3, r9
 8007ab0:	4543      	cmp	r3, r8
 8007ab2:	f77f af79 	ble.w	80079a8 <_printf_float+0x250>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	4652      	mov	r2, sl
 8007aba:	4631      	mov	r1, r6
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b8      	blx	r7
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	f43f aeaa 	beq.w	800781a <_printf_float+0xc2>
 8007ac6:	f108 0801 	add.w	r8, r8, #1
 8007aca:	e7ec      	b.n	8007aa6 <_printf_float+0x34e>
 8007acc:	4613      	mov	r3, r2
 8007ace:	4631      	mov	r1, r6
 8007ad0:	4642      	mov	r2, r8
 8007ad2:	4628      	mov	r0, r5
 8007ad4:	47b8      	blx	r7
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	d1c0      	bne.n	8007a5c <_printf_float+0x304>
 8007ada:	e69e      	b.n	800781a <_printf_float+0xc2>
 8007adc:	2301      	movs	r3, #1
 8007ade:	4631      	mov	r1, r6
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	9205      	str	r2, [sp, #20]
 8007ae4:	47b8      	blx	r7
 8007ae6:	3001      	adds	r0, #1
 8007ae8:	f43f ae97 	beq.w	800781a <_printf_float+0xc2>
 8007aec:	9a05      	ldr	r2, [sp, #20]
 8007aee:	f10b 0b01 	add.w	fp, fp, #1
 8007af2:	e7b9      	b.n	8007a68 <_printf_float+0x310>
 8007af4:	ee18 3a10 	vmov	r3, s16
 8007af8:	4652      	mov	r2, sl
 8007afa:	4631      	mov	r1, r6
 8007afc:	4628      	mov	r0, r5
 8007afe:	47b8      	blx	r7
 8007b00:	3001      	adds	r0, #1
 8007b02:	d1be      	bne.n	8007a82 <_printf_float+0x32a>
 8007b04:	e689      	b.n	800781a <_printf_float+0xc2>
 8007b06:	9a05      	ldr	r2, [sp, #20]
 8007b08:	464b      	mov	r3, r9
 8007b0a:	4442      	add	r2, r8
 8007b0c:	4631      	mov	r1, r6
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	d1c1      	bne.n	8007a9a <_printf_float+0x342>
 8007b16:	e680      	b.n	800781a <_printf_float+0xc2>
 8007b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b1a:	2a01      	cmp	r2, #1
 8007b1c:	dc01      	bgt.n	8007b22 <_printf_float+0x3ca>
 8007b1e:	07db      	lsls	r3, r3, #31
 8007b20:	d538      	bpl.n	8007b94 <_printf_float+0x43c>
 8007b22:	2301      	movs	r3, #1
 8007b24:	4642      	mov	r2, r8
 8007b26:	4631      	mov	r1, r6
 8007b28:	4628      	mov	r0, r5
 8007b2a:	47b8      	blx	r7
 8007b2c:	3001      	adds	r0, #1
 8007b2e:	f43f ae74 	beq.w	800781a <_printf_float+0xc2>
 8007b32:	ee18 3a10 	vmov	r3, s16
 8007b36:	4652      	mov	r2, sl
 8007b38:	4631      	mov	r1, r6
 8007b3a:	4628      	mov	r0, r5
 8007b3c:	47b8      	blx	r7
 8007b3e:	3001      	adds	r0, #1
 8007b40:	f43f ae6b 	beq.w	800781a <_printf_float+0xc2>
 8007b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b48:	2200      	movs	r2, #0
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	f7f8 ffdc 	bl	8000b08 <__aeabi_dcmpeq>
 8007b50:	b9d8      	cbnz	r0, 8007b8a <_printf_float+0x432>
 8007b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b54:	f108 0201 	add.w	r2, r8, #1
 8007b58:	3b01      	subs	r3, #1
 8007b5a:	4631      	mov	r1, r6
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	47b8      	blx	r7
 8007b60:	3001      	adds	r0, #1
 8007b62:	d10e      	bne.n	8007b82 <_printf_float+0x42a>
 8007b64:	e659      	b.n	800781a <_printf_float+0xc2>
 8007b66:	2301      	movs	r3, #1
 8007b68:	4652      	mov	r2, sl
 8007b6a:	4631      	mov	r1, r6
 8007b6c:	4628      	mov	r0, r5
 8007b6e:	47b8      	blx	r7
 8007b70:	3001      	adds	r0, #1
 8007b72:	f43f ae52 	beq.w	800781a <_printf_float+0xc2>
 8007b76:	f108 0801 	add.w	r8, r8, #1
 8007b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b7c:	3b01      	subs	r3, #1
 8007b7e:	4543      	cmp	r3, r8
 8007b80:	dcf1      	bgt.n	8007b66 <_printf_float+0x40e>
 8007b82:	464b      	mov	r3, r9
 8007b84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007b88:	e6dc      	b.n	8007944 <_printf_float+0x1ec>
 8007b8a:	f04f 0800 	mov.w	r8, #0
 8007b8e:	f104 0a1a 	add.w	sl, r4, #26
 8007b92:	e7f2      	b.n	8007b7a <_printf_float+0x422>
 8007b94:	2301      	movs	r3, #1
 8007b96:	4642      	mov	r2, r8
 8007b98:	e7df      	b.n	8007b5a <_printf_float+0x402>
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	464a      	mov	r2, r9
 8007b9e:	4631      	mov	r1, r6
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	47b8      	blx	r7
 8007ba4:	3001      	adds	r0, #1
 8007ba6:	f43f ae38 	beq.w	800781a <_printf_float+0xc2>
 8007baa:	f108 0801 	add.w	r8, r8, #1
 8007bae:	68e3      	ldr	r3, [r4, #12]
 8007bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bb2:	1a5b      	subs	r3, r3, r1
 8007bb4:	4543      	cmp	r3, r8
 8007bb6:	dcf0      	bgt.n	8007b9a <_printf_float+0x442>
 8007bb8:	e6fa      	b.n	80079b0 <_printf_float+0x258>
 8007bba:	f04f 0800 	mov.w	r8, #0
 8007bbe:	f104 0919 	add.w	r9, r4, #25
 8007bc2:	e7f4      	b.n	8007bae <_printf_float+0x456>

08007bc4 <_printf_common>:
 8007bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bc8:	4616      	mov	r6, r2
 8007bca:	4699      	mov	r9, r3
 8007bcc:	688a      	ldr	r2, [r1, #8]
 8007bce:	690b      	ldr	r3, [r1, #16]
 8007bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	bfb8      	it	lt
 8007bd8:	4613      	movlt	r3, r2
 8007bda:	6033      	str	r3, [r6, #0]
 8007bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007be0:	4607      	mov	r7, r0
 8007be2:	460c      	mov	r4, r1
 8007be4:	b10a      	cbz	r2, 8007bea <_printf_common+0x26>
 8007be6:	3301      	adds	r3, #1
 8007be8:	6033      	str	r3, [r6, #0]
 8007bea:	6823      	ldr	r3, [r4, #0]
 8007bec:	0699      	lsls	r1, r3, #26
 8007bee:	bf42      	ittt	mi
 8007bf0:	6833      	ldrmi	r3, [r6, #0]
 8007bf2:	3302      	addmi	r3, #2
 8007bf4:	6033      	strmi	r3, [r6, #0]
 8007bf6:	6825      	ldr	r5, [r4, #0]
 8007bf8:	f015 0506 	ands.w	r5, r5, #6
 8007bfc:	d106      	bne.n	8007c0c <_printf_common+0x48>
 8007bfe:	f104 0a19 	add.w	sl, r4, #25
 8007c02:	68e3      	ldr	r3, [r4, #12]
 8007c04:	6832      	ldr	r2, [r6, #0]
 8007c06:	1a9b      	subs	r3, r3, r2
 8007c08:	42ab      	cmp	r3, r5
 8007c0a:	dc26      	bgt.n	8007c5a <_printf_common+0x96>
 8007c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c10:	1e13      	subs	r3, r2, #0
 8007c12:	6822      	ldr	r2, [r4, #0]
 8007c14:	bf18      	it	ne
 8007c16:	2301      	movne	r3, #1
 8007c18:	0692      	lsls	r2, r2, #26
 8007c1a:	d42b      	bmi.n	8007c74 <_printf_common+0xb0>
 8007c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c20:	4649      	mov	r1, r9
 8007c22:	4638      	mov	r0, r7
 8007c24:	47c0      	blx	r8
 8007c26:	3001      	adds	r0, #1
 8007c28:	d01e      	beq.n	8007c68 <_printf_common+0xa4>
 8007c2a:	6823      	ldr	r3, [r4, #0]
 8007c2c:	68e5      	ldr	r5, [r4, #12]
 8007c2e:	6832      	ldr	r2, [r6, #0]
 8007c30:	f003 0306 	and.w	r3, r3, #6
 8007c34:	2b04      	cmp	r3, #4
 8007c36:	bf08      	it	eq
 8007c38:	1aad      	subeq	r5, r5, r2
 8007c3a:	68a3      	ldr	r3, [r4, #8]
 8007c3c:	6922      	ldr	r2, [r4, #16]
 8007c3e:	bf0c      	ite	eq
 8007c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c44:	2500      	movne	r5, #0
 8007c46:	4293      	cmp	r3, r2
 8007c48:	bfc4      	itt	gt
 8007c4a:	1a9b      	subgt	r3, r3, r2
 8007c4c:	18ed      	addgt	r5, r5, r3
 8007c4e:	2600      	movs	r6, #0
 8007c50:	341a      	adds	r4, #26
 8007c52:	42b5      	cmp	r5, r6
 8007c54:	d11a      	bne.n	8007c8c <_printf_common+0xc8>
 8007c56:	2000      	movs	r0, #0
 8007c58:	e008      	b.n	8007c6c <_printf_common+0xa8>
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	4652      	mov	r2, sl
 8007c5e:	4649      	mov	r1, r9
 8007c60:	4638      	mov	r0, r7
 8007c62:	47c0      	blx	r8
 8007c64:	3001      	adds	r0, #1
 8007c66:	d103      	bne.n	8007c70 <_printf_common+0xac>
 8007c68:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c70:	3501      	adds	r5, #1
 8007c72:	e7c6      	b.n	8007c02 <_printf_common+0x3e>
 8007c74:	18e1      	adds	r1, r4, r3
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	2030      	movs	r0, #48	; 0x30
 8007c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c7e:	4422      	add	r2, r4
 8007c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007c88:	3302      	adds	r3, #2
 8007c8a:	e7c7      	b.n	8007c1c <_printf_common+0x58>
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	4622      	mov	r2, r4
 8007c90:	4649      	mov	r1, r9
 8007c92:	4638      	mov	r0, r7
 8007c94:	47c0      	blx	r8
 8007c96:	3001      	adds	r0, #1
 8007c98:	d0e6      	beq.n	8007c68 <_printf_common+0xa4>
 8007c9a:	3601      	adds	r6, #1
 8007c9c:	e7d9      	b.n	8007c52 <_printf_common+0x8e>
	...

08007ca0 <_printf_i>:
 8007ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca4:	7e0f      	ldrb	r7, [r1, #24]
 8007ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ca8:	2f78      	cmp	r7, #120	; 0x78
 8007caa:	4691      	mov	r9, r2
 8007cac:	4680      	mov	r8, r0
 8007cae:	460c      	mov	r4, r1
 8007cb0:	469a      	mov	sl, r3
 8007cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cb6:	d807      	bhi.n	8007cc8 <_printf_i+0x28>
 8007cb8:	2f62      	cmp	r7, #98	; 0x62
 8007cba:	d80a      	bhi.n	8007cd2 <_printf_i+0x32>
 8007cbc:	2f00      	cmp	r7, #0
 8007cbe:	f000 80d8 	beq.w	8007e72 <_printf_i+0x1d2>
 8007cc2:	2f58      	cmp	r7, #88	; 0x58
 8007cc4:	f000 80a3 	beq.w	8007e0e <_printf_i+0x16e>
 8007cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cd0:	e03a      	b.n	8007d48 <_printf_i+0xa8>
 8007cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cd6:	2b15      	cmp	r3, #21
 8007cd8:	d8f6      	bhi.n	8007cc8 <_printf_i+0x28>
 8007cda:	a101      	add	r1, pc, #4	; (adr r1, 8007ce0 <_printf_i+0x40>)
 8007cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ce0:	08007d39 	.word	0x08007d39
 8007ce4:	08007d4d 	.word	0x08007d4d
 8007ce8:	08007cc9 	.word	0x08007cc9
 8007cec:	08007cc9 	.word	0x08007cc9
 8007cf0:	08007cc9 	.word	0x08007cc9
 8007cf4:	08007cc9 	.word	0x08007cc9
 8007cf8:	08007d4d 	.word	0x08007d4d
 8007cfc:	08007cc9 	.word	0x08007cc9
 8007d00:	08007cc9 	.word	0x08007cc9
 8007d04:	08007cc9 	.word	0x08007cc9
 8007d08:	08007cc9 	.word	0x08007cc9
 8007d0c:	08007e59 	.word	0x08007e59
 8007d10:	08007d7d 	.word	0x08007d7d
 8007d14:	08007e3b 	.word	0x08007e3b
 8007d18:	08007cc9 	.word	0x08007cc9
 8007d1c:	08007cc9 	.word	0x08007cc9
 8007d20:	08007e7b 	.word	0x08007e7b
 8007d24:	08007cc9 	.word	0x08007cc9
 8007d28:	08007d7d 	.word	0x08007d7d
 8007d2c:	08007cc9 	.word	0x08007cc9
 8007d30:	08007cc9 	.word	0x08007cc9
 8007d34:	08007e43 	.word	0x08007e43
 8007d38:	682b      	ldr	r3, [r5, #0]
 8007d3a:	1d1a      	adds	r2, r3, #4
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	602a      	str	r2, [r5, #0]
 8007d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e0a3      	b.n	8007e94 <_printf_i+0x1f4>
 8007d4c:	6820      	ldr	r0, [r4, #0]
 8007d4e:	6829      	ldr	r1, [r5, #0]
 8007d50:	0606      	lsls	r6, r0, #24
 8007d52:	f101 0304 	add.w	r3, r1, #4
 8007d56:	d50a      	bpl.n	8007d6e <_printf_i+0xce>
 8007d58:	680e      	ldr	r6, [r1, #0]
 8007d5a:	602b      	str	r3, [r5, #0]
 8007d5c:	2e00      	cmp	r6, #0
 8007d5e:	da03      	bge.n	8007d68 <_printf_i+0xc8>
 8007d60:	232d      	movs	r3, #45	; 0x2d
 8007d62:	4276      	negs	r6, r6
 8007d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d68:	485e      	ldr	r0, [pc, #376]	; (8007ee4 <_printf_i+0x244>)
 8007d6a:	230a      	movs	r3, #10
 8007d6c:	e019      	b.n	8007da2 <_printf_i+0x102>
 8007d6e:	680e      	ldr	r6, [r1, #0]
 8007d70:	602b      	str	r3, [r5, #0]
 8007d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007d76:	bf18      	it	ne
 8007d78:	b236      	sxthne	r6, r6
 8007d7a:	e7ef      	b.n	8007d5c <_printf_i+0xbc>
 8007d7c:	682b      	ldr	r3, [r5, #0]
 8007d7e:	6820      	ldr	r0, [r4, #0]
 8007d80:	1d19      	adds	r1, r3, #4
 8007d82:	6029      	str	r1, [r5, #0]
 8007d84:	0601      	lsls	r1, r0, #24
 8007d86:	d501      	bpl.n	8007d8c <_printf_i+0xec>
 8007d88:	681e      	ldr	r6, [r3, #0]
 8007d8a:	e002      	b.n	8007d92 <_printf_i+0xf2>
 8007d8c:	0646      	lsls	r6, r0, #25
 8007d8e:	d5fb      	bpl.n	8007d88 <_printf_i+0xe8>
 8007d90:	881e      	ldrh	r6, [r3, #0]
 8007d92:	4854      	ldr	r0, [pc, #336]	; (8007ee4 <_printf_i+0x244>)
 8007d94:	2f6f      	cmp	r7, #111	; 0x6f
 8007d96:	bf0c      	ite	eq
 8007d98:	2308      	moveq	r3, #8
 8007d9a:	230a      	movne	r3, #10
 8007d9c:	2100      	movs	r1, #0
 8007d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007da2:	6865      	ldr	r5, [r4, #4]
 8007da4:	60a5      	str	r5, [r4, #8]
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	bfa2      	ittt	ge
 8007daa:	6821      	ldrge	r1, [r4, #0]
 8007dac:	f021 0104 	bicge.w	r1, r1, #4
 8007db0:	6021      	strge	r1, [r4, #0]
 8007db2:	b90e      	cbnz	r6, 8007db8 <_printf_i+0x118>
 8007db4:	2d00      	cmp	r5, #0
 8007db6:	d04d      	beq.n	8007e54 <_printf_i+0x1b4>
 8007db8:	4615      	mov	r5, r2
 8007dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8007dc2:	5dc7      	ldrb	r7, [r0, r7]
 8007dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007dc8:	4637      	mov	r7, r6
 8007dca:	42bb      	cmp	r3, r7
 8007dcc:	460e      	mov	r6, r1
 8007dce:	d9f4      	bls.n	8007dba <_printf_i+0x11a>
 8007dd0:	2b08      	cmp	r3, #8
 8007dd2:	d10b      	bne.n	8007dec <_printf_i+0x14c>
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	07de      	lsls	r6, r3, #31
 8007dd8:	d508      	bpl.n	8007dec <_printf_i+0x14c>
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	6861      	ldr	r1, [r4, #4]
 8007dde:	4299      	cmp	r1, r3
 8007de0:	bfde      	ittt	le
 8007de2:	2330      	movle	r3, #48	; 0x30
 8007de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007de8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007dec:	1b52      	subs	r2, r2, r5
 8007dee:	6122      	str	r2, [r4, #16]
 8007df0:	f8cd a000 	str.w	sl, [sp]
 8007df4:	464b      	mov	r3, r9
 8007df6:	aa03      	add	r2, sp, #12
 8007df8:	4621      	mov	r1, r4
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	f7ff fee2 	bl	8007bc4 <_printf_common>
 8007e00:	3001      	adds	r0, #1
 8007e02:	d14c      	bne.n	8007e9e <_printf_i+0x1fe>
 8007e04:	f04f 30ff 	mov.w	r0, #4294967295
 8007e08:	b004      	add	sp, #16
 8007e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0e:	4835      	ldr	r0, [pc, #212]	; (8007ee4 <_printf_i+0x244>)
 8007e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e14:	6829      	ldr	r1, [r5, #0]
 8007e16:	6823      	ldr	r3, [r4, #0]
 8007e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e1c:	6029      	str	r1, [r5, #0]
 8007e1e:	061d      	lsls	r5, r3, #24
 8007e20:	d514      	bpl.n	8007e4c <_printf_i+0x1ac>
 8007e22:	07df      	lsls	r7, r3, #31
 8007e24:	bf44      	itt	mi
 8007e26:	f043 0320 	orrmi.w	r3, r3, #32
 8007e2a:	6023      	strmi	r3, [r4, #0]
 8007e2c:	b91e      	cbnz	r6, 8007e36 <_printf_i+0x196>
 8007e2e:	6823      	ldr	r3, [r4, #0]
 8007e30:	f023 0320 	bic.w	r3, r3, #32
 8007e34:	6023      	str	r3, [r4, #0]
 8007e36:	2310      	movs	r3, #16
 8007e38:	e7b0      	b.n	8007d9c <_printf_i+0xfc>
 8007e3a:	6823      	ldr	r3, [r4, #0]
 8007e3c:	f043 0320 	orr.w	r3, r3, #32
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	2378      	movs	r3, #120	; 0x78
 8007e44:	4828      	ldr	r0, [pc, #160]	; (8007ee8 <_printf_i+0x248>)
 8007e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e4a:	e7e3      	b.n	8007e14 <_printf_i+0x174>
 8007e4c:	0659      	lsls	r1, r3, #25
 8007e4e:	bf48      	it	mi
 8007e50:	b2b6      	uxthmi	r6, r6
 8007e52:	e7e6      	b.n	8007e22 <_printf_i+0x182>
 8007e54:	4615      	mov	r5, r2
 8007e56:	e7bb      	b.n	8007dd0 <_printf_i+0x130>
 8007e58:	682b      	ldr	r3, [r5, #0]
 8007e5a:	6826      	ldr	r6, [r4, #0]
 8007e5c:	6961      	ldr	r1, [r4, #20]
 8007e5e:	1d18      	adds	r0, r3, #4
 8007e60:	6028      	str	r0, [r5, #0]
 8007e62:	0635      	lsls	r5, r6, #24
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	d501      	bpl.n	8007e6c <_printf_i+0x1cc>
 8007e68:	6019      	str	r1, [r3, #0]
 8007e6a:	e002      	b.n	8007e72 <_printf_i+0x1d2>
 8007e6c:	0670      	lsls	r0, r6, #25
 8007e6e:	d5fb      	bpl.n	8007e68 <_printf_i+0x1c8>
 8007e70:	8019      	strh	r1, [r3, #0]
 8007e72:	2300      	movs	r3, #0
 8007e74:	6123      	str	r3, [r4, #16]
 8007e76:	4615      	mov	r5, r2
 8007e78:	e7ba      	b.n	8007df0 <_printf_i+0x150>
 8007e7a:	682b      	ldr	r3, [r5, #0]
 8007e7c:	1d1a      	adds	r2, r3, #4
 8007e7e:	602a      	str	r2, [r5, #0]
 8007e80:	681d      	ldr	r5, [r3, #0]
 8007e82:	6862      	ldr	r2, [r4, #4]
 8007e84:	2100      	movs	r1, #0
 8007e86:	4628      	mov	r0, r5
 8007e88:	f7f8 f9ca 	bl	8000220 <memchr>
 8007e8c:	b108      	cbz	r0, 8007e92 <_printf_i+0x1f2>
 8007e8e:	1b40      	subs	r0, r0, r5
 8007e90:	6060      	str	r0, [r4, #4]
 8007e92:	6863      	ldr	r3, [r4, #4]
 8007e94:	6123      	str	r3, [r4, #16]
 8007e96:	2300      	movs	r3, #0
 8007e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e9c:	e7a8      	b.n	8007df0 <_printf_i+0x150>
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	4649      	mov	r1, r9
 8007ea4:	4640      	mov	r0, r8
 8007ea6:	47d0      	blx	sl
 8007ea8:	3001      	adds	r0, #1
 8007eaa:	d0ab      	beq.n	8007e04 <_printf_i+0x164>
 8007eac:	6823      	ldr	r3, [r4, #0]
 8007eae:	079b      	lsls	r3, r3, #30
 8007eb0:	d413      	bmi.n	8007eda <_printf_i+0x23a>
 8007eb2:	68e0      	ldr	r0, [r4, #12]
 8007eb4:	9b03      	ldr	r3, [sp, #12]
 8007eb6:	4298      	cmp	r0, r3
 8007eb8:	bfb8      	it	lt
 8007eba:	4618      	movlt	r0, r3
 8007ebc:	e7a4      	b.n	8007e08 <_printf_i+0x168>
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4632      	mov	r2, r6
 8007ec2:	4649      	mov	r1, r9
 8007ec4:	4640      	mov	r0, r8
 8007ec6:	47d0      	blx	sl
 8007ec8:	3001      	adds	r0, #1
 8007eca:	d09b      	beq.n	8007e04 <_printf_i+0x164>
 8007ecc:	3501      	adds	r5, #1
 8007ece:	68e3      	ldr	r3, [r4, #12]
 8007ed0:	9903      	ldr	r1, [sp, #12]
 8007ed2:	1a5b      	subs	r3, r3, r1
 8007ed4:	42ab      	cmp	r3, r5
 8007ed6:	dcf2      	bgt.n	8007ebe <_printf_i+0x21e>
 8007ed8:	e7eb      	b.n	8007eb2 <_printf_i+0x212>
 8007eda:	2500      	movs	r5, #0
 8007edc:	f104 0619 	add.w	r6, r4, #25
 8007ee0:	e7f5      	b.n	8007ece <_printf_i+0x22e>
 8007ee2:	bf00      	nop
 8007ee4:	0800a616 	.word	0x0800a616
 8007ee8:	0800a627 	.word	0x0800a627

08007eec <srand>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	4b10      	ldr	r3, [pc, #64]	; (8007f30 <srand+0x44>)
 8007ef0:	681d      	ldr	r5, [r3, #0]
 8007ef2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007ef4:	4604      	mov	r4, r0
 8007ef6:	b9b3      	cbnz	r3, 8007f26 <srand+0x3a>
 8007ef8:	2018      	movs	r0, #24
 8007efa:	f001 f8e5 	bl	80090c8 <malloc>
 8007efe:	4602      	mov	r2, r0
 8007f00:	63a8      	str	r0, [r5, #56]	; 0x38
 8007f02:	b920      	cbnz	r0, 8007f0e <srand+0x22>
 8007f04:	4b0b      	ldr	r3, [pc, #44]	; (8007f34 <srand+0x48>)
 8007f06:	480c      	ldr	r0, [pc, #48]	; (8007f38 <srand+0x4c>)
 8007f08:	2142      	movs	r1, #66	; 0x42
 8007f0a:	f000 f94b 	bl	80081a4 <__assert_func>
 8007f0e:	490b      	ldr	r1, [pc, #44]	; (8007f3c <srand+0x50>)
 8007f10:	4b0b      	ldr	r3, [pc, #44]	; (8007f40 <srand+0x54>)
 8007f12:	e9c0 1300 	strd	r1, r3, [r0]
 8007f16:	4b0b      	ldr	r3, [pc, #44]	; (8007f44 <srand+0x58>)
 8007f18:	6083      	str	r3, [r0, #8]
 8007f1a:	230b      	movs	r3, #11
 8007f1c:	8183      	strh	r3, [r0, #12]
 8007f1e:	2100      	movs	r1, #0
 8007f20:	2001      	movs	r0, #1
 8007f22:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007f26:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007f28:	2200      	movs	r2, #0
 8007f2a:	611c      	str	r4, [r3, #16]
 8007f2c:	615a      	str	r2, [r3, #20]
 8007f2e:	bd38      	pop	{r3, r4, r5, pc}
 8007f30:	20000010 	.word	0x20000010
 8007f34:	0800a638 	.word	0x0800a638
 8007f38:	0800a64f 	.word	0x0800a64f
 8007f3c:	abcd330e 	.word	0xabcd330e
 8007f40:	e66d1234 	.word	0xe66d1234
 8007f44:	0005deec 	.word	0x0005deec

08007f48 <rand>:
 8007f48:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <rand+0x5c>)
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	681c      	ldr	r4, [r3, #0]
 8007f4e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007f50:	b9b3      	cbnz	r3, 8007f80 <rand+0x38>
 8007f52:	2018      	movs	r0, #24
 8007f54:	f001 f8b8 	bl	80090c8 <malloc>
 8007f58:	63a0      	str	r0, [r4, #56]	; 0x38
 8007f5a:	b928      	cbnz	r0, 8007f68 <rand+0x20>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	4b12      	ldr	r3, [pc, #72]	; (8007fa8 <rand+0x60>)
 8007f60:	4812      	ldr	r0, [pc, #72]	; (8007fac <rand+0x64>)
 8007f62:	214e      	movs	r1, #78	; 0x4e
 8007f64:	f000 f91e 	bl	80081a4 <__assert_func>
 8007f68:	4a11      	ldr	r2, [pc, #68]	; (8007fb0 <rand+0x68>)
 8007f6a:	4b12      	ldr	r3, [pc, #72]	; (8007fb4 <rand+0x6c>)
 8007f6c:	e9c0 2300 	strd	r2, r3, [r0]
 8007f70:	4b11      	ldr	r3, [pc, #68]	; (8007fb8 <rand+0x70>)
 8007f72:	6083      	str	r3, [r0, #8]
 8007f74:	230b      	movs	r3, #11
 8007f76:	8183      	strh	r3, [r0, #12]
 8007f78:	2201      	movs	r2, #1
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8007f80:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8007f82:	4a0e      	ldr	r2, [pc, #56]	; (8007fbc <rand+0x74>)
 8007f84:	6920      	ldr	r0, [r4, #16]
 8007f86:	6963      	ldr	r3, [r4, #20]
 8007f88:	490d      	ldr	r1, [pc, #52]	; (8007fc0 <rand+0x78>)
 8007f8a:	4342      	muls	r2, r0
 8007f8c:	fb01 2203 	mla	r2, r1, r3, r2
 8007f90:	fba0 0101 	umull	r0, r1, r0, r1
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	eb42 0001 	adc.w	r0, r2, r1
 8007f9a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8007f9e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8007fa2:	bd10      	pop	{r4, pc}
 8007fa4:	20000010 	.word	0x20000010
 8007fa8:	0800a638 	.word	0x0800a638
 8007fac:	0800a64f 	.word	0x0800a64f
 8007fb0:	abcd330e 	.word	0xabcd330e
 8007fb4:	e66d1234 	.word	0xe66d1234
 8007fb8:	0005deec 	.word	0x0005deec
 8007fbc:	5851f42d 	.word	0x5851f42d
 8007fc0:	4c957f2d 	.word	0x4c957f2d

08007fc4 <cleanup_glue>:
 8007fc4:	b538      	push	{r3, r4, r5, lr}
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	6809      	ldr	r1, [r1, #0]
 8007fca:	4605      	mov	r5, r0
 8007fcc:	b109      	cbz	r1, 8007fd2 <cleanup_glue+0xe>
 8007fce:	f7ff fff9 	bl	8007fc4 <cleanup_glue>
 8007fd2:	4621      	mov	r1, r4
 8007fd4:	4628      	mov	r0, r5
 8007fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fda:	f001 bc23 	b.w	8009824 <_free_r>
	...

08007fe0 <_reclaim_reent>:
 8007fe0:	4b2c      	ldr	r3, [pc, #176]	; (8008094 <_reclaim_reent+0xb4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4283      	cmp	r3, r0
 8007fe6:	b570      	push	{r4, r5, r6, lr}
 8007fe8:	4604      	mov	r4, r0
 8007fea:	d051      	beq.n	8008090 <_reclaim_reent+0xb0>
 8007fec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007fee:	b143      	cbz	r3, 8008002 <_reclaim_reent+0x22>
 8007ff0:	68db      	ldr	r3, [r3, #12]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d14a      	bne.n	800808c <_reclaim_reent+0xac>
 8007ff6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	b111      	cbz	r1, 8008002 <_reclaim_reent+0x22>
 8007ffc:	4620      	mov	r0, r4
 8007ffe:	f001 fc11 	bl	8009824 <_free_r>
 8008002:	6961      	ldr	r1, [r4, #20]
 8008004:	b111      	cbz	r1, 800800c <_reclaim_reent+0x2c>
 8008006:	4620      	mov	r0, r4
 8008008:	f001 fc0c 	bl	8009824 <_free_r>
 800800c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800800e:	b111      	cbz	r1, 8008016 <_reclaim_reent+0x36>
 8008010:	4620      	mov	r0, r4
 8008012:	f001 fc07 	bl	8009824 <_free_r>
 8008016:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008018:	b111      	cbz	r1, 8008020 <_reclaim_reent+0x40>
 800801a:	4620      	mov	r0, r4
 800801c:	f001 fc02 	bl	8009824 <_free_r>
 8008020:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008022:	b111      	cbz	r1, 800802a <_reclaim_reent+0x4a>
 8008024:	4620      	mov	r0, r4
 8008026:	f001 fbfd 	bl	8009824 <_free_r>
 800802a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800802c:	b111      	cbz	r1, 8008034 <_reclaim_reent+0x54>
 800802e:	4620      	mov	r0, r4
 8008030:	f001 fbf8 	bl	8009824 <_free_r>
 8008034:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008036:	b111      	cbz	r1, 800803e <_reclaim_reent+0x5e>
 8008038:	4620      	mov	r0, r4
 800803a:	f001 fbf3 	bl	8009824 <_free_r>
 800803e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008040:	b111      	cbz	r1, 8008048 <_reclaim_reent+0x68>
 8008042:	4620      	mov	r0, r4
 8008044:	f001 fbee 	bl	8009824 <_free_r>
 8008048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800804a:	b111      	cbz	r1, 8008052 <_reclaim_reent+0x72>
 800804c:	4620      	mov	r0, r4
 800804e:	f001 fbe9 	bl	8009824 <_free_r>
 8008052:	69a3      	ldr	r3, [r4, #24]
 8008054:	b1e3      	cbz	r3, 8008090 <_reclaim_reent+0xb0>
 8008056:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008058:	4620      	mov	r0, r4
 800805a:	4798      	blx	r3
 800805c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800805e:	b1b9      	cbz	r1, 8008090 <_reclaim_reent+0xb0>
 8008060:	4620      	mov	r0, r4
 8008062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008066:	f7ff bfad 	b.w	8007fc4 <cleanup_glue>
 800806a:	5949      	ldr	r1, [r1, r5]
 800806c:	b941      	cbnz	r1, 8008080 <_reclaim_reent+0xa0>
 800806e:	3504      	adds	r5, #4
 8008070:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008072:	2d80      	cmp	r5, #128	; 0x80
 8008074:	68d9      	ldr	r1, [r3, #12]
 8008076:	d1f8      	bne.n	800806a <_reclaim_reent+0x8a>
 8008078:	4620      	mov	r0, r4
 800807a:	f001 fbd3 	bl	8009824 <_free_r>
 800807e:	e7ba      	b.n	8007ff6 <_reclaim_reent+0x16>
 8008080:	680e      	ldr	r6, [r1, #0]
 8008082:	4620      	mov	r0, r4
 8008084:	f001 fbce 	bl	8009824 <_free_r>
 8008088:	4631      	mov	r1, r6
 800808a:	e7ef      	b.n	800806c <_reclaim_reent+0x8c>
 800808c:	2500      	movs	r5, #0
 800808e:	e7ef      	b.n	8008070 <_reclaim_reent+0x90>
 8008090:	bd70      	pop	{r4, r5, r6, pc}
 8008092:	bf00      	nop
 8008094:	20000010 	.word	0x20000010

08008098 <_sbrk_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d06      	ldr	r5, [pc, #24]	; (80080b4 <_sbrk_r+0x1c>)
 800809c:	2300      	movs	r3, #0
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	602b      	str	r3, [r5, #0]
 80080a4:	f7f9 fce8 	bl	8001a78 <_sbrk>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d102      	bne.n	80080b2 <_sbrk_r+0x1a>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	b103      	cbz	r3, 80080b2 <_sbrk_r+0x1a>
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	20004ce4 	.word	0x20004ce4

080080b8 <siprintf>:
 80080b8:	b40e      	push	{r1, r2, r3}
 80080ba:	b500      	push	{lr}
 80080bc:	b09c      	sub	sp, #112	; 0x70
 80080be:	ab1d      	add	r3, sp, #116	; 0x74
 80080c0:	9002      	str	r0, [sp, #8]
 80080c2:	9006      	str	r0, [sp, #24]
 80080c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080c8:	4809      	ldr	r0, [pc, #36]	; (80080f0 <siprintf+0x38>)
 80080ca:	9107      	str	r1, [sp, #28]
 80080cc:	9104      	str	r1, [sp, #16]
 80080ce:	4909      	ldr	r1, [pc, #36]	; (80080f4 <siprintf+0x3c>)
 80080d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80080d4:	9105      	str	r1, [sp, #20]
 80080d6:	6800      	ldr	r0, [r0, #0]
 80080d8:	9301      	str	r3, [sp, #4]
 80080da:	a902      	add	r1, sp, #8
 80080dc:	f001 fc4a 	bl	8009974 <_svfiprintf_r>
 80080e0:	9b02      	ldr	r3, [sp, #8]
 80080e2:	2200      	movs	r2, #0
 80080e4:	701a      	strb	r2, [r3, #0]
 80080e6:	b01c      	add	sp, #112	; 0x70
 80080e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80080ec:	b003      	add	sp, #12
 80080ee:	4770      	bx	lr
 80080f0:	20000010 	.word	0x20000010
 80080f4:	ffff0208 	.word	0xffff0208

080080f8 <__sread>:
 80080f8:	b510      	push	{r4, lr}
 80080fa:	460c      	mov	r4, r1
 80080fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008100:	f001 fe92 	bl	8009e28 <_read_r>
 8008104:	2800      	cmp	r0, #0
 8008106:	bfab      	itete	ge
 8008108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800810a:	89a3      	ldrhlt	r3, [r4, #12]
 800810c:	181b      	addge	r3, r3, r0
 800810e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008112:	bfac      	ite	ge
 8008114:	6563      	strge	r3, [r4, #84]	; 0x54
 8008116:	81a3      	strhlt	r3, [r4, #12]
 8008118:	bd10      	pop	{r4, pc}

0800811a <__swrite>:
 800811a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800811e:	461f      	mov	r7, r3
 8008120:	898b      	ldrh	r3, [r1, #12]
 8008122:	05db      	lsls	r3, r3, #23
 8008124:	4605      	mov	r5, r0
 8008126:	460c      	mov	r4, r1
 8008128:	4616      	mov	r6, r2
 800812a:	d505      	bpl.n	8008138 <__swrite+0x1e>
 800812c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008130:	2302      	movs	r3, #2
 8008132:	2200      	movs	r2, #0
 8008134:	f000 ffb6 	bl	80090a4 <_lseek_r>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800813e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008142:	81a3      	strh	r3, [r4, #12]
 8008144:	4632      	mov	r2, r6
 8008146:	463b      	mov	r3, r7
 8008148:	4628      	mov	r0, r5
 800814a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800814e:	f000 b817 	b.w	8008180 <_write_r>

08008152 <__sseek>:
 8008152:	b510      	push	{r4, lr}
 8008154:	460c      	mov	r4, r1
 8008156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800815a:	f000 ffa3 	bl	80090a4 <_lseek_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	89a3      	ldrh	r3, [r4, #12]
 8008162:	bf15      	itete	ne
 8008164:	6560      	strne	r0, [r4, #84]	; 0x54
 8008166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800816a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800816e:	81a3      	strheq	r3, [r4, #12]
 8008170:	bf18      	it	ne
 8008172:	81a3      	strhne	r3, [r4, #12]
 8008174:	bd10      	pop	{r4, pc}

08008176 <__sclose>:
 8008176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800817a:	f000 b831 	b.w	80081e0 <_close_r>
	...

08008180 <_write_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	4d07      	ldr	r5, [pc, #28]	; (80081a0 <_write_r+0x20>)
 8008184:	4604      	mov	r4, r0
 8008186:	4608      	mov	r0, r1
 8008188:	4611      	mov	r1, r2
 800818a:	2200      	movs	r2, #0
 800818c:	602a      	str	r2, [r5, #0]
 800818e:	461a      	mov	r2, r3
 8008190:	f7f9 fc21 	bl	80019d6 <_write>
 8008194:	1c43      	adds	r3, r0, #1
 8008196:	d102      	bne.n	800819e <_write_r+0x1e>
 8008198:	682b      	ldr	r3, [r5, #0]
 800819a:	b103      	cbz	r3, 800819e <_write_r+0x1e>
 800819c:	6023      	str	r3, [r4, #0]
 800819e:	bd38      	pop	{r3, r4, r5, pc}
 80081a0:	20004ce4 	.word	0x20004ce4

080081a4 <__assert_func>:
 80081a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80081a6:	4614      	mov	r4, r2
 80081a8:	461a      	mov	r2, r3
 80081aa:	4b09      	ldr	r3, [pc, #36]	; (80081d0 <__assert_func+0x2c>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4605      	mov	r5, r0
 80081b0:	68d8      	ldr	r0, [r3, #12]
 80081b2:	b14c      	cbz	r4, 80081c8 <__assert_func+0x24>
 80081b4:	4b07      	ldr	r3, [pc, #28]	; (80081d4 <__assert_func+0x30>)
 80081b6:	9100      	str	r1, [sp, #0]
 80081b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80081bc:	4906      	ldr	r1, [pc, #24]	; (80081d8 <__assert_func+0x34>)
 80081be:	462b      	mov	r3, r5
 80081c0:	f000 ff5a 	bl	8009078 <fiprintf>
 80081c4:	f001 ff02 	bl	8009fcc <abort>
 80081c8:	4b04      	ldr	r3, [pc, #16]	; (80081dc <__assert_func+0x38>)
 80081ca:	461c      	mov	r4, r3
 80081cc:	e7f3      	b.n	80081b6 <__assert_func+0x12>
 80081ce:	bf00      	nop
 80081d0:	20000010 	.word	0x20000010
 80081d4:	0800a6aa 	.word	0x0800a6aa
 80081d8:	0800a6b7 	.word	0x0800a6b7
 80081dc:	0800a6e5 	.word	0x0800a6e5

080081e0 <_close_r>:
 80081e0:	b538      	push	{r3, r4, r5, lr}
 80081e2:	4d06      	ldr	r5, [pc, #24]	; (80081fc <_close_r+0x1c>)
 80081e4:	2300      	movs	r3, #0
 80081e6:	4604      	mov	r4, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	602b      	str	r3, [r5, #0]
 80081ec:	f7f9 fc0f 	bl	8001a0e <_close>
 80081f0:	1c43      	adds	r3, r0, #1
 80081f2:	d102      	bne.n	80081fa <_close_r+0x1a>
 80081f4:	682b      	ldr	r3, [r5, #0]
 80081f6:	b103      	cbz	r3, 80081fa <_close_r+0x1a>
 80081f8:	6023      	str	r3, [r4, #0]
 80081fa:	bd38      	pop	{r3, r4, r5, pc}
 80081fc:	20004ce4 	.word	0x20004ce4

08008200 <quorem>:
 8008200:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	6903      	ldr	r3, [r0, #16]
 8008206:	690c      	ldr	r4, [r1, #16]
 8008208:	42a3      	cmp	r3, r4
 800820a:	4607      	mov	r7, r0
 800820c:	f2c0 8081 	blt.w	8008312 <quorem+0x112>
 8008210:	3c01      	subs	r4, #1
 8008212:	f101 0814 	add.w	r8, r1, #20
 8008216:	f100 0514 	add.w	r5, r0, #20
 800821a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008224:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008228:	3301      	adds	r3, #1
 800822a:	429a      	cmp	r2, r3
 800822c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008230:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008234:	fbb2 f6f3 	udiv	r6, r2, r3
 8008238:	d331      	bcc.n	800829e <quorem+0x9e>
 800823a:	f04f 0e00 	mov.w	lr, #0
 800823e:	4640      	mov	r0, r8
 8008240:	46ac      	mov	ip, r5
 8008242:	46f2      	mov	sl, lr
 8008244:	f850 2b04 	ldr.w	r2, [r0], #4
 8008248:	b293      	uxth	r3, r2
 800824a:	fb06 e303 	mla	r3, r6, r3, lr
 800824e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008252:	b29b      	uxth	r3, r3
 8008254:	ebaa 0303 	sub.w	r3, sl, r3
 8008258:	f8dc a000 	ldr.w	sl, [ip]
 800825c:	0c12      	lsrs	r2, r2, #16
 800825e:	fa13 f38a 	uxtah	r3, r3, sl
 8008262:	fb06 e202 	mla	r2, r6, r2, lr
 8008266:	9300      	str	r3, [sp, #0]
 8008268:	9b00      	ldr	r3, [sp, #0]
 800826a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800826e:	b292      	uxth	r2, r2
 8008270:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008278:	f8bd 3000 	ldrh.w	r3, [sp]
 800827c:	4581      	cmp	r9, r0
 800827e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008282:	f84c 3b04 	str.w	r3, [ip], #4
 8008286:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800828a:	d2db      	bcs.n	8008244 <quorem+0x44>
 800828c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008290:	b92b      	cbnz	r3, 800829e <quorem+0x9e>
 8008292:	9b01      	ldr	r3, [sp, #4]
 8008294:	3b04      	subs	r3, #4
 8008296:	429d      	cmp	r5, r3
 8008298:	461a      	mov	r2, r3
 800829a:	d32e      	bcc.n	80082fa <quorem+0xfa>
 800829c:	613c      	str	r4, [r7, #16]
 800829e:	4638      	mov	r0, r7
 80082a0:	f001 f9a8 	bl	80095f4 <__mcmp>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	db24      	blt.n	80082f2 <quorem+0xf2>
 80082a8:	3601      	adds	r6, #1
 80082aa:	4628      	mov	r0, r5
 80082ac:	f04f 0c00 	mov.w	ip, #0
 80082b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80082b4:	f8d0 e000 	ldr.w	lr, [r0]
 80082b8:	b293      	uxth	r3, r2
 80082ba:	ebac 0303 	sub.w	r3, ip, r3
 80082be:	0c12      	lsrs	r2, r2, #16
 80082c0:	fa13 f38e 	uxtah	r3, r3, lr
 80082c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80082c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082d2:	45c1      	cmp	r9, r8
 80082d4:	f840 3b04 	str.w	r3, [r0], #4
 80082d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80082dc:	d2e8      	bcs.n	80082b0 <quorem+0xb0>
 80082de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80082e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80082e6:	b922      	cbnz	r2, 80082f2 <quorem+0xf2>
 80082e8:	3b04      	subs	r3, #4
 80082ea:	429d      	cmp	r5, r3
 80082ec:	461a      	mov	r2, r3
 80082ee:	d30a      	bcc.n	8008306 <quorem+0x106>
 80082f0:	613c      	str	r4, [r7, #16]
 80082f2:	4630      	mov	r0, r6
 80082f4:	b003      	add	sp, #12
 80082f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	3b04      	subs	r3, #4
 80082fe:	2a00      	cmp	r2, #0
 8008300:	d1cc      	bne.n	800829c <quorem+0x9c>
 8008302:	3c01      	subs	r4, #1
 8008304:	e7c7      	b.n	8008296 <quorem+0x96>
 8008306:	6812      	ldr	r2, [r2, #0]
 8008308:	3b04      	subs	r3, #4
 800830a:	2a00      	cmp	r2, #0
 800830c:	d1f0      	bne.n	80082f0 <quorem+0xf0>
 800830e:	3c01      	subs	r4, #1
 8008310:	e7eb      	b.n	80082ea <quorem+0xea>
 8008312:	2000      	movs	r0, #0
 8008314:	e7ee      	b.n	80082f4 <quorem+0xf4>
	...

08008318 <_dtoa_r>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	ed2d 8b04 	vpush	{d8-d9}
 8008320:	ec57 6b10 	vmov	r6, r7, d0
 8008324:	b093      	sub	sp, #76	; 0x4c
 8008326:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008328:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800832c:	9106      	str	r1, [sp, #24]
 800832e:	ee10 aa10 	vmov	sl, s0
 8008332:	4604      	mov	r4, r0
 8008334:	9209      	str	r2, [sp, #36]	; 0x24
 8008336:	930c      	str	r3, [sp, #48]	; 0x30
 8008338:	46bb      	mov	fp, r7
 800833a:	b975      	cbnz	r5, 800835a <_dtoa_r+0x42>
 800833c:	2010      	movs	r0, #16
 800833e:	f000 fec3 	bl	80090c8 <malloc>
 8008342:	4602      	mov	r2, r0
 8008344:	6260      	str	r0, [r4, #36]	; 0x24
 8008346:	b920      	cbnz	r0, 8008352 <_dtoa_r+0x3a>
 8008348:	4ba7      	ldr	r3, [pc, #668]	; (80085e8 <_dtoa_r+0x2d0>)
 800834a:	21ea      	movs	r1, #234	; 0xea
 800834c:	48a7      	ldr	r0, [pc, #668]	; (80085ec <_dtoa_r+0x2d4>)
 800834e:	f7ff ff29 	bl	80081a4 <__assert_func>
 8008352:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008356:	6005      	str	r5, [r0, #0]
 8008358:	60c5      	str	r5, [r0, #12]
 800835a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800835c:	6819      	ldr	r1, [r3, #0]
 800835e:	b151      	cbz	r1, 8008376 <_dtoa_r+0x5e>
 8008360:	685a      	ldr	r2, [r3, #4]
 8008362:	604a      	str	r2, [r1, #4]
 8008364:	2301      	movs	r3, #1
 8008366:	4093      	lsls	r3, r2
 8008368:	608b      	str	r3, [r1, #8]
 800836a:	4620      	mov	r0, r4
 800836c:	f000 ff00 	bl	8009170 <_Bfree>
 8008370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008372:	2200      	movs	r2, #0
 8008374:	601a      	str	r2, [r3, #0]
 8008376:	1e3b      	subs	r3, r7, #0
 8008378:	bfaa      	itet	ge
 800837a:	2300      	movge	r3, #0
 800837c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008380:	f8c8 3000 	strge.w	r3, [r8]
 8008384:	4b9a      	ldr	r3, [pc, #616]	; (80085f0 <_dtoa_r+0x2d8>)
 8008386:	bfbc      	itt	lt
 8008388:	2201      	movlt	r2, #1
 800838a:	f8c8 2000 	strlt.w	r2, [r8]
 800838e:	ea33 030b 	bics.w	r3, r3, fp
 8008392:	d11b      	bne.n	80083cc <_dtoa_r+0xb4>
 8008394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008396:	f242 730f 	movw	r3, #9999	; 0x270f
 800839a:	6013      	str	r3, [r2, #0]
 800839c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80083a0:	4333      	orrs	r3, r6
 80083a2:	f000 8592 	beq.w	8008eca <_dtoa_r+0xbb2>
 80083a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083a8:	b963      	cbnz	r3, 80083c4 <_dtoa_r+0xac>
 80083aa:	4b92      	ldr	r3, [pc, #584]	; (80085f4 <_dtoa_r+0x2dc>)
 80083ac:	e022      	b.n	80083f4 <_dtoa_r+0xdc>
 80083ae:	4b92      	ldr	r3, [pc, #584]	; (80085f8 <_dtoa_r+0x2e0>)
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	3308      	adds	r3, #8
 80083b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	9801      	ldr	r0, [sp, #4]
 80083ba:	b013      	add	sp, #76	; 0x4c
 80083bc:	ecbd 8b04 	vpop	{d8-d9}
 80083c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c4:	4b8b      	ldr	r3, [pc, #556]	; (80085f4 <_dtoa_r+0x2dc>)
 80083c6:	9301      	str	r3, [sp, #4]
 80083c8:	3303      	adds	r3, #3
 80083ca:	e7f3      	b.n	80083b4 <_dtoa_r+0x9c>
 80083cc:	2200      	movs	r2, #0
 80083ce:	2300      	movs	r3, #0
 80083d0:	4650      	mov	r0, sl
 80083d2:	4659      	mov	r1, fp
 80083d4:	f7f8 fb98 	bl	8000b08 <__aeabi_dcmpeq>
 80083d8:	ec4b ab19 	vmov	d9, sl, fp
 80083dc:	4680      	mov	r8, r0
 80083de:	b158      	cbz	r0, 80083f8 <_dtoa_r+0xe0>
 80083e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083e2:	2301      	movs	r3, #1
 80083e4:	6013      	str	r3, [r2, #0]
 80083e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 856b 	beq.w	8008ec4 <_dtoa_r+0xbac>
 80083ee:	4883      	ldr	r0, [pc, #524]	; (80085fc <_dtoa_r+0x2e4>)
 80083f0:	6018      	str	r0, [r3, #0]
 80083f2:	1e43      	subs	r3, r0, #1
 80083f4:	9301      	str	r3, [sp, #4]
 80083f6:	e7df      	b.n	80083b8 <_dtoa_r+0xa0>
 80083f8:	ec4b ab10 	vmov	d0, sl, fp
 80083fc:	aa10      	add	r2, sp, #64	; 0x40
 80083fe:	a911      	add	r1, sp, #68	; 0x44
 8008400:	4620      	mov	r0, r4
 8008402:	f001 f99d 	bl	8009740 <__d2b>
 8008406:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800840a:	ee08 0a10 	vmov	s16, r0
 800840e:	2d00      	cmp	r5, #0
 8008410:	f000 8084 	beq.w	800851c <_dtoa_r+0x204>
 8008414:	ee19 3a90 	vmov	r3, s19
 8008418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800841c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008420:	4656      	mov	r6, sl
 8008422:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800842a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800842e:	4b74      	ldr	r3, [pc, #464]	; (8008600 <_dtoa_r+0x2e8>)
 8008430:	2200      	movs	r2, #0
 8008432:	4630      	mov	r0, r6
 8008434:	4639      	mov	r1, r7
 8008436:	f7f7 ff47 	bl	80002c8 <__aeabi_dsub>
 800843a:	a365      	add	r3, pc, #404	; (adr r3, 80085d0 <_dtoa_r+0x2b8>)
 800843c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008440:	f7f8 f8fa 	bl	8000638 <__aeabi_dmul>
 8008444:	a364      	add	r3, pc, #400	; (adr r3, 80085d8 <_dtoa_r+0x2c0>)
 8008446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844a:	f7f7 ff3f 	bl	80002cc <__adddf3>
 800844e:	4606      	mov	r6, r0
 8008450:	4628      	mov	r0, r5
 8008452:	460f      	mov	r7, r1
 8008454:	f7f8 f886 	bl	8000564 <__aeabi_i2d>
 8008458:	a361      	add	r3, pc, #388	; (adr r3, 80085e0 <_dtoa_r+0x2c8>)
 800845a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800845e:	f7f8 f8eb 	bl	8000638 <__aeabi_dmul>
 8008462:	4602      	mov	r2, r0
 8008464:	460b      	mov	r3, r1
 8008466:	4630      	mov	r0, r6
 8008468:	4639      	mov	r1, r7
 800846a:	f7f7 ff2f 	bl	80002cc <__adddf3>
 800846e:	4606      	mov	r6, r0
 8008470:	460f      	mov	r7, r1
 8008472:	f7f8 fb91 	bl	8000b98 <__aeabi_d2iz>
 8008476:	2200      	movs	r2, #0
 8008478:	9000      	str	r0, [sp, #0]
 800847a:	2300      	movs	r3, #0
 800847c:	4630      	mov	r0, r6
 800847e:	4639      	mov	r1, r7
 8008480:	f7f8 fb4c 	bl	8000b1c <__aeabi_dcmplt>
 8008484:	b150      	cbz	r0, 800849c <_dtoa_r+0x184>
 8008486:	9800      	ldr	r0, [sp, #0]
 8008488:	f7f8 f86c 	bl	8000564 <__aeabi_i2d>
 800848c:	4632      	mov	r2, r6
 800848e:	463b      	mov	r3, r7
 8008490:	f7f8 fb3a 	bl	8000b08 <__aeabi_dcmpeq>
 8008494:	b910      	cbnz	r0, 800849c <_dtoa_r+0x184>
 8008496:	9b00      	ldr	r3, [sp, #0]
 8008498:	3b01      	subs	r3, #1
 800849a:	9300      	str	r3, [sp, #0]
 800849c:	9b00      	ldr	r3, [sp, #0]
 800849e:	2b16      	cmp	r3, #22
 80084a0:	d85a      	bhi.n	8008558 <_dtoa_r+0x240>
 80084a2:	9a00      	ldr	r2, [sp, #0]
 80084a4:	4b57      	ldr	r3, [pc, #348]	; (8008604 <_dtoa_r+0x2ec>)
 80084a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80084aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ae:	ec51 0b19 	vmov	r0, r1, d9
 80084b2:	f7f8 fb33 	bl	8000b1c <__aeabi_dcmplt>
 80084b6:	2800      	cmp	r0, #0
 80084b8:	d050      	beq.n	800855c <_dtoa_r+0x244>
 80084ba:	9b00      	ldr	r3, [sp, #0]
 80084bc:	3b01      	subs	r3, #1
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2300      	movs	r3, #0
 80084c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80084c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80084c6:	1b5d      	subs	r5, r3, r5
 80084c8:	1e6b      	subs	r3, r5, #1
 80084ca:	9305      	str	r3, [sp, #20]
 80084cc:	bf45      	ittet	mi
 80084ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80084d2:	9304      	strmi	r3, [sp, #16]
 80084d4:	2300      	movpl	r3, #0
 80084d6:	2300      	movmi	r3, #0
 80084d8:	bf4c      	ite	mi
 80084da:	9305      	strmi	r3, [sp, #20]
 80084dc:	9304      	strpl	r3, [sp, #16]
 80084de:	9b00      	ldr	r3, [sp, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	db3d      	blt.n	8008560 <_dtoa_r+0x248>
 80084e4:	9b05      	ldr	r3, [sp, #20]
 80084e6:	9a00      	ldr	r2, [sp, #0]
 80084e8:	920a      	str	r2, [sp, #40]	; 0x28
 80084ea:	4413      	add	r3, r2
 80084ec:	9305      	str	r3, [sp, #20]
 80084ee:	2300      	movs	r3, #0
 80084f0:	9307      	str	r3, [sp, #28]
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	f200 8089 	bhi.w	800860c <_dtoa_r+0x2f4>
 80084fa:	2b05      	cmp	r3, #5
 80084fc:	bfc4      	itt	gt
 80084fe:	3b04      	subgt	r3, #4
 8008500:	9306      	strgt	r3, [sp, #24]
 8008502:	9b06      	ldr	r3, [sp, #24]
 8008504:	f1a3 0302 	sub.w	r3, r3, #2
 8008508:	bfcc      	ite	gt
 800850a:	2500      	movgt	r5, #0
 800850c:	2501      	movle	r5, #1
 800850e:	2b03      	cmp	r3, #3
 8008510:	f200 8087 	bhi.w	8008622 <_dtoa_r+0x30a>
 8008514:	e8df f003 	tbb	[pc, r3]
 8008518:	59383a2d 	.word	0x59383a2d
 800851c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008520:	441d      	add	r5, r3
 8008522:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008526:	2b20      	cmp	r3, #32
 8008528:	bfc1      	itttt	gt
 800852a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800852e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008532:	fa0b f303 	lslgt.w	r3, fp, r3
 8008536:	fa26 f000 	lsrgt.w	r0, r6, r0
 800853a:	bfda      	itte	le
 800853c:	f1c3 0320 	rsble	r3, r3, #32
 8008540:	fa06 f003 	lslle.w	r0, r6, r3
 8008544:	4318      	orrgt	r0, r3
 8008546:	f7f7 fffd 	bl	8000544 <__aeabi_ui2d>
 800854a:	2301      	movs	r3, #1
 800854c:	4606      	mov	r6, r0
 800854e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008552:	3d01      	subs	r5, #1
 8008554:	930e      	str	r3, [sp, #56]	; 0x38
 8008556:	e76a      	b.n	800842e <_dtoa_r+0x116>
 8008558:	2301      	movs	r3, #1
 800855a:	e7b2      	b.n	80084c2 <_dtoa_r+0x1aa>
 800855c:	900b      	str	r0, [sp, #44]	; 0x2c
 800855e:	e7b1      	b.n	80084c4 <_dtoa_r+0x1ac>
 8008560:	9b04      	ldr	r3, [sp, #16]
 8008562:	9a00      	ldr	r2, [sp, #0]
 8008564:	1a9b      	subs	r3, r3, r2
 8008566:	9304      	str	r3, [sp, #16]
 8008568:	4253      	negs	r3, r2
 800856a:	9307      	str	r3, [sp, #28]
 800856c:	2300      	movs	r3, #0
 800856e:	930a      	str	r3, [sp, #40]	; 0x28
 8008570:	e7bf      	b.n	80084f2 <_dtoa_r+0x1da>
 8008572:	2300      	movs	r3, #0
 8008574:	9308      	str	r3, [sp, #32]
 8008576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008578:	2b00      	cmp	r3, #0
 800857a:	dc55      	bgt.n	8008628 <_dtoa_r+0x310>
 800857c:	2301      	movs	r3, #1
 800857e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008582:	461a      	mov	r2, r3
 8008584:	9209      	str	r2, [sp, #36]	; 0x24
 8008586:	e00c      	b.n	80085a2 <_dtoa_r+0x28a>
 8008588:	2301      	movs	r3, #1
 800858a:	e7f3      	b.n	8008574 <_dtoa_r+0x25c>
 800858c:	2300      	movs	r3, #0
 800858e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008590:	9308      	str	r3, [sp, #32]
 8008592:	9b00      	ldr	r3, [sp, #0]
 8008594:	4413      	add	r3, r2
 8008596:	9302      	str	r3, [sp, #8]
 8008598:	3301      	adds	r3, #1
 800859a:	2b01      	cmp	r3, #1
 800859c:	9303      	str	r3, [sp, #12]
 800859e:	bfb8      	it	lt
 80085a0:	2301      	movlt	r3, #1
 80085a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80085a4:	2200      	movs	r2, #0
 80085a6:	6042      	str	r2, [r0, #4]
 80085a8:	2204      	movs	r2, #4
 80085aa:	f102 0614 	add.w	r6, r2, #20
 80085ae:	429e      	cmp	r6, r3
 80085b0:	6841      	ldr	r1, [r0, #4]
 80085b2:	d93d      	bls.n	8008630 <_dtoa_r+0x318>
 80085b4:	4620      	mov	r0, r4
 80085b6:	f000 fd9b 	bl	80090f0 <_Balloc>
 80085ba:	9001      	str	r0, [sp, #4]
 80085bc:	2800      	cmp	r0, #0
 80085be:	d13b      	bne.n	8008638 <_dtoa_r+0x320>
 80085c0:	4b11      	ldr	r3, [pc, #68]	; (8008608 <_dtoa_r+0x2f0>)
 80085c2:	4602      	mov	r2, r0
 80085c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80085c8:	e6c0      	b.n	800834c <_dtoa_r+0x34>
 80085ca:	2301      	movs	r3, #1
 80085cc:	e7df      	b.n	800858e <_dtoa_r+0x276>
 80085ce:	bf00      	nop
 80085d0:	636f4361 	.word	0x636f4361
 80085d4:	3fd287a7 	.word	0x3fd287a7
 80085d8:	8b60c8b3 	.word	0x8b60c8b3
 80085dc:	3fc68a28 	.word	0x3fc68a28
 80085e0:	509f79fb 	.word	0x509f79fb
 80085e4:	3fd34413 	.word	0x3fd34413
 80085e8:	0800a638 	.word	0x0800a638
 80085ec:	0800a6f3 	.word	0x0800a6f3
 80085f0:	7ff00000 	.word	0x7ff00000
 80085f4:	0800a6ef 	.word	0x0800a6ef
 80085f8:	0800a6e6 	.word	0x0800a6e6
 80085fc:	0800a615 	.word	0x0800a615
 8008600:	3ff80000 	.word	0x3ff80000
 8008604:	0800a7e8 	.word	0x0800a7e8
 8008608:	0800a74e 	.word	0x0800a74e
 800860c:	2501      	movs	r5, #1
 800860e:	2300      	movs	r3, #0
 8008610:	9306      	str	r3, [sp, #24]
 8008612:	9508      	str	r5, [sp, #32]
 8008614:	f04f 33ff 	mov.w	r3, #4294967295
 8008618:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800861c:	2200      	movs	r2, #0
 800861e:	2312      	movs	r3, #18
 8008620:	e7b0      	b.n	8008584 <_dtoa_r+0x26c>
 8008622:	2301      	movs	r3, #1
 8008624:	9308      	str	r3, [sp, #32]
 8008626:	e7f5      	b.n	8008614 <_dtoa_r+0x2fc>
 8008628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800862a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800862e:	e7b8      	b.n	80085a2 <_dtoa_r+0x28a>
 8008630:	3101      	adds	r1, #1
 8008632:	6041      	str	r1, [r0, #4]
 8008634:	0052      	lsls	r2, r2, #1
 8008636:	e7b8      	b.n	80085aa <_dtoa_r+0x292>
 8008638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800863a:	9a01      	ldr	r2, [sp, #4]
 800863c:	601a      	str	r2, [r3, #0]
 800863e:	9b03      	ldr	r3, [sp, #12]
 8008640:	2b0e      	cmp	r3, #14
 8008642:	f200 809d 	bhi.w	8008780 <_dtoa_r+0x468>
 8008646:	2d00      	cmp	r5, #0
 8008648:	f000 809a 	beq.w	8008780 <_dtoa_r+0x468>
 800864c:	9b00      	ldr	r3, [sp, #0]
 800864e:	2b00      	cmp	r3, #0
 8008650:	dd32      	ble.n	80086b8 <_dtoa_r+0x3a0>
 8008652:	4ab7      	ldr	r2, [pc, #732]	; (8008930 <_dtoa_r+0x618>)
 8008654:	f003 030f 	and.w	r3, r3, #15
 8008658:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800865c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008660:	9b00      	ldr	r3, [sp, #0]
 8008662:	05d8      	lsls	r0, r3, #23
 8008664:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008668:	d516      	bpl.n	8008698 <_dtoa_r+0x380>
 800866a:	4bb2      	ldr	r3, [pc, #712]	; (8008934 <_dtoa_r+0x61c>)
 800866c:	ec51 0b19 	vmov	r0, r1, d9
 8008670:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008674:	f7f8 f90a 	bl	800088c <__aeabi_ddiv>
 8008678:	f007 070f 	and.w	r7, r7, #15
 800867c:	4682      	mov	sl, r0
 800867e:	468b      	mov	fp, r1
 8008680:	2503      	movs	r5, #3
 8008682:	4eac      	ldr	r6, [pc, #688]	; (8008934 <_dtoa_r+0x61c>)
 8008684:	b957      	cbnz	r7, 800869c <_dtoa_r+0x384>
 8008686:	4642      	mov	r2, r8
 8008688:	464b      	mov	r3, r9
 800868a:	4650      	mov	r0, sl
 800868c:	4659      	mov	r1, fp
 800868e:	f7f8 f8fd 	bl	800088c <__aeabi_ddiv>
 8008692:	4682      	mov	sl, r0
 8008694:	468b      	mov	fp, r1
 8008696:	e028      	b.n	80086ea <_dtoa_r+0x3d2>
 8008698:	2502      	movs	r5, #2
 800869a:	e7f2      	b.n	8008682 <_dtoa_r+0x36a>
 800869c:	07f9      	lsls	r1, r7, #31
 800869e:	d508      	bpl.n	80086b2 <_dtoa_r+0x39a>
 80086a0:	4640      	mov	r0, r8
 80086a2:	4649      	mov	r1, r9
 80086a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80086a8:	f7f7 ffc6 	bl	8000638 <__aeabi_dmul>
 80086ac:	3501      	adds	r5, #1
 80086ae:	4680      	mov	r8, r0
 80086b0:	4689      	mov	r9, r1
 80086b2:	107f      	asrs	r7, r7, #1
 80086b4:	3608      	adds	r6, #8
 80086b6:	e7e5      	b.n	8008684 <_dtoa_r+0x36c>
 80086b8:	f000 809b 	beq.w	80087f2 <_dtoa_r+0x4da>
 80086bc:	9b00      	ldr	r3, [sp, #0]
 80086be:	4f9d      	ldr	r7, [pc, #628]	; (8008934 <_dtoa_r+0x61c>)
 80086c0:	425e      	negs	r6, r3
 80086c2:	4b9b      	ldr	r3, [pc, #620]	; (8008930 <_dtoa_r+0x618>)
 80086c4:	f006 020f 	and.w	r2, r6, #15
 80086c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	ec51 0b19 	vmov	r0, r1, d9
 80086d4:	f7f7 ffb0 	bl	8000638 <__aeabi_dmul>
 80086d8:	1136      	asrs	r6, r6, #4
 80086da:	4682      	mov	sl, r0
 80086dc:	468b      	mov	fp, r1
 80086de:	2300      	movs	r3, #0
 80086e0:	2502      	movs	r5, #2
 80086e2:	2e00      	cmp	r6, #0
 80086e4:	d17a      	bne.n	80087dc <_dtoa_r+0x4c4>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1d3      	bne.n	8008692 <_dtoa_r+0x37a>
 80086ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	f000 8082 	beq.w	80087f6 <_dtoa_r+0x4de>
 80086f2:	4b91      	ldr	r3, [pc, #580]	; (8008938 <_dtoa_r+0x620>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	4650      	mov	r0, sl
 80086f8:	4659      	mov	r1, fp
 80086fa:	f7f8 fa0f 	bl	8000b1c <__aeabi_dcmplt>
 80086fe:	2800      	cmp	r0, #0
 8008700:	d079      	beq.n	80087f6 <_dtoa_r+0x4de>
 8008702:	9b03      	ldr	r3, [sp, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d076      	beq.n	80087f6 <_dtoa_r+0x4de>
 8008708:	9b02      	ldr	r3, [sp, #8]
 800870a:	2b00      	cmp	r3, #0
 800870c:	dd36      	ble.n	800877c <_dtoa_r+0x464>
 800870e:	9b00      	ldr	r3, [sp, #0]
 8008710:	4650      	mov	r0, sl
 8008712:	4659      	mov	r1, fp
 8008714:	1e5f      	subs	r7, r3, #1
 8008716:	2200      	movs	r2, #0
 8008718:	4b88      	ldr	r3, [pc, #544]	; (800893c <_dtoa_r+0x624>)
 800871a:	f7f7 ff8d 	bl	8000638 <__aeabi_dmul>
 800871e:	9e02      	ldr	r6, [sp, #8]
 8008720:	4682      	mov	sl, r0
 8008722:	468b      	mov	fp, r1
 8008724:	3501      	adds	r5, #1
 8008726:	4628      	mov	r0, r5
 8008728:	f7f7 ff1c 	bl	8000564 <__aeabi_i2d>
 800872c:	4652      	mov	r2, sl
 800872e:	465b      	mov	r3, fp
 8008730:	f7f7 ff82 	bl	8000638 <__aeabi_dmul>
 8008734:	4b82      	ldr	r3, [pc, #520]	; (8008940 <_dtoa_r+0x628>)
 8008736:	2200      	movs	r2, #0
 8008738:	f7f7 fdc8 	bl	80002cc <__adddf3>
 800873c:	46d0      	mov	r8, sl
 800873e:	46d9      	mov	r9, fp
 8008740:	4682      	mov	sl, r0
 8008742:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008746:	2e00      	cmp	r6, #0
 8008748:	d158      	bne.n	80087fc <_dtoa_r+0x4e4>
 800874a:	4b7e      	ldr	r3, [pc, #504]	; (8008944 <_dtoa_r+0x62c>)
 800874c:	2200      	movs	r2, #0
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f7 fdb9 	bl	80002c8 <__aeabi_dsub>
 8008756:	4652      	mov	r2, sl
 8008758:	465b      	mov	r3, fp
 800875a:	4680      	mov	r8, r0
 800875c:	4689      	mov	r9, r1
 800875e:	f7f8 f9fb 	bl	8000b58 <__aeabi_dcmpgt>
 8008762:	2800      	cmp	r0, #0
 8008764:	f040 8295 	bne.w	8008c92 <_dtoa_r+0x97a>
 8008768:	4652      	mov	r2, sl
 800876a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800876e:	4640      	mov	r0, r8
 8008770:	4649      	mov	r1, r9
 8008772:	f7f8 f9d3 	bl	8000b1c <__aeabi_dcmplt>
 8008776:	2800      	cmp	r0, #0
 8008778:	f040 8289 	bne.w	8008c8e <_dtoa_r+0x976>
 800877c:	ec5b ab19 	vmov	sl, fp, d9
 8008780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008782:	2b00      	cmp	r3, #0
 8008784:	f2c0 8148 	blt.w	8008a18 <_dtoa_r+0x700>
 8008788:	9a00      	ldr	r2, [sp, #0]
 800878a:	2a0e      	cmp	r2, #14
 800878c:	f300 8144 	bgt.w	8008a18 <_dtoa_r+0x700>
 8008790:	4b67      	ldr	r3, [pc, #412]	; (8008930 <_dtoa_r+0x618>)
 8008792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008796:	e9d3 8900 	ldrd	r8, r9, [r3]
 800879a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879c:	2b00      	cmp	r3, #0
 800879e:	f280 80d5 	bge.w	800894c <_dtoa_r+0x634>
 80087a2:	9b03      	ldr	r3, [sp, #12]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f300 80d1 	bgt.w	800894c <_dtoa_r+0x634>
 80087aa:	f040 826f 	bne.w	8008c8c <_dtoa_r+0x974>
 80087ae:	4b65      	ldr	r3, [pc, #404]	; (8008944 <_dtoa_r+0x62c>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	f7f7 ff3f 	bl	8000638 <__aeabi_dmul>
 80087ba:	4652      	mov	r2, sl
 80087bc:	465b      	mov	r3, fp
 80087be:	f7f8 f9c1 	bl	8000b44 <__aeabi_dcmpge>
 80087c2:	9e03      	ldr	r6, [sp, #12]
 80087c4:	4637      	mov	r7, r6
 80087c6:	2800      	cmp	r0, #0
 80087c8:	f040 8245 	bne.w	8008c56 <_dtoa_r+0x93e>
 80087cc:	9d01      	ldr	r5, [sp, #4]
 80087ce:	2331      	movs	r3, #49	; 0x31
 80087d0:	f805 3b01 	strb.w	r3, [r5], #1
 80087d4:	9b00      	ldr	r3, [sp, #0]
 80087d6:	3301      	adds	r3, #1
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	e240      	b.n	8008c5e <_dtoa_r+0x946>
 80087dc:	07f2      	lsls	r2, r6, #31
 80087de:	d505      	bpl.n	80087ec <_dtoa_r+0x4d4>
 80087e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80087e4:	f7f7 ff28 	bl	8000638 <__aeabi_dmul>
 80087e8:	3501      	adds	r5, #1
 80087ea:	2301      	movs	r3, #1
 80087ec:	1076      	asrs	r6, r6, #1
 80087ee:	3708      	adds	r7, #8
 80087f0:	e777      	b.n	80086e2 <_dtoa_r+0x3ca>
 80087f2:	2502      	movs	r5, #2
 80087f4:	e779      	b.n	80086ea <_dtoa_r+0x3d2>
 80087f6:	9f00      	ldr	r7, [sp, #0]
 80087f8:	9e03      	ldr	r6, [sp, #12]
 80087fa:	e794      	b.n	8008726 <_dtoa_r+0x40e>
 80087fc:	9901      	ldr	r1, [sp, #4]
 80087fe:	4b4c      	ldr	r3, [pc, #304]	; (8008930 <_dtoa_r+0x618>)
 8008800:	4431      	add	r1, r6
 8008802:	910d      	str	r1, [sp, #52]	; 0x34
 8008804:	9908      	ldr	r1, [sp, #32]
 8008806:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800880a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800880e:	2900      	cmp	r1, #0
 8008810:	d043      	beq.n	800889a <_dtoa_r+0x582>
 8008812:	494d      	ldr	r1, [pc, #308]	; (8008948 <_dtoa_r+0x630>)
 8008814:	2000      	movs	r0, #0
 8008816:	f7f8 f839 	bl	800088c <__aeabi_ddiv>
 800881a:	4652      	mov	r2, sl
 800881c:	465b      	mov	r3, fp
 800881e:	f7f7 fd53 	bl	80002c8 <__aeabi_dsub>
 8008822:	9d01      	ldr	r5, [sp, #4]
 8008824:	4682      	mov	sl, r0
 8008826:	468b      	mov	fp, r1
 8008828:	4649      	mov	r1, r9
 800882a:	4640      	mov	r0, r8
 800882c:	f7f8 f9b4 	bl	8000b98 <__aeabi_d2iz>
 8008830:	4606      	mov	r6, r0
 8008832:	f7f7 fe97 	bl	8000564 <__aeabi_i2d>
 8008836:	4602      	mov	r2, r0
 8008838:	460b      	mov	r3, r1
 800883a:	4640      	mov	r0, r8
 800883c:	4649      	mov	r1, r9
 800883e:	f7f7 fd43 	bl	80002c8 <__aeabi_dsub>
 8008842:	3630      	adds	r6, #48	; 0x30
 8008844:	f805 6b01 	strb.w	r6, [r5], #1
 8008848:	4652      	mov	r2, sl
 800884a:	465b      	mov	r3, fp
 800884c:	4680      	mov	r8, r0
 800884e:	4689      	mov	r9, r1
 8008850:	f7f8 f964 	bl	8000b1c <__aeabi_dcmplt>
 8008854:	2800      	cmp	r0, #0
 8008856:	d163      	bne.n	8008920 <_dtoa_r+0x608>
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	4936      	ldr	r1, [pc, #216]	; (8008938 <_dtoa_r+0x620>)
 800885e:	2000      	movs	r0, #0
 8008860:	f7f7 fd32 	bl	80002c8 <__aeabi_dsub>
 8008864:	4652      	mov	r2, sl
 8008866:	465b      	mov	r3, fp
 8008868:	f7f8 f958 	bl	8000b1c <__aeabi_dcmplt>
 800886c:	2800      	cmp	r0, #0
 800886e:	f040 80b5 	bne.w	80089dc <_dtoa_r+0x6c4>
 8008872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008874:	429d      	cmp	r5, r3
 8008876:	d081      	beq.n	800877c <_dtoa_r+0x464>
 8008878:	4b30      	ldr	r3, [pc, #192]	; (800893c <_dtoa_r+0x624>)
 800887a:	2200      	movs	r2, #0
 800887c:	4650      	mov	r0, sl
 800887e:	4659      	mov	r1, fp
 8008880:	f7f7 feda 	bl	8000638 <__aeabi_dmul>
 8008884:	4b2d      	ldr	r3, [pc, #180]	; (800893c <_dtoa_r+0x624>)
 8008886:	4682      	mov	sl, r0
 8008888:	468b      	mov	fp, r1
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	2200      	movs	r2, #0
 8008890:	f7f7 fed2 	bl	8000638 <__aeabi_dmul>
 8008894:	4680      	mov	r8, r0
 8008896:	4689      	mov	r9, r1
 8008898:	e7c6      	b.n	8008828 <_dtoa_r+0x510>
 800889a:	4650      	mov	r0, sl
 800889c:	4659      	mov	r1, fp
 800889e:	f7f7 fecb 	bl	8000638 <__aeabi_dmul>
 80088a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088a4:	9d01      	ldr	r5, [sp, #4]
 80088a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80088a8:	4682      	mov	sl, r0
 80088aa:	468b      	mov	fp, r1
 80088ac:	4649      	mov	r1, r9
 80088ae:	4640      	mov	r0, r8
 80088b0:	f7f8 f972 	bl	8000b98 <__aeabi_d2iz>
 80088b4:	4606      	mov	r6, r0
 80088b6:	f7f7 fe55 	bl	8000564 <__aeabi_i2d>
 80088ba:	3630      	adds	r6, #48	; 0x30
 80088bc:	4602      	mov	r2, r0
 80088be:	460b      	mov	r3, r1
 80088c0:	4640      	mov	r0, r8
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7f7 fd00 	bl	80002c8 <__aeabi_dsub>
 80088c8:	f805 6b01 	strb.w	r6, [r5], #1
 80088cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088ce:	429d      	cmp	r5, r3
 80088d0:	4680      	mov	r8, r0
 80088d2:	4689      	mov	r9, r1
 80088d4:	f04f 0200 	mov.w	r2, #0
 80088d8:	d124      	bne.n	8008924 <_dtoa_r+0x60c>
 80088da:	4b1b      	ldr	r3, [pc, #108]	; (8008948 <_dtoa_r+0x630>)
 80088dc:	4650      	mov	r0, sl
 80088de:	4659      	mov	r1, fp
 80088e0:	f7f7 fcf4 	bl	80002cc <__adddf3>
 80088e4:	4602      	mov	r2, r0
 80088e6:	460b      	mov	r3, r1
 80088e8:	4640      	mov	r0, r8
 80088ea:	4649      	mov	r1, r9
 80088ec:	f7f8 f934 	bl	8000b58 <__aeabi_dcmpgt>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d173      	bne.n	80089dc <_dtoa_r+0x6c4>
 80088f4:	4652      	mov	r2, sl
 80088f6:	465b      	mov	r3, fp
 80088f8:	4913      	ldr	r1, [pc, #76]	; (8008948 <_dtoa_r+0x630>)
 80088fa:	2000      	movs	r0, #0
 80088fc:	f7f7 fce4 	bl	80002c8 <__aeabi_dsub>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4640      	mov	r0, r8
 8008906:	4649      	mov	r1, r9
 8008908:	f7f8 f908 	bl	8000b1c <__aeabi_dcmplt>
 800890c:	2800      	cmp	r0, #0
 800890e:	f43f af35 	beq.w	800877c <_dtoa_r+0x464>
 8008912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008914:	1e6b      	subs	r3, r5, #1
 8008916:	930f      	str	r3, [sp, #60]	; 0x3c
 8008918:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800891c:	2b30      	cmp	r3, #48	; 0x30
 800891e:	d0f8      	beq.n	8008912 <_dtoa_r+0x5fa>
 8008920:	9700      	str	r7, [sp, #0]
 8008922:	e049      	b.n	80089b8 <_dtoa_r+0x6a0>
 8008924:	4b05      	ldr	r3, [pc, #20]	; (800893c <_dtoa_r+0x624>)
 8008926:	f7f7 fe87 	bl	8000638 <__aeabi_dmul>
 800892a:	4680      	mov	r8, r0
 800892c:	4689      	mov	r9, r1
 800892e:	e7bd      	b.n	80088ac <_dtoa_r+0x594>
 8008930:	0800a7e8 	.word	0x0800a7e8
 8008934:	0800a7c0 	.word	0x0800a7c0
 8008938:	3ff00000 	.word	0x3ff00000
 800893c:	40240000 	.word	0x40240000
 8008940:	401c0000 	.word	0x401c0000
 8008944:	40140000 	.word	0x40140000
 8008948:	3fe00000 	.word	0x3fe00000
 800894c:	9d01      	ldr	r5, [sp, #4]
 800894e:	4656      	mov	r6, sl
 8008950:	465f      	mov	r7, fp
 8008952:	4642      	mov	r2, r8
 8008954:	464b      	mov	r3, r9
 8008956:	4630      	mov	r0, r6
 8008958:	4639      	mov	r1, r7
 800895a:	f7f7 ff97 	bl	800088c <__aeabi_ddiv>
 800895e:	f7f8 f91b 	bl	8000b98 <__aeabi_d2iz>
 8008962:	4682      	mov	sl, r0
 8008964:	f7f7 fdfe 	bl	8000564 <__aeabi_i2d>
 8008968:	4642      	mov	r2, r8
 800896a:	464b      	mov	r3, r9
 800896c:	f7f7 fe64 	bl	8000638 <__aeabi_dmul>
 8008970:	4602      	mov	r2, r0
 8008972:	460b      	mov	r3, r1
 8008974:	4630      	mov	r0, r6
 8008976:	4639      	mov	r1, r7
 8008978:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800897c:	f7f7 fca4 	bl	80002c8 <__aeabi_dsub>
 8008980:	f805 6b01 	strb.w	r6, [r5], #1
 8008984:	9e01      	ldr	r6, [sp, #4]
 8008986:	9f03      	ldr	r7, [sp, #12]
 8008988:	1bae      	subs	r6, r5, r6
 800898a:	42b7      	cmp	r7, r6
 800898c:	4602      	mov	r2, r0
 800898e:	460b      	mov	r3, r1
 8008990:	d135      	bne.n	80089fe <_dtoa_r+0x6e6>
 8008992:	f7f7 fc9b 	bl	80002cc <__adddf3>
 8008996:	4642      	mov	r2, r8
 8008998:	464b      	mov	r3, r9
 800899a:	4606      	mov	r6, r0
 800899c:	460f      	mov	r7, r1
 800899e:	f7f8 f8db 	bl	8000b58 <__aeabi_dcmpgt>
 80089a2:	b9d0      	cbnz	r0, 80089da <_dtoa_r+0x6c2>
 80089a4:	4642      	mov	r2, r8
 80089a6:	464b      	mov	r3, r9
 80089a8:	4630      	mov	r0, r6
 80089aa:	4639      	mov	r1, r7
 80089ac:	f7f8 f8ac 	bl	8000b08 <__aeabi_dcmpeq>
 80089b0:	b110      	cbz	r0, 80089b8 <_dtoa_r+0x6a0>
 80089b2:	f01a 0f01 	tst.w	sl, #1
 80089b6:	d110      	bne.n	80089da <_dtoa_r+0x6c2>
 80089b8:	4620      	mov	r0, r4
 80089ba:	ee18 1a10 	vmov	r1, s16
 80089be:	f000 fbd7 	bl	8009170 <_Bfree>
 80089c2:	2300      	movs	r3, #0
 80089c4:	9800      	ldr	r0, [sp, #0]
 80089c6:	702b      	strb	r3, [r5, #0]
 80089c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089ca:	3001      	adds	r0, #1
 80089cc:	6018      	str	r0, [r3, #0]
 80089ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	f43f acf1 	beq.w	80083b8 <_dtoa_r+0xa0>
 80089d6:	601d      	str	r5, [r3, #0]
 80089d8:	e4ee      	b.n	80083b8 <_dtoa_r+0xa0>
 80089da:	9f00      	ldr	r7, [sp, #0]
 80089dc:	462b      	mov	r3, r5
 80089de:	461d      	mov	r5, r3
 80089e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089e4:	2a39      	cmp	r2, #57	; 0x39
 80089e6:	d106      	bne.n	80089f6 <_dtoa_r+0x6de>
 80089e8:	9a01      	ldr	r2, [sp, #4]
 80089ea:	429a      	cmp	r2, r3
 80089ec:	d1f7      	bne.n	80089de <_dtoa_r+0x6c6>
 80089ee:	9901      	ldr	r1, [sp, #4]
 80089f0:	2230      	movs	r2, #48	; 0x30
 80089f2:	3701      	adds	r7, #1
 80089f4:	700a      	strb	r2, [r1, #0]
 80089f6:	781a      	ldrb	r2, [r3, #0]
 80089f8:	3201      	adds	r2, #1
 80089fa:	701a      	strb	r2, [r3, #0]
 80089fc:	e790      	b.n	8008920 <_dtoa_r+0x608>
 80089fe:	4ba6      	ldr	r3, [pc, #664]	; (8008c98 <_dtoa_r+0x980>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	f7f7 fe19 	bl	8000638 <__aeabi_dmul>
 8008a06:	2200      	movs	r2, #0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460f      	mov	r7, r1
 8008a0e:	f7f8 f87b 	bl	8000b08 <__aeabi_dcmpeq>
 8008a12:	2800      	cmp	r0, #0
 8008a14:	d09d      	beq.n	8008952 <_dtoa_r+0x63a>
 8008a16:	e7cf      	b.n	80089b8 <_dtoa_r+0x6a0>
 8008a18:	9a08      	ldr	r2, [sp, #32]
 8008a1a:	2a00      	cmp	r2, #0
 8008a1c:	f000 80d7 	beq.w	8008bce <_dtoa_r+0x8b6>
 8008a20:	9a06      	ldr	r2, [sp, #24]
 8008a22:	2a01      	cmp	r2, #1
 8008a24:	f300 80ba 	bgt.w	8008b9c <_dtoa_r+0x884>
 8008a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a2a:	2a00      	cmp	r2, #0
 8008a2c:	f000 80b2 	beq.w	8008b94 <_dtoa_r+0x87c>
 8008a30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a34:	9e07      	ldr	r6, [sp, #28]
 8008a36:	9d04      	ldr	r5, [sp, #16]
 8008a38:	9a04      	ldr	r2, [sp, #16]
 8008a3a:	441a      	add	r2, r3
 8008a3c:	9204      	str	r2, [sp, #16]
 8008a3e:	9a05      	ldr	r2, [sp, #20]
 8008a40:	2101      	movs	r1, #1
 8008a42:	441a      	add	r2, r3
 8008a44:	4620      	mov	r0, r4
 8008a46:	9205      	str	r2, [sp, #20]
 8008a48:	f000 fc4a 	bl	80092e0 <__i2b>
 8008a4c:	4607      	mov	r7, r0
 8008a4e:	2d00      	cmp	r5, #0
 8008a50:	dd0c      	ble.n	8008a6c <_dtoa_r+0x754>
 8008a52:	9b05      	ldr	r3, [sp, #20]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	dd09      	ble.n	8008a6c <_dtoa_r+0x754>
 8008a58:	42ab      	cmp	r3, r5
 8008a5a:	9a04      	ldr	r2, [sp, #16]
 8008a5c:	bfa8      	it	ge
 8008a5e:	462b      	movge	r3, r5
 8008a60:	1ad2      	subs	r2, r2, r3
 8008a62:	9204      	str	r2, [sp, #16]
 8008a64:	9a05      	ldr	r2, [sp, #20]
 8008a66:	1aed      	subs	r5, r5, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	9305      	str	r3, [sp, #20]
 8008a6c:	9b07      	ldr	r3, [sp, #28]
 8008a6e:	b31b      	cbz	r3, 8008ab8 <_dtoa_r+0x7a0>
 8008a70:	9b08      	ldr	r3, [sp, #32]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	f000 80af 	beq.w	8008bd6 <_dtoa_r+0x8be>
 8008a78:	2e00      	cmp	r6, #0
 8008a7a:	dd13      	ble.n	8008aa4 <_dtoa_r+0x78c>
 8008a7c:	4639      	mov	r1, r7
 8008a7e:	4632      	mov	r2, r6
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fced 	bl	8009460 <__pow5mult>
 8008a86:	ee18 2a10 	vmov	r2, s16
 8008a8a:	4601      	mov	r1, r0
 8008a8c:	4607      	mov	r7, r0
 8008a8e:	4620      	mov	r0, r4
 8008a90:	f000 fc3c 	bl	800930c <__multiply>
 8008a94:	ee18 1a10 	vmov	r1, s16
 8008a98:	4680      	mov	r8, r0
 8008a9a:	4620      	mov	r0, r4
 8008a9c:	f000 fb68 	bl	8009170 <_Bfree>
 8008aa0:	ee08 8a10 	vmov	s16, r8
 8008aa4:	9b07      	ldr	r3, [sp, #28]
 8008aa6:	1b9a      	subs	r2, r3, r6
 8008aa8:	d006      	beq.n	8008ab8 <_dtoa_r+0x7a0>
 8008aaa:	ee18 1a10 	vmov	r1, s16
 8008aae:	4620      	mov	r0, r4
 8008ab0:	f000 fcd6 	bl	8009460 <__pow5mult>
 8008ab4:	ee08 0a10 	vmov	s16, r0
 8008ab8:	2101      	movs	r1, #1
 8008aba:	4620      	mov	r0, r4
 8008abc:	f000 fc10 	bl	80092e0 <__i2b>
 8008ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	4606      	mov	r6, r0
 8008ac6:	f340 8088 	ble.w	8008bda <_dtoa_r+0x8c2>
 8008aca:	461a      	mov	r2, r3
 8008acc:	4601      	mov	r1, r0
 8008ace:	4620      	mov	r0, r4
 8008ad0:	f000 fcc6 	bl	8009460 <__pow5mult>
 8008ad4:	9b06      	ldr	r3, [sp, #24]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	4606      	mov	r6, r0
 8008ada:	f340 8081 	ble.w	8008be0 <_dtoa_r+0x8c8>
 8008ade:	f04f 0800 	mov.w	r8, #0
 8008ae2:	6933      	ldr	r3, [r6, #16]
 8008ae4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008ae8:	6918      	ldr	r0, [r3, #16]
 8008aea:	f000 fba9 	bl	8009240 <__hi0bits>
 8008aee:	f1c0 0020 	rsb	r0, r0, #32
 8008af2:	9b05      	ldr	r3, [sp, #20]
 8008af4:	4418      	add	r0, r3
 8008af6:	f010 001f 	ands.w	r0, r0, #31
 8008afa:	f000 8092 	beq.w	8008c22 <_dtoa_r+0x90a>
 8008afe:	f1c0 0320 	rsb	r3, r0, #32
 8008b02:	2b04      	cmp	r3, #4
 8008b04:	f340 808a 	ble.w	8008c1c <_dtoa_r+0x904>
 8008b08:	f1c0 001c 	rsb	r0, r0, #28
 8008b0c:	9b04      	ldr	r3, [sp, #16]
 8008b0e:	4403      	add	r3, r0
 8008b10:	9304      	str	r3, [sp, #16]
 8008b12:	9b05      	ldr	r3, [sp, #20]
 8008b14:	4403      	add	r3, r0
 8008b16:	4405      	add	r5, r0
 8008b18:	9305      	str	r3, [sp, #20]
 8008b1a:	9b04      	ldr	r3, [sp, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	dd07      	ble.n	8008b30 <_dtoa_r+0x818>
 8008b20:	ee18 1a10 	vmov	r1, s16
 8008b24:	461a      	mov	r2, r3
 8008b26:	4620      	mov	r0, r4
 8008b28:	f000 fcf4 	bl	8009514 <__lshift>
 8008b2c:	ee08 0a10 	vmov	s16, r0
 8008b30:	9b05      	ldr	r3, [sp, #20]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	dd05      	ble.n	8008b42 <_dtoa_r+0x82a>
 8008b36:	4631      	mov	r1, r6
 8008b38:	461a      	mov	r2, r3
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f000 fcea 	bl	8009514 <__lshift>
 8008b40:	4606      	mov	r6, r0
 8008b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d06e      	beq.n	8008c26 <_dtoa_r+0x90e>
 8008b48:	ee18 0a10 	vmov	r0, s16
 8008b4c:	4631      	mov	r1, r6
 8008b4e:	f000 fd51 	bl	80095f4 <__mcmp>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	da67      	bge.n	8008c26 <_dtoa_r+0x90e>
 8008b56:	9b00      	ldr	r3, [sp, #0]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	ee18 1a10 	vmov	r1, s16
 8008b5e:	9300      	str	r3, [sp, #0]
 8008b60:	220a      	movs	r2, #10
 8008b62:	2300      	movs	r3, #0
 8008b64:	4620      	mov	r0, r4
 8008b66:	f000 fb25 	bl	80091b4 <__multadd>
 8008b6a:	9b08      	ldr	r3, [sp, #32]
 8008b6c:	ee08 0a10 	vmov	s16, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f000 81b1 	beq.w	8008ed8 <_dtoa_r+0xbc0>
 8008b76:	2300      	movs	r3, #0
 8008b78:	4639      	mov	r1, r7
 8008b7a:	220a      	movs	r2, #10
 8008b7c:	4620      	mov	r0, r4
 8008b7e:	f000 fb19 	bl	80091b4 <__multadd>
 8008b82:	9b02      	ldr	r3, [sp, #8]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	4607      	mov	r7, r0
 8008b88:	f300 808e 	bgt.w	8008ca8 <_dtoa_r+0x990>
 8008b8c:	9b06      	ldr	r3, [sp, #24]
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	dc51      	bgt.n	8008c36 <_dtoa_r+0x91e>
 8008b92:	e089      	b.n	8008ca8 <_dtoa_r+0x990>
 8008b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b9a:	e74b      	b.n	8008a34 <_dtoa_r+0x71c>
 8008b9c:	9b03      	ldr	r3, [sp, #12]
 8008b9e:	1e5e      	subs	r6, r3, #1
 8008ba0:	9b07      	ldr	r3, [sp, #28]
 8008ba2:	42b3      	cmp	r3, r6
 8008ba4:	bfbf      	itttt	lt
 8008ba6:	9b07      	ldrlt	r3, [sp, #28]
 8008ba8:	9607      	strlt	r6, [sp, #28]
 8008baa:	1af2      	sublt	r2, r6, r3
 8008bac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008bae:	bfb6      	itet	lt
 8008bb0:	189b      	addlt	r3, r3, r2
 8008bb2:	1b9e      	subge	r6, r3, r6
 8008bb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008bb6:	9b03      	ldr	r3, [sp, #12]
 8008bb8:	bfb8      	it	lt
 8008bba:	2600      	movlt	r6, #0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bfb7      	itett	lt
 8008bc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008bc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008bc8:	1a9d      	sublt	r5, r3, r2
 8008bca:	2300      	movlt	r3, #0
 8008bcc:	e734      	b.n	8008a38 <_dtoa_r+0x720>
 8008bce:	9e07      	ldr	r6, [sp, #28]
 8008bd0:	9d04      	ldr	r5, [sp, #16]
 8008bd2:	9f08      	ldr	r7, [sp, #32]
 8008bd4:	e73b      	b.n	8008a4e <_dtoa_r+0x736>
 8008bd6:	9a07      	ldr	r2, [sp, #28]
 8008bd8:	e767      	b.n	8008aaa <_dtoa_r+0x792>
 8008bda:	9b06      	ldr	r3, [sp, #24]
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	dc18      	bgt.n	8008c12 <_dtoa_r+0x8fa>
 8008be0:	f1ba 0f00 	cmp.w	sl, #0
 8008be4:	d115      	bne.n	8008c12 <_dtoa_r+0x8fa>
 8008be6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bea:	b993      	cbnz	r3, 8008c12 <_dtoa_r+0x8fa>
 8008bec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bf0:	0d1b      	lsrs	r3, r3, #20
 8008bf2:	051b      	lsls	r3, r3, #20
 8008bf4:	b183      	cbz	r3, 8008c18 <_dtoa_r+0x900>
 8008bf6:	9b04      	ldr	r3, [sp, #16]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	9304      	str	r3, [sp, #16]
 8008bfc:	9b05      	ldr	r3, [sp, #20]
 8008bfe:	3301      	adds	r3, #1
 8008c00:	9305      	str	r3, [sp, #20]
 8008c02:	f04f 0801 	mov.w	r8, #1
 8008c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	f47f af6a 	bne.w	8008ae2 <_dtoa_r+0x7ca>
 8008c0e:	2001      	movs	r0, #1
 8008c10:	e76f      	b.n	8008af2 <_dtoa_r+0x7da>
 8008c12:	f04f 0800 	mov.w	r8, #0
 8008c16:	e7f6      	b.n	8008c06 <_dtoa_r+0x8ee>
 8008c18:	4698      	mov	r8, r3
 8008c1a:	e7f4      	b.n	8008c06 <_dtoa_r+0x8ee>
 8008c1c:	f43f af7d 	beq.w	8008b1a <_dtoa_r+0x802>
 8008c20:	4618      	mov	r0, r3
 8008c22:	301c      	adds	r0, #28
 8008c24:	e772      	b.n	8008b0c <_dtoa_r+0x7f4>
 8008c26:	9b03      	ldr	r3, [sp, #12]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	dc37      	bgt.n	8008c9c <_dtoa_r+0x984>
 8008c2c:	9b06      	ldr	r3, [sp, #24]
 8008c2e:	2b02      	cmp	r3, #2
 8008c30:	dd34      	ble.n	8008c9c <_dtoa_r+0x984>
 8008c32:	9b03      	ldr	r3, [sp, #12]
 8008c34:	9302      	str	r3, [sp, #8]
 8008c36:	9b02      	ldr	r3, [sp, #8]
 8008c38:	b96b      	cbnz	r3, 8008c56 <_dtoa_r+0x93e>
 8008c3a:	4631      	mov	r1, r6
 8008c3c:	2205      	movs	r2, #5
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f000 fab8 	bl	80091b4 <__multadd>
 8008c44:	4601      	mov	r1, r0
 8008c46:	4606      	mov	r6, r0
 8008c48:	ee18 0a10 	vmov	r0, s16
 8008c4c:	f000 fcd2 	bl	80095f4 <__mcmp>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	f73f adbb 	bgt.w	80087cc <_dtoa_r+0x4b4>
 8008c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c58:	9d01      	ldr	r5, [sp, #4]
 8008c5a:	43db      	mvns	r3, r3
 8008c5c:	9300      	str	r3, [sp, #0]
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	4631      	mov	r1, r6
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 fa83 	bl	8009170 <_Bfree>
 8008c6a:	2f00      	cmp	r7, #0
 8008c6c:	f43f aea4 	beq.w	80089b8 <_dtoa_r+0x6a0>
 8008c70:	f1b8 0f00 	cmp.w	r8, #0
 8008c74:	d005      	beq.n	8008c82 <_dtoa_r+0x96a>
 8008c76:	45b8      	cmp	r8, r7
 8008c78:	d003      	beq.n	8008c82 <_dtoa_r+0x96a>
 8008c7a:	4641      	mov	r1, r8
 8008c7c:	4620      	mov	r0, r4
 8008c7e:	f000 fa77 	bl	8009170 <_Bfree>
 8008c82:	4639      	mov	r1, r7
 8008c84:	4620      	mov	r0, r4
 8008c86:	f000 fa73 	bl	8009170 <_Bfree>
 8008c8a:	e695      	b.n	80089b8 <_dtoa_r+0x6a0>
 8008c8c:	2600      	movs	r6, #0
 8008c8e:	4637      	mov	r7, r6
 8008c90:	e7e1      	b.n	8008c56 <_dtoa_r+0x93e>
 8008c92:	9700      	str	r7, [sp, #0]
 8008c94:	4637      	mov	r7, r6
 8008c96:	e599      	b.n	80087cc <_dtoa_r+0x4b4>
 8008c98:	40240000 	.word	0x40240000
 8008c9c:	9b08      	ldr	r3, [sp, #32]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f000 80ca 	beq.w	8008e38 <_dtoa_r+0xb20>
 8008ca4:	9b03      	ldr	r3, [sp, #12]
 8008ca6:	9302      	str	r3, [sp, #8]
 8008ca8:	2d00      	cmp	r5, #0
 8008caa:	dd05      	ble.n	8008cb8 <_dtoa_r+0x9a0>
 8008cac:	4639      	mov	r1, r7
 8008cae:	462a      	mov	r2, r5
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	f000 fc2f 	bl	8009514 <__lshift>
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	f1b8 0f00 	cmp.w	r8, #0
 8008cbc:	d05b      	beq.n	8008d76 <_dtoa_r+0xa5e>
 8008cbe:	6879      	ldr	r1, [r7, #4]
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 fa15 	bl	80090f0 <_Balloc>
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	b928      	cbnz	r0, 8008cd6 <_dtoa_r+0x9be>
 8008cca:	4b87      	ldr	r3, [pc, #540]	; (8008ee8 <_dtoa_r+0xbd0>)
 8008ccc:	4602      	mov	r2, r0
 8008cce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008cd2:	f7ff bb3b 	b.w	800834c <_dtoa_r+0x34>
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	3202      	adds	r2, #2
 8008cda:	0092      	lsls	r2, r2, #2
 8008cdc:	f107 010c 	add.w	r1, r7, #12
 8008ce0:	300c      	adds	r0, #12
 8008ce2:	f7fe fbee 	bl	80074c2 <memcpy>
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4620      	mov	r0, r4
 8008cec:	f000 fc12 	bl	8009514 <__lshift>
 8008cf0:	9b01      	ldr	r3, [sp, #4]
 8008cf2:	f103 0901 	add.w	r9, r3, #1
 8008cf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	9305      	str	r3, [sp, #20]
 8008cfe:	f00a 0301 	and.w	r3, sl, #1
 8008d02:	46b8      	mov	r8, r7
 8008d04:	9304      	str	r3, [sp, #16]
 8008d06:	4607      	mov	r7, r0
 8008d08:	4631      	mov	r1, r6
 8008d0a:	ee18 0a10 	vmov	r0, s16
 8008d0e:	f7ff fa77 	bl	8008200 <quorem>
 8008d12:	4641      	mov	r1, r8
 8008d14:	9002      	str	r0, [sp, #8]
 8008d16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d1a:	ee18 0a10 	vmov	r0, s16
 8008d1e:	f000 fc69 	bl	80095f4 <__mcmp>
 8008d22:	463a      	mov	r2, r7
 8008d24:	9003      	str	r0, [sp, #12]
 8008d26:	4631      	mov	r1, r6
 8008d28:	4620      	mov	r0, r4
 8008d2a:	f000 fc7f 	bl	800962c <__mdiff>
 8008d2e:	68c2      	ldr	r2, [r0, #12]
 8008d30:	f109 3bff 	add.w	fp, r9, #4294967295
 8008d34:	4605      	mov	r5, r0
 8008d36:	bb02      	cbnz	r2, 8008d7a <_dtoa_r+0xa62>
 8008d38:	4601      	mov	r1, r0
 8008d3a:	ee18 0a10 	vmov	r0, s16
 8008d3e:	f000 fc59 	bl	80095f4 <__mcmp>
 8008d42:	4602      	mov	r2, r0
 8008d44:	4629      	mov	r1, r5
 8008d46:	4620      	mov	r0, r4
 8008d48:	9207      	str	r2, [sp, #28]
 8008d4a:	f000 fa11 	bl	8009170 <_Bfree>
 8008d4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008d52:	ea43 0102 	orr.w	r1, r3, r2
 8008d56:	9b04      	ldr	r3, [sp, #16]
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	464d      	mov	r5, r9
 8008d5c:	d10f      	bne.n	8008d7e <_dtoa_r+0xa66>
 8008d5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d62:	d02a      	beq.n	8008dba <_dtoa_r+0xaa2>
 8008d64:	9b03      	ldr	r3, [sp, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	dd02      	ble.n	8008d70 <_dtoa_r+0xa58>
 8008d6a:	9b02      	ldr	r3, [sp, #8]
 8008d6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008d70:	f88b a000 	strb.w	sl, [fp]
 8008d74:	e775      	b.n	8008c62 <_dtoa_r+0x94a>
 8008d76:	4638      	mov	r0, r7
 8008d78:	e7ba      	b.n	8008cf0 <_dtoa_r+0x9d8>
 8008d7a:	2201      	movs	r2, #1
 8008d7c:	e7e2      	b.n	8008d44 <_dtoa_r+0xa2c>
 8008d7e:	9b03      	ldr	r3, [sp, #12]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	db04      	blt.n	8008d8e <_dtoa_r+0xa76>
 8008d84:	9906      	ldr	r1, [sp, #24]
 8008d86:	430b      	orrs	r3, r1
 8008d88:	9904      	ldr	r1, [sp, #16]
 8008d8a:	430b      	orrs	r3, r1
 8008d8c:	d122      	bne.n	8008dd4 <_dtoa_r+0xabc>
 8008d8e:	2a00      	cmp	r2, #0
 8008d90:	ddee      	ble.n	8008d70 <_dtoa_r+0xa58>
 8008d92:	ee18 1a10 	vmov	r1, s16
 8008d96:	2201      	movs	r2, #1
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 fbbb 	bl	8009514 <__lshift>
 8008d9e:	4631      	mov	r1, r6
 8008da0:	ee08 0a10 	vmov	s16, r0
 8008da4:	f000 fc26 	bl	80095f4 <__mcmp>
 8008da8:	2800      	cmp	r0, #0
 8008daa:	dc03      	bgt.n	8008db4 <_dtoa_r+0xa9c>
 8008dac:	d1e0      	bne.n	8008d70 <_dtoa_r+0xa58>
 8008dae:	f01a 0f01 	tst.w	sl, #1
 8008db2:	d0dd      	beq.n	8008d70 <_dtoa_r+0xa58>
 8008db4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008db8:	d1d7      	bne.n	8008d6a <_dtoa_r+0xa52>
 8008dba:	2339      	movs	r3, #57	; 0x39
 8008dbc:	f88b 3000 	strb.w	r3, [fp]
 8008dc0:	462b      	mov	r3, r5
 8008dc2:	461d      	mov	r5, r3
 8008dc4:	3b01      	subs	r3, #1
 8008dc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008dca:	2a39      	cmp	r2, #57	; 0x39
 8008dcc:	d071      	beq.n	8008eb2 <_dtoa_r+0xb9a>
 8008dce:	3201      	adds	r2, #1
 8008dd0:	701a      	strb	r2, [r3, #0]
 8008dd2:	e746      	b.n	8008c62 <_dtoa_r+0x94a>
 8008dd4:	2a00      	cmp	r2, #0
 8008dd6:	dd07      	ble.n	8008de8 <_dtoa_r+0xad0>
 8008dd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ddc:	d0ed      	beq.n	8008dba <_dtoa_r+0xaa2>
 8008dde:	f10a 0301 	add.w	r3, sl, #1
 8008de2:	f88b 3000 	strb.w	r3, [fp]
 8008de6:	e73c      	b.n	8008c62 <_dtoa_r+0x94a>
 8008de8:	9b05      	ldr	r3, [sp, #20]
 8008dea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008dee:	4599      	cmp	r9, r3
 8008df0:	d047      	beq.n	8008e82 <_dtoa_r+0xb6a>
 8008df2:	ee18 1a10 	vmov	r1, s16
 8008df6:	2300      	movs	r3, #0
 8008df8:	220a      	movs	r2, #10
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f000 f9da 	bl	80091b4 <__multadd>
 8008e00:	45b8      	cmp	r8, r7
 8008e02:	ee08 0a10 	vmov	s16, r0
 8008e06:	f04f 0300 	mov.w	r3, #0
 8008e0a:	f04f 020a 	mov.w	r2, #10
 8008e0e:	4641      	mov	r1, r8
 8008e10:	4620      	mov	r0, r4
 8008e12:	d106      	bne.n	8008e22 <_dtoa_r+0xb0a>
 8008e14:	f000 f9ce 	bl	80091b4 <__multadd>
 8008e18:	4680      	mov	r8, r0
 8008e1a:	4607      	mov	r7, r0
 8008e1c:	f109 0901 	add.w	r9, r9, #1
 8008e20:	e772      	b.n	8008d08 <_dtoa_r+0x9f0>
 8008e22:	f000 f9c7 	bl	80091b4 <__multadd>
 8008e26:	4639      	mov	r1, r7
 8008e28:	4680      	mov	r8, r0
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	220a      	movs	r2, #10
 8008e2e:	4620      	mov	r0, r4
 8008e30:	f000 f9c0 	bl	80091b4 <__multadd>
 8008e34:	4607      	mov	r7, r0
 8008e36:	e7f1      	b.n	8008e1c <_dtoa_r+0xb04>
 8008e38:	9b03      	ldr	r3, [sp, #12]
 8008e3a:	9302      	str	r3, [sp, #8]
 8008e3c:	9d01      	ldr	r5, [sp, #4]
 8008e3e:	ee18 0a10 	vmov	r0, s16
 8008e42:	4631      	mov	r1, r6
 8008e44:	f7ff f9dc 	bl	8008200 <quorem>
 8008e48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008e4c:	9b01      	ldr	r3, [sp, #4]
 8008e4e:	f805 ab01 	strb.w	sl, [r5], #1
 8008e52:	1aea      	subs	r2, r5, r3
 8008e54:	9b02      	ldr	r3, [sp, #8]
 8008e56:	4293      	cmp	r3, r2
 8008e58:	dd09      	ble.n	8008e6e <_dtoa_r+0xb56>
 8008e5a:	ee18 1a10 	vmov	r1, s16
 8008e5e:	2300      	movs	r3, #0
 8008e60:	220a      	movs	r2, #10
 8008e62:	4620      	mov	r0, r4
 8008e64:	f000 f9a6 	bl	80091b4 <__multadd>
 8008e68:	ee08 0a10 	vmov	s16, r0
 8008e6c:	e7e7      	b.n	8008e3e <_dtoa_r+0xb26>
 8008e6e:	9b02      	ldr	r3, [sp, #8]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	bfc8      	it	gt
 8008e74:	461d      	movgt	r5, r3
 8008e76:	9b01      	ldr	r3, [sp, #4]
 8008e78:	bfd8      	it	le
 8008e7a:	2501      	movle	r5, #1
 8008e7c:	441d      	add	r5, r3
 8008e7e:	f04f 0800 	mov.w	r8, #0
 8008e82:	ee18 1a10 	vmov	r1, s16
 8008e86:	2201      	movs	r2, #1
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f000 fb43 	bl	8009514 <__lshift>
 8008e8e:	4631      	mov	r1, r6
 8008e90:	ee08 0a10 	vmov	s16, r0
 8008e94:	f000 fbae 	bl	80095f4 <__mcmp>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	dc91      	bgt.n	8008dc0 <_dtoa_r+0xaa8>
 8008e9c:	d102      	bne.n	8008ea4 <_dtoa_r+0xb8c>
 8008e9e:	f01a 0f01 	tst.w	sl, #1
 8008ea2:	d18d      	bne.n	8008dc0 <_dtoa_r+0xaa8>
 8008ea4:	462b      	mov	r3, r5
 8008ea6:	461d      	mov	r5, r3
 8008ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008eac:	2a30      	cmp	r2, #48	; 0x30
 8008eae:	d0fa      	beq.n	8008ea6 <_dtoa_r+0xb8e>
 8008eb0:	e6d7      	b.n	8008c62 <_dtoa_r+0x94a>
 8008eb2:	9a01      	ldr	r2, [sp, #4]
 8008eb4:	429a      	cmp	r2, r3
 8008eb6:	d184      	bne.n	8008dc2 <_dtoa_r+0xaaa>
 8008eb8:	9b00      	ldr	r3, [sp, #0]
 8008eba:	3301      	adds	r3, #1
 8008ebc:	9300      	str	r3, [sp, #0]
 8008ebe:	2331      	movs	r3, #49	; 0x31
 8008ec0:	7013      	strb	r3, [r2, #0]
 8008ec2:	e6ce      	b.n	8008c62 <_dtoa_r+0x94a>
 8008ec4:	4b09      	ldr	r3, [pc, #36]	; (8008eec <_dtoa_r+0xbd4>)
 8008ec6:	f7ff ba95 	b.w	80083f4 <_dtoa_r+0xdc>
 8008eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	f47f aa6e 	bne.w	80083ae <_dtoa_r+0x96>
 8008ed2:	4b07      	ldr	r3, [pc, #28]	; (8008ef0 <_dtoa_r+0xbd8>)
 8008ed4:	f7ff ba8e 	b.w	80083f4 <_dtoa_r+0xdc>
 8008ed8:	9b02      	ldr	r3, [sp, #8]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	dcae      	bgt.n	8008e3c <_dtoa_r+0xb24>
 8008ede:	9b06      	ldr	r3, [sp, #24]
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	f73f aea8 	bgt.w	8008c36 <_dtoa_r+0x91e>
 8008ee6:	e7a9      	b.n	8008e3c <_dtoa_r+0xb24>
 8008ee8:	0800a74e 	.word	0x0800a74e
 8008eec:	0800a614 	.word	0x0800a614
 8008ef0:	0800a6e6 	.word	0x0800a6e6

08008ef4 <__sflush_r>:
 8008ef4:	898a      	ldrh	r2, [r1, #12]
 8008ef6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008efa:	4605      	mov	r5, r0
 8008efc:	0710      	lsls	r0, r2, #28
 8008efe:	460c      	mov	r4, r1
 8008f00:	d458      	bmi.n	8008fb4 <__sflush_r+0xc0>
 8008f02:	684b      	ldr	r3, [r1, #4]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	dc05      	bgt.n	8008f14 <__sflush_r+0x20>
 8008f08:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	dc02      	bgt.n	8008f14 <__sflush_r+0x20>
 8008f0e:	2000      	movs	r0, #0
 8008f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f16:	2e00      	cmp	r6, #0
 8008f18:	d0f9      	beq.n	8008f0e <__sflush_r+0x1a>
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008f20:	682f      	ldr	r7, [r5, #0]
 8008f22:	602b      	str	r3, [r5, #0]
 8008f24:	d032      	beq.n	8008f8c <__sflush_r+0x98>
 8008f26:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	075a      	lsls	r2, r3, #29
 8008f2c:	d505      	bpl.n	8008f3a <__sflush_r+0x46>
 8008f2e:	6863      	ldr	r3, [r4, #4]
 8008f30:	1ac0      	subs	r0, r0, r3
 8008f32:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008f34:	b10b      	cbz	r3, 8008f3a <__sflush_r+0x46>
 8008f36:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008f38:	1ac0      	subs	r0, r0, r3
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008f40:	6a21      	ldr	r1, [r4, #32]
 8008f42:	4628      	mov	r0, r5
 8008f44:	47b0      	blx	r6
 8008f46:	1c43      	adds	r3, r0, #1
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	d106      	bne.n	8008f5a <__sflush_r+0x66>
 8008f4c:	6829      	ldr	r1, [r5, #0]
 8008f4e:	291d      	cmp	r1, #29
 8008f50:	d82c      	bhi.n	8008fac <__sflush_r+0xb8>
 8008f52:	4a2a      	ldr	r2, [pc, #168]	; (8008ffc <__sflush_r+0x108>)
 8008f54:	40ca      	lsrs	r2, r1
 8008f56:	07d6      	lsls	r6, r2, #31
 8008f58:	d528      	bpl.n	8008fac <__sflush_r+0xb8>
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	6062      	str	r2, [r4, #4]
 8008f5e:	04d9      	lsls	r1, r3, #19
 8008f60:	6922      	ldr	r2, [r4, #16]
 8008f62:	6022      	str	r2, [r4, #0]
 8008f64:	d504      	bpl.n	8008f70 <__sflush_r+0x7c>
 8008f66:	1c42      	adds	r2, r0, #1
 8008f68:	d101      	bne.n	8008f6e <__sflush_r+0x7a>
 8008f6a:	682b      	ldr	r3, [r5, #0]
 8008f6c:	b903      	cbnz	r3, 8008f70 <__sflush_r+0x7c>
 8008f6e:	6560      	str	r0, [r4, #84]	; 0x54
 8008f70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f72:	602f      	str	r7, [r5, #0]
 8008f74:	2900      	cmp	r1, #0
 8008f76:	d0ca      	beq.n	8008f0e <__sflush_r+0x1a>
 8008f78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f7c:	4299      	cmp	r1, r3
 8008f7e:	d002      	beq.n	8008f86 <__sflush_r+0x92>
 8008f80:	4628      	mov	r0, r5
 8008f82:	f000 fc4f 	bl	8009824 <_free_r>
 8008f86:	2000      	movs	r0, #0
 8008f88:	6360      	str	r0, [r4, #52]	; 0x34
 8008f8a:	e7c1      	b.n	8008f10 <__sflush_r+0x1c>
 8008f8c:	6a21      	ldr	r1, [r4, #32]
 8008f8e:	2301      	movs	r3, #1
 8008f90:	4628      	mov	r0, r5
 8008f92:	47b0      	blx	r6
 8008f94:	1c41      	adds	r1, r0, #1
 8008f96:	d1c7      	bne.n	8008f28 <__sflush_r+0x34>
 8008f98:	682b      	ldr	r3, [r5, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d0c4      	beq.n	8008f28 <__sflush_r+0x34>
 8008f9e:	2b1d      	cmp	r3, #29
 8008fa0:	d001      	beq.n	8008fa6 <__sflush_r+0xb2>
 8008fa2:	2b16      	cmp	r3, #22
 8008fa4:	d101      	bne.n	8008faa <__sflush_r+0xb6>
 8008fa6:	602f      	str	r7, [r5, #0]
 8008fa8:	e7b1      	b.n	8008f0e <__sflush_r+0x1a>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	e7ad      	b.n	8008f10 <__sflush_r+0x1c>
 8008fb4:	690f      	ldr	r7, [r1, #16]
 8008fb6:	2f00      	cmp	r7, #0
 8008fb8:	d0a9      	beq.n	8008f0e <__sflush_r+0x1a>
 8008fba:	0793      	lsls	r3, r2, #30
 8008fbc:	680e      	ldr	r6, [r1, #0]
 8008fbe:	bf08      	it	eq
 8008fc0:	694b      	ldreq	r3, [r1, #20]
 8008fc2:	600f      	str	r7, [r1, #0]
 8008fc4:	bf18      	it	ne
 8008fc6:	2300      	movne	r3, #0
 8008fc8:	eba6 0807 	sub.w	r8, r6, r7
 8008fcc:	608b      	str	r3, [r1, #8]
 8008fce:	f1b8 0f00 	cmp.w	r8, #0
 8008fd2:	dd9c      	ble.n	8008f0e <__sflush_r+0x1a>
 8008fd4:	6a21      	ldr	r1, [r4, #32]
 8008fd6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008fd8:	4643      	mov	r3, r8
 8008fda:	463a      	mov	r2, r7
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	dc06      	bgt.n	8008ff2 <__sflush_r+0xfe>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fea:	81a3      	strh	r3, [r4, #12]
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	e78e      	b.n	8008f10 <__sflush_r+0x1c>
 8008ff2:	4407      	add	r7, r0
 8008ff4:	eba8 0800 	sub.w	r8, r8, r0
 8008ff8:	e7e9      	b.n	8008fce <__sflush_r+0xda>
 8008ffa:	bf00      	nop
 8008ffc:	20400001 	.word	0x20400001

08009000 <_fflush_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	690b      	ldr	r3, [r1, #16]
 8009004:	4605      	mov	r5, r0
 8009006:	460c      	mov	r4, r1
 8009008:	b913      	cbnz	r3, 8009010 <_fflush_r+0x10>
 800900a:	2500      	movs	r5, #0
 800900c:	4628      	mov	r0, r5
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	b118      	cbz	r0, 800901a <_fflush_r+0x1a>
 8009012:	6983      	ldr	r3, [r0, #24]
 8009014:	b90b      	cbnz	r3, 800901a <_fflush_r+0x1a>
 8009016:	f7fe f98f 	bl	8007338 <__sinit>
 800901a:	4b14      	ldr	r3, [pc, #80]	; (800906c <_fflush_r+0x6c>)
 800901c:	429c      	cmp	r4, r3
 800901e:	d11b      	bne.n	8009058 <_fflush_r+0x58>
 8009020:	686c      	ldr	r4, [r5, #4]
 8009022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d0ef      	beq.n	800900a <_fflush_r+0xa>
 800902a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800902c:	07d0      	lsls	r0, r2, #31
 800902e:	d404      	bmi.n	800903a <_fflush_r+0x3a>
 8009030:	0599      	lsls	r1, r3, #22
 8009032:	d402      	bmi.n	800903a <_fflush_r+0x3a>
 8009034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009036:	f7fe fa42 	bl	80074be <__retarget_lock_acquire_recursive>
 800903a:	4628      	mov	r0, r5
 800903c:	4621      	mov	r1, r4
 800903e:	f7ff ff59 	bl	8008ef4 <__sflush_r>
 8009042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009044:	07da      	lsls	r2, r3, #31
 8009046:	4605      	mov	r5, r0
 8009048:	d4e0      	bmi.n	800900c <_fflush_r+0xc>
 800904a:	89a3      	ldrh	r3, [r4, #12]
 800904c:	059b      	lsls	r3, r3, #22
 800904e:	d4dd      	bmi.n	800900c <_fflush_r+0xc>
 8009050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009052:	f7fe fa35 	bl	80074c0 <__retarget_lock_release_recursive>
 8009056:	e7d9      	b.n	800900c <_fflush_r+0xc>
 8009058:	4b05      	ldr	r3, [pc, #20]	; (8009070 <_fflush_r+0x70>)
 800905a:	429c      	cmp	r4, r3
 800905c:	d101      	bne.n	8009062 <_fflush_r+0x62>
 800905e:	68ac      	ldr	r4, [r5, #8]
 8009060:	e7df      	b.n	8009022 <_fflush_r+0x22>
 8009062:	4b04      	ldr	r3, [pc, #16]	; (8009074 <_fflush_r+0x74>)
 8009064:	429c      	cmp	r4, r3
 8009066:	bf08      	it	eq
 8009068:	68ec      	ldreq	r4, [r5, #12]
 800906a:	e7da      	b.n	8009022 <_fflush_r+0x22>
 800906c:	0800a5c0 	.word	0x0800a5c0
 8009070:	0800a5e0 	.word	0x0800a5e0
 8009074:	0800a5a0 	.word	0x0800a5a0

08009078 <fiprintf>:
 8009078:	b40e      	push	{r1, r2, r3}
 800907a:	b503      	push	{r0, r1, lr}
 800907c:	4601      	mov	r1, r0
 800907e:	ab03      	add	r3, sp, #12
 8009080:	4805      	ldr	r0, [pc, #20]	; (8009098 <fiprintf+0x20>)
 8009082:	f853 2b04 	ldr.w	r2, [r3], #4
 8009086:	6800      	ldr	r0, [r0, #0]
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	f000 fd9d 	bl	8009bc8 <_vfiprintf_r>
 800908e:	b002      	add	sp, #8
 8009090:	f85d eb04 	ldr.w	lr, [sp], #4
 8009094:	b003      	add	sp, #12
 8009096:	4770      	bx	lr
 8009098:	20000010 	.word	0x20000010

0800909c <_localeconv_r>:
 800909c:	4800      	ldr	r0, [pc, #0]	; (80090a0 <_localeconv_r+0x4>)
 800909e:	4770      	bx	lr
 80090a0:	20000164 	.word	0x20000164

080090a4 <_lseek_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4d07      	ldr	r5, [pc, #28]	; (80090c4 <_lseek_r+0x20>)
 80090a8:	4604      	mov	r4, r0
 80090aa:	4608      	mov	r0, r1
 80090ac:	4611      	mov	r1, r2
 80090ae:	2200      	movs	r2, #0
 80090b0:	602a      	str	r2, [r5, #0]
 80090b2:	461a      	mov	r2, r3
 80090b4:	f7f8 fcd2 	bl	8001a5c <_lseek>
 80090b8:	1c43      	adds	r3, r0, #1
 80090ba:	d102      	bne.n	80090c2 <_lseek_r+0x1e>
 80090bc:	682b      	ldr	r3, [r5, #0]
 80090be:	b103      	cbz	r3, 80090c2 <_lseek_r+0x1e>
 80090c0:	6023      	str	r3, [r4, #0]
 80090c2:	bd38      	pop	{r3, r4, r5, pc}
 80090c4:	20004ce4 	.word	0x20004ce4

080090c8 <malloc>:
 80090c8:	4b02      	ldr	r3, [pc, #8]	; (80090d4 <malloc+0xc>)
 80090ca:	4601      	mov	r1, r0
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	f7fe ba2f 	b.w	8007530 <_malloc_r>
 80090d2:	bf00      	nop
 80090d4:	20000010 	.word	0x20000010

080090d8 <__malloc_lock>:
 80090d8:	4801      	ldr	r0, [pc, #4]	; (80090e0 <__malloc_lock+0x8>)
 80090da:	f7fe b9f0 	b.w	80074be <__retarget_lock_acquire_recursive>
 80090de:	bf00      	nop
 80090e0:	20004cd8 	.word	0x20004cd8

080090e4 <__malloc_unlock>:
 80090e4:	4801      	ldr	r0, [pc, #4]	; (80090ec <__malloc_unlock+0x8>)
 80090e6:	f7fe b9eb 	b.w	80074c0 <__retarget_lock_release_recursive>
 80090ea:	bf00      	nop
 80090ec:	20004cd8 	.word	0x20004cd8

080090f0 <_Balloc>:
 80090f0:	b570      	push	{r4, r5, r6, lr}
 80090f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090f4:	4604      	mov	r4, r0
 80090f6:	460d      	mov	r5, r1
 80090f8:	b976      	cbnz	r6, 8009118 <_Balloc+0x28>
 80090fa:	2010      	movs	r0, #16
 80090fc:	f7ff ffe4 	bl	80090c8 <malloc>
 8009100:	4602      	mov	r2, r0
 8009102:	6260      	str	r0, [r4, #36]	; 0x24
 8009104:	b920      	cbnz	r0, 8009110 <_Balloc+0x20>
 8009106:	4b18      	ldr	r3, [pc, #96]	; (8009168 <_Balloc+0x78>)
 8009108:	4818      	ldr	r0, [pc, #96]	; (800916c <_Balloc+0x7c>)
 800910a:	2166      	movs	r1, #102	; 0x66
 800910c:	f7ff f84a 	bl	80081a4 <__assert_func>
 8009110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009114:	6006      	str	r6, [r0, #0]
 8009116:	60c6      	str	r6, [r0, #12]
 8009118:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800911a:	68f3      	ldr	r3, [r6, #12]
 800911c:	b183      	cbz	r3, 8009140 <_Balloc+0x50>
 800911e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009120:	68db      	ldr	r3, [r3, #12]
 8009122:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009126:	b9b8      	cbnz	r0, 8009158 <_Balloc+0x68>
 8009128:	2101      	movs	r1, #1
 800912a:	fa01 f605 	lsl.w	r6, r1, r5
 800912e:	1d72      	adds	r2, r6, #5
 8009130:	0092      	lsls	r2, r2, #2
 8009132:	4620      	mov	r0, r4
 8009134:	f000 fb60 	bl	80097f8 <_calloc_r>
 8009138:	b160      	cbz	r0, 8009154 <_Balloc+0x64>
 800913a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800913e:	e00e      	b.n	800915e <_Balloc+0x6e>
 8009140:	2221      	movs	r2, #33	; 0x21
 8009142:	2104      	movs	r1, #4
 8009144:	4620      	mov	r0, r4
 8009146:	f000 fb57 	bl	80097f8 <_calloc_r>
 800914a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800914c:	60f0      	str	r0, [r6, #12]
 800914e:	68db      	ldr	r3, [r3, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e4      	bne.n	800911e <_Balloc+0x2e>
 8009154:	2000      	movs	r0, #0
 8009156:	bd70      	pop	{r4, r5, r6, pc}
 8009158:	6802      	ldr	r2, [r0, #0]
 800915a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800915e:	2300      	movs	r3, #0
 8009160:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009164:	e7f7      	b.n	8009156 <_Balloc+0x66>
 8009166:	bf00      	nop
 8009168:	0800a638 	.word	0x0800a638
 800916c:	0800a75f 	.word	0x0800a75f

08009170 <_Bfree>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009174:	4605      	mov	r5, r0
 8009176:	460c      	mov	r4, r1
 8009178:	b976      	cbnz	r6, 8009198 <_Bfree+0x28>
 800917a:	2010      	movs	r0, #16
 800917c:	f7ff ffa4 	bl	80090c8 <malloc>
 8009180:	4602      	mov	r2, r0
 8009182:	6268      	str	r0, [r5, #36]	; 0x24
 8009184:	b920      	cbnz	r0, 8009190 <_Bfree+0x20>
 8009186:	4b09      	ldr	r3, [pc, #36]	; (80091ac <_Bfree+0x3c>)
 8009188:	4809      	ldr	r0, [pc, #36]	; (80091b0 <_Bfree+0x40>)
 800918a:	218a      	movs	r1, #138	; 0x8a
 800918c:	f7ff f80a 	bl	80081a4 <__assert_func>
 8009190:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009194:	6006      	str	r6, [r0, #0]
 8009196:	60c6      	str	r6, [r0, #12]
 8009198:	b13c      	cbz	r4, 80091aa <_Bfree+0x3a>
 800919a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800919c:	6862      	ldr	r2, [r4, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091a4:	6021      	str	r1, [r4, #0]
 80091a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	0800a638 	.word	0x0800a638
 80091b0:	0800a75f 	.word	0x0800a75f

080091b4 <__multadd>:
 80091b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091b8:	690d      	ldr	r5, [r1, #16]
 80091ba:	4607      	mov	r7, r0
 80091bc:	460c      	mov	r4, r1
 80091be:	461e      	mov	r6, r3
 80091c0:	f101 0c14 	add.w	ip, r1, #20
 80091c4:	2000      	movs	r0, #0
 80091c6:	f8dc 3000 	ldr.w	r3, [ip]
 80091ca:	b299      	uxth	r1, r3
 80091cc:	fb02 6101 	mla	r1, r2, r1, r6
 80091d0:	0c1e      	lsrs	r6, r3, #16
 80091d2:	0c0b      	lsrs	r3, r1, #16
 80091d4:	fb02 3306 	mla	r3, r2, r6, r3
 80091d8:	b289      	uxth	r1, r1
 80091da:	3001      	adds	r0, #1
 80091dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091e0:	4285      	cmp	r5, r0
 80091e2:	f84c 1b04 	str.w	r1, [ip], #4
 80091e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091ea:	dcec      	bgt.n	80091c6 <__multadd+0x12>
 80091ec:	b30e      	cbz	r6, 8009232 <__multadd+0x7e>
 80091ee:	68a3      	ldr	r3, [r4, #8]
 80091f0:	42ab      	cmp	r3, r5
 80091f2:	dc19      	bgt.n	8009228 <__multadd+0x74>
 80091f4:	6861      	ldr	r1, [r4, #4]
 80091f6:	4638      	mov	r0, r7
 80091f8:	3101      	adds	r1, #1
 80091fa:	f7ff ff79 	bl	80090f0 <_Balloc>
 80091fe:	4680      	mov	r8, r0
 8009200:	b928      	cbnz	r0, 800920e <__multadd+0x5a>
 8009202:	4602      	mov	r2, r0
 8009204:	4b0c      	ldr	r3, [pc, #48]	; (8009238 <__multadd+0x84>)
 8009206:	480d      	ldr	r0, [pc, #52]	; (800923c <__multadd+0x88>)
 8009208:	21b5      	movs	r1, #181	; 0xb5
 800920a:	f7fe ffcb 	bl	80081a4 <__assert_func>
 800920e:	6922      	ldr	r2, [r4, #16]
 8009210:	3202      	adds	r2, #2
 8009212:	f104 010c 	add.w	r1, r4, #12
 8009216:	0092      	lsls	r2, r2, #2
 8009218:	300c      	adds	r0, #12
 800921a:	f7fe f952 	bl	80074c2 <memcpy>
 800921e:	4621      	mov	r1, r4
 8009220:	4638      	mov	r0, r7
 8009222:	f7ff ffa5 	bl	8009170 <_Bfree>
 8009226:	4644      	mov	r4, r8
 8009228:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800922c:	3501      	adds	r5, #1
 800922e:	615e      	str	r6, [r3, #20]
 8009230:	6125      	str	r5, [r4, #16]
 8009232:	4620      	mov	r0, r4
 8009234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009238:	0800a74e 	.word	0x0800a74e
 800923c:	0800a75f 	.word	0x0800a75f

08009240 <__hi0bits>:
 8009240:	0c03      	lsrs	r3, r0, #16
 8009242:	041b      	lsls	r3, r3, #16
 8009244:	b9d3      	cbnz	r3, 800927c <__hi0bits+0x3c>
 8009246:	0400      	lsls	r0, r0, #16
 8009248:	2310      	movs	r3, #16
 800924a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800924e:	bf04      	itt	eq
 8009250:	0200      	lsleq	r0, r0, #8
 8009252:	3308      	addeq	r3, #8
 8009254:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009258:	bf04      	itt	eq
 800925a:	0100      	lsleq	r0, r0, #4
 800925c:	3304      	addeq	r3, #4
 800925e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009262:	bf04      	itt	eq
 8009264:	0080      	lsleq	r0, r0, #2
 8009266:	3302      	addeq	r3, #2
 8009268:	2800      	cmp	r0, #0
 800926a:	db05      	blt.n	8009278 <__hi0bits+0x38>
 800926c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009270:	f103 0301 	add.w	r3, r3, #1
 8009274:	bf08      	it	eq
 8009276:	2320      	moveq	r3, #32
 8009278:	4618      	mov	r0, r3
 800927a:	4770      	bx	lr
 800927c:	2300      	movs	r3, #0
 800927e:	e7e4      	b.n	800924a <__hi0bits+0xa>

08009280 <__lo0bits>:
 8009280:	6803      	ldr	r3, [r0, #0]
 8009282:	f013 0207 	ands.w	r2, r3, #7
 8009286:	4601      	mov	r1, r0
 8009288:	d00b      	beq.n	80092a2 <__lo0bits+0x22>
 800928a:	07da      	lsls	r2, r3, #31
 800928c:	d423      	bmi.n	80092d6 <__lo0bits+0x56>
 800928e:	0798      	lsls	r0, r3, #30
 8009290:	bf49      	itett	mi
 8009292:	085b      	lsrmi	r3, r3, #1
 8009294:	089b      	lsrpl	r3, r3, #2
 8009296:	2001      	movmi	r0, #1
 8009298:	600b      	strmi	r3, [r1, #0]
 800929a:	bf5c      	itt	pl
 800929c:	600b      	strpl	r3, [r1, #0]
 800929e:	2002      	movpl	r0, #2
 80092a0:	4770      	bx	lr
 80092a2:	b298      	uxth	r0, r3
 80092a4:	b9a8      	cbnz	r0, 80092d2 <__lo0bits+0x52>
 80092a6:	0c1b      	lsrs	r3, r3, #16
 80092a8:	2010      	movs	r0, #16
 80092aa:	b2da      	uxtb	r2, r3
 80092ac:	b90a      	cbnz	r2, 80092b2 <__lo0bits+0x32>
 80092ae:	3008      	adds	r0, #8
 80092b0:	0a1b      	lsrs	r3, r3, #8
 80092b2:	071a      	lsls	r2, r3, #28
 80092b4:	bf04      	itt	eq
 80092b6:	091b      	lsreq	r3, r3, #4
 80092b8:	3004      	addeq	r0, #4
 80092ba:	079a      	lsls	r2, r3, #30
 80092bc:	bf04      	itt	eq
 80092be:	089b      	lsreq	r3, r3, #2
 80092c0:	3002      	addeq	r0, #2
 80092c2:	07da      	lsls	r2, r3, #31
 80092c4:	d403      	bmi.n	80092ce <__lo0bits+0x4e>
 80092c6:	085b      	lsrs	r3, r3, #1
 80092c8:	f100 0001 	add.w	r0, r0, #1
 80092cc:	d005      	beq.n	80092da <__lo0bits+0x5a>
 80092ce:	600b      	str	r3, [r1, #0]
 80092d0:	4770      	bx	lr
 80092d2:	4610      	mov	r0, r2
 80092d4:	e7e9      	b.n	80092aa <__lo0bits+0x2a>
 80092d6:	2000      	movs	r0, #0
 80092d8:	4770      	bx	lr
 80092da:	2020      	movs	r0, #32
 80092dc:	4770      	bx	lr
	...

080092e0 <__i2b>:
 80092e0:	b510      	push	{r4, lr}
 80092e2:	460c      	mov	r4, r1
 80092e4:	2101      	movs	r1, #1
 80092e6:	f7ff ff03 	bl	80090f0 <_Balloc>
 80092ea:	4602      	mov	r2, r0
 80092ec:	b928      	cbnz	r0, 80092fa <__i2b+0x1a>
 80092ee:	4b05      	ldr	r3, [pc, #20]	; (8009304 <__i2b+0x24>)
 80092f0:	4805      	ldr	r0, [pc, #20]	; (8009308 <__i2b+0x28>)
 80092f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092f6:	f7fe ff55 	bl	80081a4 <__assert_func>
 80092fa:	2301      	movs	r3, #1
 80092fc:	6144      	str	r4, [r0, #20]
 80092fe:	6103      	str	r3, [r0, #16]
 8009300:	bd10      	pop	{r4, pc}
 8009302:	bf00      	nop
 8009304:	0800a74e 	.word	0x0800a74e
 8009308:	0800a75f 	.word	0x0800a75f

0800930c <__multiply>:
 800930c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009310:	4691      	mov	r9, r2
 8009312:	690a      	ldr	r2, [r1, #16]
 8009314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009318:	429a      	cmp	r2, r3
 800931a:	bfb8      	it	lt
 800931c:	460b      	movlt	r3, r1
 800931e:	460c      	mov	r4, r1
 8009320:	bfbc      	itt	lt
 8009322:	464c      	movlt	r4, r9
 8009324:	4699      	movlt	r9, r3
 8009326:	6927      	ldr	r7, [r4, #16]
 8009328:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800932c:	68a3      	ldr	r3, [r4, #8]
 800932e:	6861      	ldr	r1, [r4, #4]
 8009330:	eb07 060a 	add.w	r6, r7, sl
 8009334:	42b3      	cmp	r3, r6
 8009336:	b085      	sub	sp, #20
 8009338:	bfb8      	it	lt
 800933a:	3101      	addlt	r1, #1
 800933c:	f7ff fed8 	bl	80090f0 <_Balloc>
 8009340:	b930      	cbnz	r0, 8009350 <__multiply+0x44>
 8009342:	4602      	mov	r2, r0
 8009344:	4b44      	ldr	r3, [pc, #272]	; (8009458 <__multiply+0x14c>)
 8009346:	4845      	ldr	r0, [pc, #276]	; (800945c <__multiply+0x150>)
 8009348:	f240 115d 	movw	r1, #349	; 0x15d
 800934c:	f7fe ff2a 	bl	80081a4 <__assert_func>
 8009350:	f100 0514 	add.w	r5, r0, #20
 8009354:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009358:	462b      	mov	r3, r5
 800935a:	2200      	movs	r2, #0
 800935c:	4543      	cmp	r3, r8
 800935e:	d321      	bcc.n	80093a4 <__multiply+0x98>
 8009360:	f104 0314 	add.w	r3, r4, #20
 8009364:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009368:	f109 0314 	add.w	r3, r9, #20
 800936c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009370:	9202      	str	r2, [sp, #8]
 8009372:	1b3a      	subs	r2, r7, r4
 8009374:	3a15      	subs	r2, #21
 8009376:	f022 0203 	bic.w	r2, r2, #3
 800937a:	3204      	adds	r2, #4
 800937c:	f104 0115 	add.w	r1, r4, #21
 8009380:	428f      	cmp	r7, r1
 8009382:	bf38      	it	cc
 8009384:	2204      	movcc	r2, #4
 8009386:	9201      	str	r2, [sp, #4]
 8009388:	9a02      	ldr	r2, [sp, #8]
 800938a:	9303      	str	r3, [sp, #12]
 800938c:	429a      	cmp	r2, r3
 800938e:	d80c      	bhi.n	80093aa <__multiply+0x9e>
 8009390:	2e00      	cmp	r6, #0
 8009392:	dd03      	ble.n	800939c <__multiply+0x90>
 8009394:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009398:	2b00      	cmp	r3, #0
 800939a:	d05a      	beq.n	8009452 <__multiply+0x146>
 800939c:	6106      	str	r6, [r0, #16]
 800939e:	b005      	add	sp, #20
 80093a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093a4:	f843 2b04 	str.w	r2, [r3], #4
 80093a8:	e7d8      	b.n	800935c <__multiply+0x50>
 80093aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80093ae:	f1ba 0f00 	cmp.w	sl, #0
 80093b2:	d024      	beq.n	80093fe <__multiply+0xf2>
 80093b4:	f104 0e14 	add.w	lr, r4, #20
 80093b8:	46a9      	mov	r9, r5
 80093ba:	f04f 0c00 	mov.w	ip, #0
 80093be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80093c2:	f8d9 1000 	ldr.w	r1, [r9]
 80093c6:	fa1f fb82 	uxth.w	fp, r2
 80093ca:	b289      	uxth	r1, r1
 80093cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80093d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093d4:	f8d9 2000 	ldr.w	r2, [r9]
 80093d8:	4461      	add	r1, ip
 80093da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093de:	fb0a c20b 	mla	r2, sl, fp, ip
 80093e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093e6:	b289      	uxth	r1, r1
 80093e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093ec:	4577      	cmp	r7, lr
 80093ee:	f849 1b04 	str.w	r1, [r9], #4
 80093f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093f6:	d8e2      	bhi.n	80093be <__multiply+0xb2>
 80093f8:	9a01      	ldr	r2, [sp, #4]
 80093fa:	f845 c002 	str.w	ip, [r5, r2]
 80093fe:	9a03      	ldr	r2, [sp, #12]
 8009400:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009404:	3304      	adds	r3, #4
 8009406:	f1b9 0f00 	cmp.w	r9, #0
 800940a:	d020      	beq.n	800944e <__multiply+0x142>
 800940c:	6829      	ldr	r1, [r5, #0]
 800940e:	f104 0c14 	add.w	ip, r4, #20
 8009412:	46ae      	mov	lr, r5
 8009414:	f04f 0a00 	mov.w	sl, #0
 8009418:	f8bc b000 	ldrh.w	fp, [ip]
 800941c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009420:	fb09 220b 	mla	r2, r9, fp, r2
 8009424:	4492      	add	sl, r2
 8009426:	b289      	uxth	r1, r1
 8009428:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800942c:	f84e 1b04 	str.w	r1, [lr], #4
 8009430:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009434:	f8be 1000 	ldrh.w	r1, [lr]
 8009438:	0c12      	lsrs	r2, r2, #16
 800943a:	fb09 1102 	mla	r1, r9, r2, r1
 800943e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009442:	4567      	cmp	r7, ip
 8009444:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009448:	d8e6      	bhi.n	8009418 <__multiply+0x10c>
 800944a:	9a01      	ldr	r2, [sp, #4]
 800944c:	50a9      	str	r1, [r5, r2]
 800944e:	3504      	adds	r5, #4
 8009450:	e79a      	b.n	8009388 <__multiply+0x7c>
 8009452:	3e01      	subs	r6, #1
 8009454:	e79c      	b.n	8009390 <__multiply+0x84>
 8009456:	bf00      	nop
 8009458:	0800a74e 	.word	0x0800a74e
 800945c:	0800a75f 	.word	0x0800a75f

08009460 <__pow5mult>:
 8009460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009464:	4615      	mov	r5, r2
 8009466:	f012 0203 	ands.w	r2, r2, #3
 800946a:	4606      	mov	r6, r0
 800946c:	460f      	mov	r7, r1
 800946e:	d007      	beq.n	8009480 <__pow5mult+0x20>
 8009470:	4c25      	ldr	r4, [pc, #148]	; (8009508 <__pow5mult+0xa8>)
 8009472:	3a01      	subs	r2, #1
 8009474:	2300      	movs	r3, #0
 8009476:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800947a:	f7ff fe9b 	bl	80091b4 <__multadd>
 800947e:	4607      	mov	r7, r0
 8009480:	10ad      	asrs	r5, r5, #2
 8009482:	d03d      	beq.n	8009500 <__pow5mult+0xa0>
 8009484:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009486:	b97c      	cbnz	r4, 80094a8 <__pow5mult+0x48>
 8009488:	2010      	movs	r0, #16
 800948a:	f7ff fe1d 	bl	80090c8 <malloc>
 800948e:	4602      	mov	r2, r0
 8009490:	6270      	str	r0, [r6, #36]	; 0x24
 8009492:	b928      	cbnz	r0, 80094a0 <__pow5mult+0x40>
 8009494:	4b1d      	ldr	r3, [pc, #116]	; (800950c <__pow5mult+0xac>)
 8009496:	481e      	ldr	r0, [pc, #120]	; (8009510 <__pow5mult+0xb0>)
 8009498:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800949c:	f7fe fe82 	bl	80081a4 <__assert_func>
 80094a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094a4:	6004      	str	r4, [r0, #0]
 80094a6:	60c4      	str	r4, [r0, #12]
 80094a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80094ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80094b0:	b94c      	cbnz	r4, 80094c6 <__pow5mult+0x66>
 80094b2:	f240 2171 	movw	r1, #625	; 0x271
 80094b6:	4630      	mov	r0, r6
 80094b8:	f7ff ff12 	bl	80092e0 <__i2b>
 80094bc:	2300      	movs	r3, #0
 80094be:	f8c8 0008 	str.w	r0, [r8, #8]
 80094c2:	4604      	mov	r4, r0
 80094c4:	6003      	str	r3, [r0, #0]
 80094c6:	f04f 0900 	mov.w	r9, #0
 80094ca:	07eb      	lsls	r3, r5, #31
 80094cc:	d50a      	bpl.n	80094e4 <__pow5mult+0x84>
 80094ce:	4639      	mov	r1, r7
 80094d0:	4622      	mov	r2, r4
 80094d2:	4630      	mov	r0, r6
 80094d4:	f7ff ff1a 	bl	800930c <__multiply>
 80094d8:	4639      	mov	r1, r7
 80094da:	4680      	mov	r8, r0
 80094dc:	4630      	mov	r0, r6
 80094de:	f7ff fe47 	bl	8009170 <_Bfree>
 80094e2:	4647      	mov	r7, r8
 80094e4:	106d      	asrs	r5, r5, #1
 80094e6:	d00b      	beq.n	8009500 <__pow5mult+0xa0>
 80094e8:	6820      	ldr	r0, [r4, #0]
 80094ea:	b938      	cbnz	r0, 80094fc <__pow5mult+0x9c>
 80094ec:	4622      	mov	r2, r4
 80094ee:	4621      	mov	r1, r4
 80094f0:	4630      	mov	r0, r6
 80094f2:	f7ff ff0b 	bl	800930c <__multiply>
 80094f6:	6020      	str	r0, [r4, #0]
 80094f8:	f8c0 9000 	str.w	r9, [r0]
 80094fc:	4604      	mov	r4, r0
 80094fe:	e7e4      	b.n	80094ca <__pow5mult+0x6a>
 8009500:	4638      	mov	r0, r7
 8009502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009506:	bf00      	nop
 8009508:	0800a8b0 	.word	0x0800a8b0
 800950c:	0800a638 	.word	0x0800a638
 8009510:	0800a75f 	.word	0x0800a75f

08009514 <__lshift>:
 8009514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009518:	460c      	mov	r4, r1
 800951a:	6849      	ldr	r1, [r1, #4]
 800951c:	6923      	ldr	r3, [r4, #16]
 800951e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	4607      	mov	r7, r0
 8009526:	4691      	mov	r9, r2
 8009528:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800952c:	f108 0601 	add.w	r6, r8, #1
 8009530:	42b3      	cmp	r3, r6
 8009532:	db0b      	blt.n	800954c <__lshift+0x38>
 8009534:	4638      	mov	r0, r7
 8009536:	f7ff fddb 	bl	80090f0 <_Balloc>
 800953a:	4605      	mov	r5, r0
 800953c:	b948      	cbnz	r0, 8009552 <__lshift+0x3e>
 800953e:	4602      	mov	r2, r0
 8009540:	4b2a      	ldr	r3, [pc, #168]	; (80095ec <__lshift+0xd8>)
 8009542:	482b      	ldr	r0, [pc, #172]	; (80095f0 <__lshift+0xdc>)
 8009544:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009548:	f7fe fe2c 	bl	80081a4 <__assert_func>
 800954c:	3101      	adds	r1, #1
 800954e:	005b      	lsls	r3, r3, #1
 8009550:	e7ee      	b.n	8009530 <__lshift+0x1c>
 8009552:	2300      	movs	r3, #0
 8009554:	f100 0114 	add.w	r1, r0, #20
 8009558:	f100 0210 	add.w	r2, r0, #16
 800955c:	4618      	mov	r0, r3
 800955e:	4553      	cmp	r3, sl
 8009560:	db37      	blt.n	80095d2 <__lshift+0xbe>
 8009562:	6920      	ldr	r0, [r4, #16]
 8009564:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009568:	f104 0314 	add.w	r3, r4, #20
 800956c:	f019 091f 	ands.w	r9, r9, #31
 8009570:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009574:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009578:	d02f      	beq.n	80095da <__lshift+0xc6>
 800957a:	f1c9 0e20 	rsb	lr, r9, #32
 800957e:	468a      	mov	sl, r1
 8009580:	f04f 0c00 	mov.w	ip, #0
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	fa02 f209 	lsl.w	r2, r2, r9
 800958a:	ea42 020c 	orr.w	r2, r2, ip
 800958e:	f84a 2b04 	str.w	r2, [sl], #4
 8009592:	f853 2b04 	ldr.w	r2, [r3], #4
 8009596:	4298      	cmp	r0, r3
 8009598:	fa22 fc0e 	lsr.w	ip, r2, lr
 800959c:	d8f2      	bhi.n	8009584 <__lshift+0x70>
 800959e:	1b03      	subs	r3, r0, r4
 80095a0:	3b15      	subs	r3, #21
 80095a2:	f023 0303 	bic.w	r3, r3, #3
 80095a6:	3304      	adds	r3, #4
 80095a8:	f104 0215 	add.w	r2, r4, #21
 80095ac:	4290      	cmp	r0, r2
 80095ae:	bf38      	it	cc
 80095b0:	2304      	movcc	r3, #4
 80095b2:	f841 c003 	str.w	ip, [r1, r3]
 80095b6:	f1bc 0f00 	cmp.w	ip, #0
 80095ba:	d001      	beq.n	80095c0 <__lshift+0xac>
 80095bc:	f108 0602 	add.w	r6, r8, #2
 80095c0:	3e01      	subs	r6, #1
 80095c2:	4638      	mov	r0, r7
 80095c4:	612e      	str	r6, [r5, #16]
 80095c6:	4621      	mov	r1, r4
 80095c8:	f7ff fdd2 	bl	8009170 <_Bfree>
 80095cc:	4628      	mov	r0, r5
 80095ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095d6:	3301      	adds	r3, #1
 80095d8:	e7c1      	b.n	800955e <__lshift+0x4a>
 80095da:	3904      	subs	r1, #4
 80095dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095e4:	4298      	cmp	r0, r3
 80095e6:	d8f9      	bhi.n	80095dc <__lshift+0xc8>
 80095e8:	e7ea      	b.n	80095c0 <__lshift+0xac>
 80095ea:	bf00      	nop
 80095ec:	0800a74e 	.word	0x0800a74e
 80095f0:	0800a75f 	.word	0x0800a75f

080095f4 <__mcmp>:
 80095f4:	b530      	push	{r4, r5, lr}
 80095f6:	6902      	ldr	r2, [r0, #16]
 80095f8:	690c      	ldr	r4, [r1, #16]
 80095fa:	1b12      	subs	r2, r2, r4
 80095fc:	d10e      	bne.n	800961c <__mcmp+0x28>
 80095fe:	f100 0314 	add.w	r3, r0, #20
 8009602:	3114      	adds	r1, #20
 8009604:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009608:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800960c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009610:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009614:	42a5      	cmp	r5, r4
 8009616:	d003      	beq.n	8009620 <__mcmp+0x2c>
 8009618:	d305      	bcc.n	8009626 <__mcmp+0x32>
 800961a:	2201      	movs	r2, #1
 800961c:	4610      	mov	r0, r2
 800961e:	bd30      	pop	{r4, r5, pc}
 8009620:	4283      	cmp	r3, r0
 8009622:	d3f3      	bcc.n	800960c <__mcmp+0x18>
 8009624:	e7fa      	b.n	800961c <__mcmp+0x28>
 8009626:	f04f 32ff 	mov.w	r2, #4294967295
 800962a:	e7f7      	b.n	800961c <__mcmp+0x28>

0800962c <__mdiff>:
 800962c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	460c      	mov	r4, r1
 8009632:	4606      	mov	r6, r0
 8009634:	4611      	mov	r1, r2
 8009636:	4620      	mov	r0, r4
 8009638:	4690      	mov	r8, r2
 800963a:	f7ff ffdb 	bl	80095f4 <__mcmp>
 800963e:	1e05      	subs	r5, r0, #0
 8009640:	d110      	bne.n	8009664 <__mdiff+0x38>
 8009642:	4629      	mov	r1, r5
 8009644:	4630      	mov	r0, r6
 8009646:	f7ff fd53 	bl	80090f0 <_Balloc>
 800964a:	b930      	cbnz	r0, 800965a <__mdiff+0x2e>
 800964c:	4b3a      	ldr	r3, [pc, #232]	; (8009738 <__mdiff+0x10c>)
 800964e:	4602      	mov	r2, r0
 8009650:	f240 2132 	movw	r1, #562	; 0x232
 8009654:	4839      	ldr	r0, [pc, #228]	; (800973c <__mdiff+0x110>)
 8009656:	f7fe fda5 	bl	80081a4 <__assert_func>
 800965a:	2301      	movs	r3, #1
 800965c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009664:	bfa4      	itt	ge
 8009666:	4643      	movge	r3, r8
 8009668:	46a0      	movge	r8, r4
 800966a:	4630      	mov	r0, r6
 800966c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009670:	bfa6      	itte	ge
 8009672:	461c      	movge	r4, r3
 8009674:	2500      	movge	r5, #0
 8009676:	2501      	movlt	r5, #1
 8009678:	f7ff fd3a 	bl	80090f0 <_Balloc>
 800967c:	b920      	cbnz	r0, 8009688 <__mdiff+0x5c>
 800967e:	4b2e      	ldr	r3, [pc, #184]	; (8009738 <__mdiff+0x10c>)
 8009680:	4602      	mov	r2, r0
 8009682:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009686:	e7e5      	b.n	8009654 <__mdiff+0x28>
 8009688:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800968c:	6926      	ldr	r6, [r4, #16]
 800968e:	60c5      	str	r5, [r0, #12]
 8009690:	f104 0914 	add.w	r9, r4, #20
 8009694:	f108 0514 	add.w	r5, r8, #20
 8009698:	f100 0e14 	add.w	lr, r0, #20
 800969c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80096a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096a4:	f108 0210 	add.w	r2, r8, #16
 80096a8:	46f2      	mov	sl, lr
 80096aa:	2100      	movs	r1, #0
 80096ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80096b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096b4:	fa1f f883 	uxth.w	r8, r3
 80096b8:	fa11 f18b 	uxtah	r1, r1, fp
 80096bc:	0c1b      	lsrs	r3, r3, #16
 80096be:	eba1 0808 	sub.w	r8, r1, r8
 80096c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80096c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096ca:	fa1f f888 	uxth.w	r8, r8
 80096ce:	1419      	asrs	r1, r3, #16
 80096d0:	454e      	cmp	r6, r9
 80096d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096d6:	f84a 3b04 	str.w	r3, [sl], #4
 80096da:	d8e7      	bhi.n	80096ac <__mdiff+0x80>
 80096dc:	1b33      	subs	r3, r6, r4
 80096de:	3b15      	subs	r3, #21
 80096e0:	f023 0303 	bic.w	r3, r3, #3
 80096e4:	3304      	adds	r3, #4
 80096e6:	3415      	adds	r4, #21
 80096e8:	42a6      	cmp	r6, r4
 80096ea:	bf38      	it	cc
 80096ec:	2304      	movcc	r3, #4
 80096ee:	441d      	add	r5, r3
 80096f0:	4473      	add	r3, lr
 80096f2:	469e      	mov	lr, r3
 80096f4:	462e      	mov	r6, r5
 80096f6:	4566      	cmp	r6, ip
 80096f8:	d30e      	bcc.n	8009718 <__mdiff+0xec>
 80096fa:	f10c 0203 	add.w	r2, ip, #3
 80096fe:	1b52      	subs	r2, r2, r5
 8009700:	f022 0203 	bic.w	r2, r2, #3
 8009704:	3d03      	subs	r5, #3
 8009706:	45ac      	cmp	ip, r5
 8009708:	bf38      	it	cc
 800970a:	2200      	movcc	r2, #0
 800970c:	441a      	add	r2, r3
 800970e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009712:	b17b      	cbz	r3, 8009734 <__mdiff+0x108>
 8009714:	6107      	str	r7, [r0, #16]
 8009716:	e7a3      	b.n	8009660 <__mdiff+0x34>
 8009718:	f856 8b04 	ldr.w	r8, [r6], #4
 800971c:	fa11 f288 	uxtah	r2, r1, r8
 8009720:	1414      	asrs	r4, r2, #16
 8009722:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009726:	b292      	uxth	r2, r2
 8009728:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800972c:	f84e 2b04 	str.w	r2, [lr], #4
 8009730:	1421      	asrs	r1, r4, #16
 8009732:	e7e0      	b.n	80096f6 <__mdiff+0xca>
 8009734:	3f01      	subs	r7, #1
 8009736:	e7ea      	b.n	800970e <__mdiff+0xe2>
 8009738:	0800a74e 	.word	0x0800a74e
 800973c:	0800a75f 	.word	0x0800a75f

08009740 <__d2b>:
 8009740:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009744:	4689      	mov	r9, r1
 8009746:	2101      	movs	r1, #1
 8009748:	ec57 6b10 	vmov	r6, r7, d0
 800974c:	4690      	mov	r8, r2
 800974e:	f7ff fccf 	bl	80090f0 <_Balloc>
 8009752:	4604      	mov	r4, r0
 8009754:	b930      	cbnz	r0, 8009764 <__d2b+0x24>
 8009756:	4602      	mov	r2, r0
 8009758:	4b25      	ldr	r3, [pc, #148]	; (80097f0 <__d2b+0xb0>)
 800975a:	4826      	ldr	r0, [pc, #152]	; (80097f4 <__d2b+0xb4>)
 800975c:	f240 310a 	movw	r1, #778	; 0x30a
 8009760:	f7fe fd20 	bl	80081a4 <__assert_func>
 8009764:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009768:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800976c:	bb35      	cbnz	r5, 80097bc <__d2b+0x7c>
 800976e:	2e00      	cmp	r6, #0
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	d028      	beq.n	80097c6 <__d2b+0x86>
 8009774:	4668      	mov	r0, sp
 8009776:	9600      	str	r6, [sp, #0]
 8009778:	f7ff fd82 	bl	8009280 <__lo0bits>
 800977c:	9900      	ldr	r1, [sp, #0]
 800977e:	b300      	cbz	r0, 80097c2 <__d2b+0x82>
 8009780:	9a01      	ldr	r2, [sp, #4]
 8009782:	f1c0 0320 	rsb	r3, r0, #32
 8009786:	fa02 f303 	lsl.w	r3, r2, r3
 800978a:	430b      	orrs	r3, r1
 800978c:	40c2      	lsrs	r2, r0
 800978e:	6163      	str	r3, [r4, #20]
 8009790:	9201      	str	r2, [sp, #4]
 8009792:	9b01      	ldr	r3, [sp, #4]
 8009794:	61a3      	str	r3, [r4, #24]
 8009796:	2b00      	cmp	r3, #0
 8009798:	bf14      	ite	ne
 800979a:	2202      	movne	r2, #2
 800979c:	2201      	moveq	r2, #1
 800979e:	6122      	str	r2, [r4, #16]
 80097a0:	b1d5      	cbz	r5, 80097d8 <__d2b+0x98>
 80097a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097a6:	4405      	add	r5, r0
 80097a8:	f8c9 5000 	str.w	r5, [r9]
 80097ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097b0:	f8c8 0000 	str.w	r0, [r8]
 80097b4:	4620      	mov	r0, r4
 80097b6:	b003      	add	sp, #12
 80097b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80097bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097c0:	e7d5      	b.n	800976e <__d2b+0x2e>
 80097c2:	6161      	str	r1, [r4, #20]
 80097c4:	e7e5      	b.n	8009792 <__d2b+0x52>
 80097c6:	a801      	add	r0, sp, #4
 80097c8:	f7ff fd5a 	bl	8009280 <__lo0bits>
 80097cc:	9b01      	ldr	r3, [sp, #4]
 80097ce:	6163      	str	r3, [r4, #20]
 80097d0:	2201      	movs	r2, #1
 80097d2:	6122      	str	r2, [r4, #16]
 80097d4:	3020      	adds	r0, #32
 80097d6:	e7e3      	b.n	80097a0 <__d2b+0x60>
 80097d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097e0:	f8c9 0000 	str.w	r0, [r9]
 80097e4:	6918      	ldr	r0, [r3, #16]
 80097e6:	f7ff fd2b 	bl	8009240 <__hi0bits>
 80097ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097ee:	e7df      	b.n	80097b0 <__d2b+0x70>
 80097f0:	0800a74e 	.word	0x0800a74e
 80097f4:	0800a75f 	.word	0x0800a75f

080097f8 <_calloc_r>:
 80097f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097fa:	fba1 2402 	umull	r2, r4, r1, r2
 80097fe:	b94c      	cbnz	r4, 8009814 <_calloc_r+0x1c>
 8009800:	4611      	mov	r1, r2
 8009802:	9201      	str	r2, [sp, #4]
 8009804:	f7fd fe94 	bl	8007530 <_malloc_r>
 8009808:	9a01      	ldr	r2, [sp, #4]
 800980a:	4605      	mov	r5, r0
 800980c:	b930      	cbnz	r0, 800981c <_calloc_r+0x24>
 800980e:	4628      	mov	r0, r5
 8009810:	b003      	add	sp, #12
 8009812:	bd30      	pop	{r4, r5, pc}
 8009814:	220c      	movs	r2, #12
 8009816:	6002      	str	r2, [r0, #0]
 8009818:	2500      	movs	r5, #0
 800981a:	e7f8      	b.n	800980e <_calloc_r+0x16>
 800981c:	4621      	mov	r1, r4
 800981e:	f7fd fe5e 	bl	80074de <memset>
 8009822:	e7f4      	b.n	800980e <_calloc_r+0x16>

08009824 <_free_r>:
 8009824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009826:	2900      	cmp	r1, #0
 8009828:	d044      	beq.n	80098b4 <_free_r+0x90>
 800982a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800982e:	9001      	str	r0, [sp, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	f1a1 0404 	sub.w	r4, r1, #4
 8009836:	bfb8      	it	lt
 8009838:	18e4      	addlt	r4, r4, r3
 800983a:	f7ff fc4d 	bl	80090d8 <__malloc_lock>
 800983e:	4a1e      	ldr	r2, [pc, #120]	; (80098b8 <_free_r+0x94>)
 8009840:	9801      	ldr	r0, [sp, #4]
 8009842:	6813      	ldr	r3, [r2, #0]
 8009844:	b933      	cbnz	r3, 8009854 <_free_r+0x30>
 8009846:	6063      	str	r3, [r4, #4]
 8009848:	6014      	str	r4, [r2, #0]
 800984a:	b003      	add	sp, #12
 800984c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009850:	f7ff bc48 	b.w	80090e4 <__malloc_unlock>
 8009854:	42a3      	cmp	r3, r4
 8009856:	d908      	bls.n	800986a <_free_r+0x46>
 8009858:	6825      	ldr	r5, [r4, #0]
 800985a:	1961      	adds	r1, r4, r5
 800985c:	428b      	cmp	r3, r1
 800985e:	bf01      	itttt	eq
 8009860:	6819      	ldreq	r1, [r3, #0]
 8009862:	685b      	ldreq	r3, [r3, #4]
 8009864:	1949      	addeq	r1, r1, r5
 8009866:	6021      	streq	r1, [r4, #0]
 8009868:	e7ed      	b.n	8009846 <_free_r+0x22>
 800986a:	461a      	mov	r2, r3
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	b10b      	cbz	r3, 8009874 <_free_r+0x50>
 8009870:	42a3      	cmp	r3, r4
 8009872:	d9fa      	bls.n	800986a <_free_r+0x46>
 8009874:	6811      	ldr	r1, [r2, #0]
 8009876:	1855      	adds	r5, r2, r1
 8009878:	42a5      	cmp	r5, r4
 800987a:	d10b      	bne.n	8009894 <_free_r+0x70>
 800987c:	6824      	ldr	r4, [r4, #0]
 800987e:	4421      	add	r1, r4
 8009880:	1854      	adds	r4, r2, r1
 8009882:	42a3      	cmp	r3, r4
 8009884:	6011      	str	r1, [r2, #0]
 8009886:	d1e0      	bne.n	800984a <_free_r+0x26>
 8009888:	681c      	ldr	r4, [r3, #0]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	6053      	str	r3, [r2, #4]
 800988e:	4421      	add	r1, r4
 8009890:	6011      	str	r1, [r2, #0]
 8009892:	e7da      	b.n	800984a <_free_r+0x26>
 8009894:	d902      	bls.n	800989c <_free_r+0x78>
 8009896:	230c      	movs	r3, #12
 8009898:	6003      	str	r3, [r0, #0]
 800989a:	e7d6      	b.n	800984a <_free_r+0x26>
 800989c:	6825      	ldr	r5, [r4, #0]
 800989e:	1961      	adds	r1, r4, r5
 80098a0:	428b      	cmp	r3, r1
 80098a2:	bf04      	itt	eq
 80098a4:	6819      	ldreq	r1, [r3, #0]
 80098a6:	685b      	ldreq	r3, [r3, #4]
 80098a8:	6063      	str	r3, [r4, #4]
 80098aa:	bf04      	itt	eq
 80098ac:	1949      	addeq	r1, r1, r5
 80098ae:	6021      	streq	r1, [r4, #0]
 80098b0:	6054      	str	r4, [r2, #4]
 80098b2:	e7ca      	b.n	800984a <_free_r+0x26>
 80098b4:	b003      	add	sp, #12
 80098b6:	bd30      	pop	{r4, r5, pc}
 80098b8:	20004cdc 	.word	0x20004cdc

080098bc <__ssputs_r>:
 80098bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098c0:	688e      	ldr	r6, [r1, #8]
 80098c2:	429e      	cmp	r6, r3
 80098c4:	4682      	mov	sl, r0
 80098c6:	460c      	mov	r4, r1
 80098c8:	4690      	mov	r8, r2
 80098ca:	461f      	mov	r7, r3
 80098cc:	d838      	bhi.n	8009940 <__ssputs_r+0x84>
 80098ce:	898a      	ldrh	r2, [r1, #12]
 80098d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80098d4:	d032      	beq.n	800993c <__ssputs_r+0x80>
 80098d6:	6825      	ldr	r5, [r4, #0]
 80098d8:	6909      	ldr	r1, [r1, #16]
 80098da:	eba5 0901 	sub.w	r9, r5, r1
 80098de:	6965      	ldr	r5, [r4, #20]
 80098e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80098e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80098e8:	3301      	adds	r3, #1
 80098ea:	444b      	add	r3, r9
 80098ec:	106d      	asrs	r5, r5, #1
 80098ee:	429d      	cmp	r5, r3
 80098f0:	bf38      	it	cc
 80098f2:	461d      	movcc	r5, r3
 80098f4:	0553      	lsls	r3, r2, #21
 80098f6:	d531      	bpl.n	800995c <__ssputs_r+0xa0>
 80098f8:	4629      	mov	r1, r5
 80098fa:	f7fd fe19 	bl	8007530 <_malloc_r>
 80098fe:	4606      	mov	r6, r0
 8009900:	b950      	cbnz	r0, 8009918 <__ssputs_r+0x5c>
 8009902:	230c      	movs	r3, #12
 8009904:	f8ca 3000 	str.w	r3, [sl]
 8009908:	89a3      	ldrh	r3, [r4, #12]
 800990a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800990e:	81a3      	strh	r3, [r4, #12]
 8009910:	f04f 30ff 	mov.w	r0, #4294967295
 8009914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009918:	6921      	ldr	r1, [r4, #16]
 800991a:	464a      	mov	r2, r9
 800991c:	f7fd fdd1 	bl	80074c2 <memcpy>
 8009920:	89a3      	ldrh	r3, [r4, #12]
 8009922:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800992a:	81a3      	strh	r3, [r4, #12]
 800992c:	6126      	str	r6, [r4, #16]
 800992e:	6165      	str	r5, [r4, #20]
 8009930:	444e      	add	r6, r9
 8009932:	eba5 0509 	sub.w	r5, r5, r9
 8009936:	6026      	str	r6, [r4, #0]
 8009938:	60a5      	str	r5, [r4, #8]
 800993a:	463e      	mov	r6, r7
 800993c:	42be      	cmp	r6, r7
 800993e:	d900      	bls.n	8009942 <__ssputs_r+0x86>
 8009940:	463e      	mov	r6, r7
 8009942:	6820      	ldr	r0, [r4, #0]
 8009944:	4632      	mov	r2, r6
 8009946:	4641      	mov	r1, r8
 8009948:	f000 fbbe 	bl	800a0c8 <memmove>
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	1b9b      	subs	r3, r3, r6
 8009950:	60a3      	str	r3, [r4, #8]
 8009952:	6823      	ldr	r3, [r4, #0]
 8009954:	4433      	add	r3, r6
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	2000      	movs	r0, #0
 800995a:	e7db      	b.n	8009914 <__ssputs_r+0x58>
 800995c:	462a      	mov	r2, r5
 800995e:	f000 fbcd 	bl	800a0fc <_realloc_r>
 8009962:	4606      	mov	r6, r0
 8009964:	2800      	cmp	r0, #0
 8009966:	d1e1      	bne.n	800992c <__ssputs_r+0x70>
 8009968:	6921      	ldr	r1, [r4, #16]
 800996a:	4650      	mov	r0, sl
 800996c:	f7ff ff5a 	bl	8009824 <_free_r>
 8009970:	e7c7      	b.n	8009902 <__ssputs_r+0x46>
	...

08009974 <_svfiprintf_r>:
 8009974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009978:	4698      	mov	r8, r3
 800997a:	898b      	ldrh	r3, [r1, #12]
 800997c:	061b      	lsls	r3, r3, #24
 800997e:	b09d      	sub	sp, #116	; 0x74
 8009980:	4607      	mov	r7, r0
 8009982:	460d      	mov	r5, r1
 8009984:	4614      	mov	r4, r2
 8009986:	d50e      	bpl.n	80099a6 <_svfiprintf_r+0x32>
 8009988:	690b      	ldr	r3, [r1, #16]
 800998a:	b963      	cbnz	r3, 80099a6 <_svfiprintf_r+0x32>
 800998c:	2140      	movs	r1, #64	; 0x40
 800998e:	f7fd fdcf 	bl	8007530 <_malloc_r>
 8009992:	6028      	str	r0, [r5, #0]
 8009994:	6128      	str	r0, [r5, #16]
 8009996:	b920      	cbnz	r0, 80099a2 <_svfiprintf_r+0x2e>
 8009998:	230c      	movs	r3, #12
 800999a:	603b      	str	r3, [r7, #0]
 800999c:	f04f 30ff 	mov.w	r0, #4294967295
 80099a0:	e0d1      	b.n	8009b46 <_svfiprintf_r+0x1d2>
 80099a2:	2340      	movs	r3, #64	; 0x40
 80099a4:	616b      	str	r3, [r5, #20]
 80099a6:	2300      	movs	r3, #0
 80099a8:	9309      	str	r3, [sp, #36]	; 0x24
 80099aa:	2320      	movs	r3, #32
 80099ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80099b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099b4:	2330      	movs	r3, #48	; 0x30
 80099b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009b60 <_svfiprintf_r+0x1ec>
 80099ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80099be:	f04f 0901 	mov.w	r9, #1
 80099c2:	4623      	mov	r3, r4
 80099c4:	469a      	mov	sl, r3
 80099c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099ca:	b10a      	cbz	r2, 80099d0 <_svfiprintf_r+0x5c>
 80099cc:	2a25      	cmp	r2, #37	; 0x25
 80099ce:	d1f9      	bne.n	80099c4 <_svfiprintf_r+0x50>
 80099d0:	ebba 0b04 	subs.w	fp, sl, r4
 80099d4:	d00b      	beq.n	80099ee <_svfiprintf_r+0x7a>
 80099d6:	465b      	mov	r3, fp
 80099d8:	4622      	mov	r2, r4
 80099da:	4629      	mov	r1, r5
 80099dc:	4638      	mov	r0, r7
 80099de:	f7ff ff6d 	bl	80098bc <__ssputs_r>
 80099e2:	3001      	adds	r0, #1
 80099e4:	f000 80aa 	beq.w	8009b3c <_svfiprintf_r+0x1c8>
 80099e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80099ea:	445a      	add	r2, fp
 80099ec:	9209      	str	r2, [sp, #36]	; 0x24
 80099ee:	f89a 3000 	ldrb.w	r3, [sl]
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	f000 80a2 	beq.w	8009b3c <_svfiprintf_r+0x1c8>
 80099f8:	2300      	movs	r3, #0
 80099fa:	f04f 32ff 	mov.w	r2, #4294967295
 80099fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a02:	f10a 0a01 	add.w	sl, sl, #1
 8009a06:	9304      	str	r3, [sp, #16]
 8009a08:	9307      	str	r3, [sp, #28]
 8009a0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009a0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009a10:	4654      	mov	r4, sl
 8009a12:	2205      	movs	r2, #5
 8009a14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a18:	4851      	ldr	r0, [pc, #324]	; (8009b60 <_svfiprintf_r+0x1ec>)
 8009a1a:	f7f6 fc01 	bl	8000220 <memchr>
 8009a1e:	9a04      	ldr	r2, [sp, #16]
 8009a20:	b9d8      	cbnz	r0, 8009a5a <_svfiprintf_r+0xe6>
 8009a22:	06d0      	lsls	r0, r2, #27
 8009a24:	bf44      	itt	mi
 8009a26:	2320      	movmi	r3, #32
 8009a28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a2c:	0711      	lsls	r1, r2, #28
 8009a2e:	bf44      	itt	mi
 8009a30:	232b      	movmi	r3, #43	; 0x2b
 8009a32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009a36:	f89a 3000 	ldrb.w	r3, [sl]
 8009a3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009a3c:	d015      	beq.n	8009a6a <_svfiprintf_r+0xf6>
 8009a3e:	9a07      	ldr	r2, [sp, #28]
 8009a40:	4654      	mov	r4, sl
 8009a42:	2000      	movs	r0, #0
 8009a44:	f04f 0c0a 	mov.w	ip, #10
 8009a48:	4621      	mov	r1, r4
 8009a4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a4e:	3b30      	subs	r3, #48	; 0x30
 8009a50:	2b09      	cmp	r3, #9
 8009a52:	d94e      	bls.n	8009af2 <_svfiprintf_r+0x17e>
 8009a54:	b1b0      	cbz	r0, 8009a84 <_svfiprintf_r+0x110>
 8009a56:	9207      	str	r2, [sp, #28]
 8009a58:	e014      	b.n	8009a84 <_svfiprintf_r+0x110>
 8009a5a:	eba0 0308 	sub.w	r3, r0, r8
 8009a5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009a62:	4313      	orrs	r3, r2
 8009a64:	9304      	str	r3, [sp, #16]
 8009a66:	46a2      	mov	sl, r4
 8009a68:	e7d2      	b.n	8009a10 <_svfiprintf_r+0x9c>
 8009a6a:	9b03      	ldr	r3, [sp, #12]
 8009a6c:	1d19      	adds	r1, r3, #4
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	9103      	str	r1, [sp, #12]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bfbb      	ittet	lt
 8009a76:	425b      	neglt	r3, r3
 8009a78:	f042 0202 	orrlt.w	r2, r2, #2
 8009a7c:	9307      	strge	r3, [sp, #28]
 8009a7e:	9307      	strlt	r3, [sp, #28]
 8009a80:	bfb8      	it	lt
 8009a82:	9204      	strlt	r2, [sp, #16]
 8009a84:	7823      	ldrb	r3, [r4, #0]
 8009a86:	2b2e      	cmp	r3, #46	; 0x2e
 8009a88:	d10c      	bne.n	8009aa4 <_svfiprintf_r+0x130>
 8009a8a:	7863      	ldrb	r3, [r4, #1]
 8009a8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009a8e:	d135      	bne.n	8009afc <_svfiprintf_r+0x188>
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	1d1a      	adds	r2, r3, #4
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	9203      	str	r2, [sp, #12]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	bfb8      	it	lt
 8009a9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009aa0:	3402      	adds	r4, #2
 8009aa2:	9305      	str	r3, [sp, #20]
 8009aa4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009b70 <_svfiprintf_r+0x1fc>
 8009aa8:	7821      	ldrb	r1, [r4, #0]
 8009aaa:	2203      	movs	r2, #3
 8009aac:	4650      	mov	r0, sl
 8009aae:	f7f6 fbb7 	bl	8000220 <memchr>
 8009ab2:	b140      	cbz	r0, 8009ac6 <_svfiprintf_r+0x152>
 8009ab4:	2340      	movs	r3, #64	; 0x40
 8009ab6:	eba0 000a 	sub.w	r0, r0, sl
 8009aba:	fa03 f000 	lsl.w	r0, r3, r0
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	4303      	orrs	r3, r0
 8009ac2:	3401      	adds	r4, #1
 8009ac4:	9304      	str	r3, [sp, #16]
 8009ac6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009aca:	4826      	ldr	r0, [pc, #152]	; (8009b64 <_svfiprintf_r+0x1f0>)
 8009acc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009ad0:	2206      	movs	r2, #6
 8009ad2:	f7f6 fba5 	bl	8000220 <memchr>
 8009ad6:	2800      	cmp	r0, #0
 8009ad8:	d038      	beq.n	8009b4c <_svfiprintf_r+0x1d8>
 8009ada:	4b23      	ldr	r3, [pc, #140]	; (8009b68 <_svfiprintf_r+0x1f4>)
 8009adc:	bb1b      	cbnz	r3, 8009b26 <_svfiprintf_r+0x1b2>
 8009ade:	9b03      	ldr	r3, [sp, #12]
 8009ae0:	3307      	adds	r3, #7
 8009ae2:	f023 0307 	bic.w	r3, r3, #7
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	9303      	str	r3, [sp, #12]
 8009aea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009aec:	4433      	add	r3, r6
 8009aee:	9309      	str	r3, [sp, #36]	; 0x24
 8009af0:	e767      	b.n	80099c2 <_svfiprintf_r+0x4e>
 8009af2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009af6:	460c      	mov	r4, r1
 8009af8:	2001      	movs	r0, #1
 8009afa:	e7a5      	b.n	8009a48 <_svfiprintf_r+0xd4>
 8009afc:	2300      	movs	r3, #0
 8009afe:	3401      	adds	r4, #1
 8009b00:	9305      	str	r3, [sp, #20]
 8009b02:	4619      	mov	r1, r3
 8009b04:	f04f 0c0a 	mov.w	ip, #10
 8009b08:	4620      	mov	r0, r4
 8009b0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b0e:	3a30      	subs	r2, #48	; 0x30
 8009b10:	2a09      	cmp	r2, #9
 8009b12:	d903      	bls.n	8009b1c <_svfiprintf_r+0x1a8>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d0c5      	beq.n	8009aa4 <_svfiprintf_r+0x130>
 8009b18:	9105      	str	r1, [sp, #20]
 8009b1a:	e7c3      	b.n	8009aa4 <_svfiprintf_r+0x130>
 8009b1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b20:	4604      	mov	r4, r0
 8009b22:	2301      	movs	r3, #1
 8009b24:	e7f0      	b.n	8009b08 <_svfiprintf_r+0x194>
 8009b26:	ab03      	add	r3, sp, #12
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	462a      	mov	r2, r5
 8009b2c:	4b0f      	ldr	r3, [pc, #60]	; (8009b6c <_svfiprintf_r+0x1f8>)
 8009b2e:	a904      	add	r1, sp, #16
 8009b30:	4638      	mov	r0, r7
 8009b32:	f7fd fe11 	bl	8007758 <_printf_float>
 8009b36:	1c42      	adds	r2, r0, #1
 8009b38:	4606      	mov	r6, r0
 8009b3a:	d1d6      	bne.n	8009aea <_svfiprintf_r+0x176>
 8009b3c:	89ab      	ldrh	r3, [r5, #12]
 8009b3e:	065b      	lsls	r3, r3, #25
 8009b40:	f53f af2c 	bmi.w	800999c <_svfiprintf_r+0x28>
 8009b44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b46:	b01d      	add	sp, #116	; 0x74
 8009b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b4c:	ab03      	add	r3, sp, #12
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	462a      	mov	r2, r5
 8009b52:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <_svfiprintf_r+0x1f8>)
 8009b54:	a904      	add	r1, sp, #16
 8009b56:	4638      	mov	r0, r7
 8009b58:	f7fe f8a2 	bl	8007ca0 <_printf_i>
 8009b5c:	e7eb      	b.n	8009b36 <_svfiprintf_r+0x1c2>
 8009b5e:	bf00      	nop
 8009b60:	0800a8bc 	.word	0x0800a8bc
 8009b64:	0800a8c6 	.word	0x0800a8c6
 8009b68:	08007759 	.word	0x08007759
 8009b6c:	080098bd 	.word	0x080098bd
 8009b70:	0800a8c2 	.word	0x0800a8c2

08009b74 <__sfputc_r>:
 8009b74:	6893      	ldr	r3, [r2, #8]
 8009b76:	3b01      	subs	r3, #1
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	b410      	push	{r4}
 8009b7c:	6093      	str	r3, [r2, #8]
 8009b7e:	da08      	bge.n	8009b92 <__sfputc_r+0x1e>
 8009b80:	6994      	ldr	r4, [r2, #24]
 8009b82:	42a3      	cmp	r3, r4
 8009b84:	db01      	blt.n	8009b8a <__sfputc_r+0x16>
 8009b86:	290a      	cmp	r1, #10
 8009b88:	d103      	bne.n	8009b92 <__sfputc_r+0x1e>
 8009b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b8e:	f000 b95d 	b.w	8009e4c <__swbuf_r>
 8009b92:	6813      	ldr	r3, [r2, #0]
 8009b94:	1c58      	adds	r0, r3, #1
 8009b96:	6010      	str	r0, [r2, #0]
 8009b98:	7019      	strb	r1, [r3, #0]
 8009b9a:	4608      	mov	r0, r1
 8009b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <__sfputs_r>:
 8009ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ba4:	4606      	mov	r6, r0
 8009ba6:	460f      	mov	r7, r1
 8009ba8:	4614      	mov	r4, r2
 8009baa:	18d5      	adds	r5, r2, r3
 8009bac:	42ac      	cmp	r4, r5
 8009bae:	d101      	bne.n	8009bb4 <__sfputs_r+0x12>
 8009bb0:	2000      	movs	r0, #0
 8009bb2:	e007      	b.n	8009bc4 <__sfputs_r+0x22>
 8009bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bb8:	463a      	mov	r2, r7
 8009bba:	4630      	mov	r0, r6
 8009bbc:	f7ff ffda 	bl	8009b74 <__sfputc_r>
 8009bc0:	1c43      	adds	r3, r0, #1
 8009bc2:	d1f3      	bne.n	8009bac <__sfputs_r+0xa>
 8009bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009bc8 <_vfiprintf_r>:
 8009bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bcc:	460d      	mov	r5, r1
 8009bce:	b09d      	sub	sp, #116	; 0x74
 8009bd0:	4614      	mov	r4, r2
 8009bd2:	4698      	mov	r8, r3
 8009bd4:	4606      	mov	r6, r0
 8009bd6:	b118      	cbz	r0, 8009be0 <_vfiprintf_r+0x18>
 8009bd8:	6983      	ldr	r3, [r0, #24]
 8009bda:	b90b      	cbnz	r3, 8009be0 <_vfiprintf_r+0x18>
 8009bdc:	f7fd fbac 	bl	8007338 <__sinit>
 8009be0:	4b89      	ldr	r3, [pc, #548]	; (8009e08 <_vfiprintf_r+0x240>)
 8009be2:	429d      	cmp	r5, r3
 8009be4:	d11b      	bne.n	8009c1e <_vfiprintf_r+0x56>
 8009be6:	6875      	ldr	r5, [r6, #4]
 8009be8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009bea:	07d9      	lsls	r1, r3, #31
 8009bec:	d405      	bmi.n	8009bfa <_vfiprintf_r+0x32>
 8009bee:	89ab      	ldrh	r3, [r5, #12]
 8009bf0:	059a      	lsls	r2, r3, #22
 8009bf2:	d402      	bmi.n	8009bfa <_vfiprintf_r+0x32>
 8009bf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009bf6:	f7fd fc62 	bl	80074be <__retarget_lock_acquire_recursive>
 8009bfa:	89ab      	ldrh	r3, [r5, #12]
 8009bfc:	071b      	lsls	r3, r3, #28
 8009bfe:	d501      	bpl.n	8009c04 <_vfiprintf_r+0x3c>
 8009c00:	692b      	ldr	r3, [r5, #16]
 8009c02:	b9eb      	cbnz	r3, 8009c40 <_vfiprintf_r+0x78>
 8009c04:	4629      	mov	r1, r5
 8009c06:	4630      	mov	r0, r6
 8009c08:	f000 f972 	bl	8009ef0 <__swsetup_r>
 8009c0c:	b1c0      	cbz	r0, 8009c40 <_vfiprintf_r+0x78>
 8009c0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009c10:	07dc      	lsls	r4, r3, #31
 8009c12:	d50e      	bpl.n	8009c32 <_vfiprintf_r+0x6a>
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	b01d      	add	sp, #116	; 0x74
 8009c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c1e:	4b7b      	ldr	r3, [pc, #492]	; (8009e0c <_vfiprintf_r+0x244>)
 8009c20:	429d      	cmp	r5, r3
 8009c22:	d101      	bne.n	8009c28 <_vfiprintf_r+0x60>
 8009c24:	68b5      	ldr	r5, [r6, #8]
 8009c26:	e7df      	b.n	8009be8 <_vfiprintf_r+0x20>
 8009c28:	4b79      	ldr	r3, [pc, #484]	; (8009e10 <_vfiprintf_r+0x248>)
 8009c2a:	429d      	cmp	r5, r3
 8009c2c:	bf08      	it	eq
 8009c2e:	68f5      	ldreq	r5, [r6, #12]
 8009c30:	e7da      	b.n	8009be8 <_vfiprintf_r+0x20>
 8009c32:	89ab      	ldrh	r3, [r5, #12]
 8009c34:	0598      	lsls	r0, r3, #22
 8009c36:	d4ed      	bmi.n	8009c14 <_vfiprintf_r+0x4c>
 8009c38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009c3a:	f7fd fc41 	bl	80074c0 <__retarget_lock_release_recursive>
 8009c3e:	e7e9      	b.n	8009c14 <_vfiprintf_r+0x4c>
 8009c40:	2300      	movs	r3, #0
 8009c42:	9309      	str	r3, [sp, #36]	; 0x24
 8009c44:	2320      	movs	r3, #32
 8009c46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c4e:	2330      	movs	r3, #48	; 0x30
 8009c50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009e14 <_vfiprintf_r+0x24c>
 8009c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c58:	f04f 0901 	mov.w	r9, #1
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	469a      	mov	sl, r3
 8009c60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c64:	b10a      	cbz	r2, 8009c6a <_vfiprintf_r+0xa2>
 8009c66:	2a25      	cmp	r2, #37	; 0x25
 8009c68:	d1f9      	bne.n	8009c5e <_vfiprintf_r+0x96>
 8009c6a:	ebba 0b04 	subs.w	fp, sl, r4
 8009c6e:	d00b      	beq.n	8009c88 <_vfiprintf_r+0xc0>
 8009c70:	465b      	mov	r3, fp
 8009c72:	4622      	mov	r2, r4
 8009c74:	4629      	mov	r1, r5
 8009c76:	4630      	mov	r0, r6
 8009c78:	f7ff ff93 	bl	8009ba2 <__sfputs_r>
 8009c7c:	3001      	adds	r0, #1
 8009c7e:	f000 80aa 	beq.w	8009dd6 <_vfiprintf_r+0x20e>
 8009c82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c84:	445a      	add	r2, fp
 8009c86:	9209      	str	r2, [sp, #36]	; 0x24
 8009c88:	f89a 3000 	ldrb.w	r3, [sl]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	f000 80a2 	beq.w	8009dd6 <_vfiprintf_r+0x20e>
 8009c92:	2300      	movs	r3, #0
 8009c94:	f04f 32ff 	mov.w	r2, #4294967295
 8009c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c9c:	f10a 0a01 	add.w	sl, sl, #1
 8009ca0:	9304      	str	r3, [sp, #16]
 8009ca2:	9307      	str	r3, [sp, #28]
 8009ca4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ca8:	931a      	str	r3, [sp, #104]	; 0x68
 8009caa:	4654      	mov	r4, sl
 8009cac:	2205      	movs	r2, #5
 8009cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb2:	4858      	ldr	r0, [pc, #352]	; (8009e14 <_vfiprintf_r+0x24c>)
 8009cb4:	f7f6 fab4 	bl	8000220 <memchr>
 8009cb8:	9a04      	ldr	r2, [sp, #16]
 8009cba:	b9d8      	cbnz	r0, 8009cf4 <_vfiprintf_r+0x12c>
 8009cbc:	06d1      	lsls	r1, r2, #27
 8009cbe:	bf44      	itt	mi
 8009cc0:	2320      	movmi	r3, #32
 8009cc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cc6:	0713      	lsls	r3, r2, #28
 8009cc8:	bf44      	itt	mi
 8009cca:	232b      	movmi	r3, #43	; 0x2b
 8009ccc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd4:	2b2a      	cmp	r3, #42	; 0x2a
 8009cd6:	d015      	beq.n	8009d04 <_vfiprintf_r+0x13c>
 8009cd8:	9a07      	ldr	r2, [sp, #28]
 8009cda:	4654      	mov	r4, sl
 8009cdc:	2000      	movs	r0, #0
 8009cde:	f04f 0c0a 	mov.w	ip, #10
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ce8:	3b30      	subs	r3, #48	; 0x30
 8009cea:	2b09      	cmp	r3, #9
 8009cec:	d94e      	bls.n	8009d8c <_vfiprintf_r+0x1c4>
 8009cee:	b1b0      	cbz	r0, 8009d1e <_vfiprintf_r+0x156>
 8009cf0:	9207      	str	r2, [sp, #28]
 8009cf2:	e014      	b.n	8009d1e <_vfiprintf_r+0x156>
 8009cf4:	eba0 0308 	sub.w	r3, r0, r8
 8009cf8:	fa09 f303 	lsl.w	r3, r9, r3
 8009cfc:	4313      	orrs	r3, r2
 8009cfe:	9304      	str	r3, [sp, #16]
 8009d00:	46a2      	mov	sl, r4
 8009d02:	e7d2      	b.n	8009caa <_vfiprintf_r+0xe2>
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	1d19      	adds	r1, r3, #4
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	9103      	str	r1, [sp, #12]
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	bfbb      	ittet	lt
 8009d10:	425b      	neglt	r3, r3
 8009d12:	f042 0202 	orrlt.w	r2, r2, #2
 8009d16:	9307      	strge	r3, [sp, #28]
 8009d18:	9307      	strlt	r3, [sp, #28]
 8009d1a:	bfb8      	it	lt
 8009d1c:	9204      	strlt	r2, [sp, #16]
 8009d1e:	7823      	ldrb	r3, [r4, #0]
 8009d20:	2b2e      	cmp	r3, #46	; 0x2e
 8009d22:	d10c      	bne.n	8009d3e <_vfiprintf_r+0x176>
 8009d24:	7863      	ldrb	r3, [r4, #1]
 8009d26:	2b2a      	cmp	r3, #42	; 0x2a
 8009d28:	d135      	bne.n	8009d96 <_vfiprintf_r+0x1ce>
 8009d2a:	9b03      	ldr	r3, [sp, #12]
 8009d2c:	1d1a      	adds	r2, r3, #4
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	9203      	str	r2, [sp, #12]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	bfb8      	it	lt
 8009d36:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d3a:	3402      	adds	r4, #2
 8009d3c:	9305      	str	r3, [sp, #20]
 8009d3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009e24 <_vfiprintf_r+0x25c>
 8009d42:	7821      	ldrb	r1, [r4, #0]
 8009d44:	2203      	movs	r2, #3
 8009d46:	4650      	mov	r0, sl
 8009d48:	f7f6 fa6a 	bl	8000220 <memchr>
 8009d4c:	b140      	cbz	r0, 8009d60 <_vfiprintf_r+0x198>
 8009d4e:	2340      	movs	r3, #64	; 0x40
 8009d50:	eba0 000a 	sub.w	r0, r0, sl
 8009d54:	fa03 f000 	lsl.w	r0, r3, r0
 8009d58:	9b04      	ldr	r3, [sp, #16]
 8009d5a:	4303      	orrs	r3, r0
 8009d5c:	3401      	adds	r4, #1
 8009d5e:	9304      	str	r3, [sp, #16]
 8009d60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d64:	482c      	ldr	r0, [pc, #176]	; (8009e18 <_vfiprintf_r+0x250>)
 8009d66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d6a:	2206      	movs	r2, #6
 8009d6c:	f7f6 fa58 	bl	8000220 <memchr>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	d03f      	beq.n	8009df4 <_vfiprintf_r+0x22c>
 8009d74:	4b29      	ldr	r3, [pc, #164]	; (8009e1c <_vfiprintf_r+0x254>)
 8009d76:	bb1b      	cbnz	r3, 8009dc0 <_vfiprintf_r+0x1f8>
 8009d78:	9b03      	ldr	r3, [sp, #12]
 8009d7a:	3307      	adds	r3, #7
 8009d7c:	f023 0307 	bic.w	r3, r3, #7
 8009d80:	3308      	adds	r3, #8
 8009d82:	9303      	str	r3, [sp, #12]
 8009d84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d86:	443b      	add	r3, r7
 8009d88:	9309      	str	r3, [sp, #36]	; 0x24
 8009d8a:	e767      	b.n	8009c5c <_vfiprintf_r+0x94>
 8009d8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d90:	460c      	mov	r4, r1
 8009d92:	2001      	movs	r0, #1
 8009d94:	e7a5      	b.n	8009ce2 <_vfiprintf_r+0x11a>
 8009d96:	2300      	movs	r3, #0
 8009d98:	3401      	adds	r4, #1
 8009d9a:	9305      	str	r3, [sp, #20]
 8009d9c:	4619      	mov	r1, r3
 8009d9e:	f04f 0c0a 	mov.w	ip, #10
 8009da2:	4620      	mov	r0, r4
 8009da4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009da8:	3a30      	subs	r2, #48	; 0x30
 8009daa:	2a09      	cmp	r2, #9
 8009dac:	d903      	bls.n	8009db6 <_vfiprintf_r+0x1ee>
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d0c5      	beq.n	8009d3e <_vfiprintf_r+0x176>
 8009db2:	9105      	str	r1, [sp, #20]
 8009db4:	e7c3      	b.n	8009d3e <_vfiprintf_r+0x176>
 8009db6:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dba:	4604      	mov	r4, r0
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e7f0      	b.n	8009da2 <_vfiprintf_r+0x1da>
 8009dc0:	ab03      	add	r3, sp, #12
 8009dc2:	9300      	str	r3, [sp, #0]
 8009dc4:	462a      	mov	r2, r5
 8009dc6:	4b16      	ldr	r3, [pc, #88]	; (8009e20 <_vfiprintf_r+0x258>)
 8009dc8:	a904      	add	r1, sp, #16
 8009dca:	4630      	mov	r0, r6
 8009dcc:	f7fd fcc4 	bl	8007758 <_printf_float>
 8009dd0:	4607      	mov	r7, r0
 8009dd2:	1c78      	adds	r0, r7, #1
 8009dd4:	d1d6      	bne.n	8009d84 <_vfiprintf_r+0x1bc>
 8009dd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009dd8:	07d9      	lsls	r1, r3, #31
 8009dda:	d405      	bmi.n	8009de8 <_vfiprintf_r+0x220>
 8009ddc:	89ab      	ldrh	r3, [r5, #12]
 8009dde:	059a      	lsls	r2, r3, #22
 8009de0:	d402      	bmi.n	8009de8 <_vfiprintf_r+0x220>
 8009de2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009de4:	f7fd fb6c 	bl	80074c0 <__retarget_lock_release_recursive>
 8009de8:	89ab      	ldrh	r3, [r5, #12]
 8009dea:	065b      	lsls	r3, r3, #25
 8009dec:	f53f af12 	bmi.w	8009c14 <_vfiprintf_r+0x4c>
 8009df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009df2:	e711      	b.n	8009c18 <_vfiprintf_r+0x50>
 8009df4:	ab03      	add	r3, sp, #12
 8009df6:	9300      	str	r3, [sp, #0]
 8009df8:	462a      	mov	r2, r5
 8009dfa:	4b09      	ldr	r3, [pc, #36]	; (8009e20 <_vfiprintf_r+0x258>)
 8009dfc:	a904      	add	r1, sp, #16
 8009dfe:	4630      	mov	r0, r6
 8009e00:	f7fd ff4e 	bl	8007ca0 <_printf_i>
 8009e04:	e7e4      	b.n	8009dd0 <_vfiprintf_r+0x208>
 8009e06:	bf00      	nop
 8009e08:	0800a5c0 	.word	0x0800a5c0
 8009e0c:	0800a5e0 	.word	0x0800a5e0
 8009e10:	0800a5a0 	.word	0x0800a5a0
 8009e14:	0800a8bc 	.word	0x0800a8bc
 8009e18:	0800a8c6 	.word	0x0800a8c6
 8009e1c:	08007759 	.word	0x08007759
 8009e20:	08009ba3 	.word	0x08009ba3
 8009e24:	0800a8c2 	.word	0x0800a8c2

08009e28 <_read_r>:
 8009e28:	b538      	push	{r3, r4, r5, lr}
 8009e2a:	4d07      	ldr	r5, [pc, #28]	; (8009e48 <_read_r+0x20>)
 8009e2c:	4604      	mov	r4, r0
 8009e2e:	4608      	mov	r0, r1
 8009e30:	4611      	mov	r1, r2
 8009e32:	2200      	movs	r2, #0
 8009e34:	602a      	str	r2, [r5, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	f7f7 fdb0 	bl	800199c <_read>
 8009e3c:	1c43      	adds	r3, r0, #1
 8009e3e:	d102      	bne.n	8009e46 <_read_r+0x1e>
 8009e40:	682b      	ldr	r3, [r5, #0]
 8009e42:	b103      	cbz	r3, 8009e46 <_read_r+0x1e>
 8009e44:	6023      	str	r3, [r4, #0]
 8009e46:	bd38      	pop	{r3, r4, r5, pc}
 8009e48:	20004ce4 	.word	0x20004ce4

08009e4c <__swbuf_r>:
 8009e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e4e:	460e      	mov	r6, r1
 8009e50:	4614      	mov	r4, r2
 8009e52:	4605      	mov	r5, r0
 8009e54:	b118      	cbz	r0, 8009e5e <__swbuf_r+0x12>
 8009e56:	6983      	ldr	r3, [r0, #24]
 8009e58:	b90b      	cbnz	r3, 8009e5e <__swbuf_r+0x12>
 8009e5a:	f7fd fa6d 	bl	8007338 <__sinit>
 8009e5e:	4b21      	ldr	r3, [pc, #132]	; (8009ee4 <__swbuf_r+0x98>)
 8009e60:	429c      	cmp	r4, r3
 8009e62:	d12b      	bne.n	8009ebc <__swbuf_r+0x70>
 8009e64:	686c      	ldr	r4, [r5, #4]
 8009e66:	69a3      	ldr	r3, [r4, #24]
 8009e68:	60a3      	str	r3, [r4, #8]
 8009e6a:	89a3      	ldrh	r3, [r4, #12]
 8009e6c:	071a      	lsls	r2, r3, #28
 8009e6e:	d52f      	bpl.n	8009ed0 <__swbuf_r+0x84>
 8009e70:	6923      	ldr	r3, [r4, #16]
 8009e72:	b36b      	cbz	r3, 8009ed0 <__swbuf_r+0x84>
 8009e74:	6923      	ldr	r3, [r4, #16]
 8009e76:	6820      	ldr	r0, [r4, #0]
 8009e78:	1ac0      	subs	r0, r0, r3
 8009e7a:	6963      	ldr	r3, [r4, #20]
 8009e7c:	b2f6      	uxtb	r6, r6
 8009e7e:	4283      	cmp	r3, r0
 8009e80:	4637      	mov	r7, r6
 8009e82:	dc04      	bgt.n	8009e8e <__swbuf_r+0x42>
 8009e84:	4621      	mov	r1, r4
 8009e86:	4628      	mov	r0, r5
 8009e88:	f7ff f8ba 	bl	8009000 <_fflush_r>
 8009e8c:	bb30      	cbnz	r0, 8009edc <__swbuf_r+0x90>
 8009e8e:	68a3      	ldr	r3, [r4, #8]
 8009e90:	3b01      	subs	r3, #1
 8009e92:	60a3      	str	r3, [r4, #8]
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	1c5a      	adds	r2, r3, #1
 8009e98:	6022      	str	r2, [r4, #0]
 8009e9a:	701e      	strb	r6, [r3, #0]
 8009e9c:	6963      	ldr	r3, [r4, #20]
 8009e9e:	3001      	adds	r0, #1
 8009ea0:	4283      	cmp	r3, r0
 8009ea2:	d004      	beq.n	8009eae <__swbuf_r+0x62>
 8009ea4:	89a3      	ldrh	r3, [r4, #12]
 8009ea6:	07db      	lsls	r3, r3, #31
 8009ea8:	d506      	bpl.n	8009eb8 <__swbuf_r+0x6c>
 8009eaa:	2e0a      	cmp	r6, #10
 8009eac:	d104      	bne.n	8009eb8 <__swbuf_r+0x6c>
 8009eae:	4621      	mov	r1, r4
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f7ff f8a5 	bl	8009000 <_fflush_r>
 8009eb6:	b988      	cbnz	r0, 8009edc <__swbuf_r+0x90>
 8009eb8:	4638      	mov	r0, r7
 8009eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	; (8009ee8 <__swbuf_r+0x9c>)
 8009ebe:	429c      	cmp	r4, r3
 8009ec0:	d101      	bne.n	8009ec6 <__swbuf_r+0x7a>
 8009ec2:	68ac      	ldr	r4, [r5, #8]
 8009ec4:	e7cf      	b.n	8009e66 <__swbuf_r+0x1a>
 8009ec6:	4b09      	ldr	r3, [pc, #36]	; (8009eec <__swbuf_r+0xa0>)
 8009ec8:	429c      	cmp	r4, r3
 8009eca:	bf08      	it	eq
 8009ecc:	68ec      	ldreq	r4, [r5, #12]
 8009ece:	e7ca      	b.n	8009e66 <__swbuf_r+0x1a>
 8009ed0:	4621      	mov	r1, r4
 8009ed2:	4628      	mov	r0, r5
 8009ed4:	f000 f80c 	bl	8009ef0 <__swsetup_r>
 8009ed8:	2800      	cmp	r0, #0
 8009eda:	d0cb      	beq.n	8009e74 <__swbuf_r+0x28>
 8009edc:	f04f 37ff 	mov.w	r7, #4294967295
 8009ee0:	e7ea      	b.n	8009eb8 <__swbuf_r+0x6c>
 8009ee2:	bf00      	nop
 8009ee4:	0800a5c0 	.word	0x0800a5c0
 8009ee8:	0800a5e0 	.word	0x0800a5e0
 8009eec:	0800a5a0 	.word	0x0800a5a0

08009ef0 <__swsetup_r>:
 8009ef0:	4b32      	ldr	r3, [pc, #200]	; (8009fbc <__swsetup_r+0xcc>)
 8009ef2:	b570      	push	{r4, r5, r6, lr}
 8009ef4:	681d      	ldr	r5, [r3, #0]
 8009ef6:	4606      	mov	r6, r0
 8009ef8:	460c      	mov	r4, r1
 8009efa:	b125      	cbz	r5, 8009f06 <__swsetup_r+0x16>
 8009efc:	69ab      	ldr	r3, [r5, #24]
 8009efe:	b913      	cbnz	r3, 8009f06 <__swsetup_r+0x16>
 8009f00:	4628      	mov	r0, r5
 8009f02:	f7fd fa19 	bl	8007338 <__sinit>
 8009f06:	4b2e      	ldr	r3, [pc, #184]	; (8009fc0 <__swsetup_r+0xd0>)
 8009f08:	429c      	cmp	r4, r3
 8009f0a:	d10f      	bne.n	8009f2c <__swsetup_r+0x3c>
 8009f0c:	686c      	ldr	r4, [r5, #4]
 8009f0e:	89a3      	ldrh	r3, [r4, #12]
 8009f10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f14:	0719      	lsls	r1, r3, #28
 8009f16:	d42c      	bmi.n	8009f72 <__swsetup_r+0x82>
 8009f18:	06dd      	lsls	r5, r3, #27
 8009f1a:	d411      	bmi.n	8009f40 <__swsetup_r+0x50>
 8009f1c:	2309      	movs	r3, #9
 8009f1e:	6033      	str	r3, [r6, #0]
 8009f20:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f24:	81a3      	strh	r3, [r4, #12]
 8009f26:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2a:	e03e      	b.n	8009faa <__swsetup_r+0xba>
 8009f2c:	4b25      	ldr	r3, [pc, #148]	; (8009fc4 <__swsetup_r+0xd4>)
 8009f2e:	429c      	cmp	r4, r3
 8009f30:	d101      	bne.n	8009f36 <__swsetup_r+0x46>
 8009f32:	68ac      	ldr	r4, [r5, #8]
 8009f34:	e7eb      	b.n	8009f0e <__swsetup_r+0x1e>
 8009f36:	4b24      	ldr	r3, [pc, #144]	; (8009fc8 <__swsetup_r+0xd8>)
 8009f38:	429c      	cmp	r4, r3
 8009f3a:	bf08      	it	eq
 8009f3c:	68ec      	ldreq	r4, [r5, #12]
 8009f3e:	e7e6      	b.n	8009f0e <__swsetup_r+0x1e>
 8009f40:	0758      	lsls	r0, r3, #29
 8009f42:	d512      	bpl.n	8009f6a <__swsetup_r+0x7a>
 8009f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f46:	b141      	cbz	r1, 8009f5a <__swsetup_r+0x6a>
 8009f48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f4c:	4299      	cmp	r1, r3
 8009f4e:	d002      	beq.n	8009f56 <__swsetup_r+0x66>
 8009f50:	4630      	mov	r0, r6
 8009f52:	f7ff fc67 	bl	8009824 <_free_r>
 8009f56:	2300      	movs	r3, #0
 8009f58:	6363      	str	r3, [r4, #52]	; 0x34
 8009f5a:	89a3      	ldrh	r3, [r4, #12]
 8009f5c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f60:	81a3      	strh	r3, [r4, #12]
 8009f62:	2300      	movs	r3, #0
 8009f64:	6063      	str	r3, [r4, #4]
 8009f66:	6923      	ldr	r3, [r4, #16]
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	89a3      	ldrh	r3, [r4, #12]
 8009f6c:	f043 0308 	orr.w	r3, r3, #8
 8009f70:	81a3      	strh	r3, [r4, #12]
 8009f72:	6923      	ldr	r3, [r4, #16]
 8009f74:	b94b      	cbnz	r3, 8009f8a <__swsetup_r+0x9a>
 8009f76:	89a3      	ldrh	r3, [r4, #12]
 8009f78:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f80:	d003      	beq.n	8009f8a <__swsetup_r+0x9a>
 8009f82:	4621      	mov	r1, r4
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 f84d 	bl	800a024 <__smakebuf_r>
 8009f8a:	89a0      	ldrh	r0, [r4, #12]
 8009f8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f90:	f010 0301 	ands.w	r3, r0, #1
 8009f94:	d00a      	beq.n	8009fac <__swsetup_r+0xbc>
 8009f96:	2300      	movs	r3, #0
 8009f98:	60a3      	str	r3, [r4, #8]
 8009f9a:	6963      	ldr	r3, [r4, #20]
 8009f9c:	425b      	negs	r3, r3
 8009f9e:	61a3      	str	r3, [r4, #24]
 8009fa0:	6923      	ldr	r3, [r4, #16]
 8009fa2:	b943      	cbnz	r3, 8009fb6 <__swsetup_r+0xc6>
 8009fa4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fa8:	d1ba      	bne.n	8009f20 <__swsetup_r+0x30>
 8009faa:	bd70      	pop	{r4, r5, r6, pc}
 8009fac:	0781      	lsls	r1, r0, #30
 8009fae:	bf58      	it	pl
 8009fb0:	6963      	ldrpl	r3, [r4, #20]
 8009fb2:	60a3      	str	r3, [r4, #8]
 8009fb4:	e7f4      	b.n	8009fa0 <__swsetup_r+0xb0>
 8009fb6:	2000      	movs	r0, #0
 8009fb8:	e7f7      	b.n	8009faa <__swsetup_r+0xba>
 8009fba:	bf00      	nop
 8009fbc:	20000010 	.word	0x20000010
 8009fc0:	0800a5c0 	.word	0x0800a5c0
 8009fc4:	0800a5e0 	.word	0x0800a5e0
 8009fc8:	0800a5a0 	.word	0x0800a5a0

08009fcc <abort>:
 8009fcc:	b508      	push	{r3, lr}
 8009fce:	2006      	movs	r0, #6
 8009fd0:	f000 f8ec 	bl	800a1ac <raise>
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	f7f7 fcd7 	bl	8001988 <_exit>

08009fda <__swhatbuf_r>:
 8009fda:	b570      	push	{r4, r5, r6, lr}
 8009fdc:	460e      	mov	r6, r1
 8009fde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe2:	2900      	cmp	r1, #0
 8009fe4:	b096      	sub	sp, #88	; 0x58
 8009fe6:	4614      	mov	r4, r2
 8009fe8:	461d      	mov	r5, r3
 8009fea:	da08      	bge.n	8009ffe <__swhatbuf_r+0x24>
 8009fec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009ff0:	2200      	movs	r2, #0
 8009ff2:	602a      	str	r2, [r5, #0]
 8009ff4:	061a      	lsls	r2, r3, #24
 8009ff6:	d410      	bmi.n	800a01a <__swhatbuf_r+0x40>
 8009ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ffc:	e00e      	b.n	800a01c <__swhatbuf_r+0x42>
 8009ffe:	466a      	mov	r2, sp
 800a000:	f000 f8fe 	bl	800a200 <_fstat_r>
 800a004:	2800      	cmp	r0, #0
 800a006:	dbf1      	blt.n	8009fec <__swhatbuf_r+0x12>
 800a008:	9a01      	ldr	r2, [sp, #4]
 800a00a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a00e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a012:	425a      	negs	r2, r3
 800a014:	415a      	adcs	r2, r3
 800a016:	602a      	str	r2, [r5, #0]
 800a018:	e7ee      	b.n	8009ff8 <__swhatbuf_r+0x1e>
 800a01a:	2340      	movs	r3, #64	; 0x40
 800a01c:	2000      	movs	r0, #0
 800a01e:	6023      	str	r3, [r4, #0]
 800a020:	b016      	add	sp, #88	; 0x58
 800a022:	bd70      	pop	{r4, r5, r6, pc}

0800a024 <__smakebuf_r>:
 800a024:	898b      	ldrh	r3, [r1, #12]
 800a026:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a028:	079d      	lsls	r5, r3, #30
 800a02a:	4606      	mov	r6, r0
 800a02c:	460c      	mov	r4, r1
 800a02e:	d507      	bpl.n	800a040 <__smakebuf_r+0x1c>
 800a030:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a034:	6023      	str	r3, [r4, #0]
 800a036:	6123      	str	r3, [r4, #16]
 800a038:	2301      	movs	r3, #1
 800a03a:	6163      	str	r3, [r4, #20]
 800a03c:	b002      	add	sp, #8
 800a03e:	bd70      	pop	{r4, r5, r6, pc}
 800a040:	ab01      	add	r3, sp, #4
 800a042:	466a      	mov	r2, sp
 800a044:	f7ff ffc9 	bl	8009fda <__swhatbuf_r>
 800a048:	9900      	ldr	r1, [sp, #0]
 800a04a:	4605      	mov	r5, r0
 800a04c:	4630      	mov	r0, r6
 800a04e:	f7fd fa6f 	bl	8007530 <_malloc_r>
 800a052:	b948      	cbnz	r0, 800a068 <__smakebuf_r+0x44>
 800a054:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a058:	059a      	lsls	r2, r3, #22
 800a05a:	d4ef      	bmi.n	800a03c <__smakebuf_r+0x18>
 800a05c:	f023 0303 	bic.w	r3, r3, #3
 800a060:	f043 0302 	orr.w	r3, r3, #2
 800a064:	81a3      	strh	r3, [r4, #12]
 800a066:	e7e3      	b.n	800a030 <__smakebuf_r+0xc>
 800a068:	4b0d      	ldr	r3, [pc, #52]	; (800a0a0 <__smakebuf_r+0x7c>)
 800a06a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	6020      	str	r0, [r4, #0]
 800a070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a074:	81a3      	strh	r3, [r4, #12]
 800a076:	9b00      	ldr	r3, [sp, #0]
 800a078:	6163      	str	r3, [r4, #20]
 800a07a:	9b01      	ldr	r3, [sp, #4]
 800a07c:	6120      	str	r0, [r4, #16]
 800a07e:	b15b      	cbz	r3, 800a098 <__smakebuf_r+0x74>
 800a080:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a084:	4630      	mov	r0, r6
 800a086:	f000 f8cd 	bl	800a224 <_isatty_r>
 800a08a:	b128      	cbz	r0, 800a098 <__smakebuf_r+0x74>
 800a08c:	89a3      	ldrh	r3, [r4, #12]
 800a08e:	f023 0303 	bic.w	r3, r3, #3
 800a092:	f043 0301 	orr.w	r3, r3, #1
 800a096:	81a3      	strh	r3, [r4, #12]
 800a098:	89a0      	ldrh	r0, [r4, #12]
 800a09a:	4305      	orrs	r5, r0
 800a09c:	81a5      	strh	r5, [r4, #12]
 800a09e:	e7cd      	b.n	800a03c <__smakebuf_r+0x18>
 800a0a0:	080072d1 	.word	0x080072d1

0800a0a4 <__ascii_mbtowc>:
 800a0a4:	b082      	sub	sp, #8
 800a0a6:	b901      	cbnz	r1, 800a0aa <__ascii_mbtowc+0x6>
 800a0a8:	a901      	add	r1, sp, #4
 800a0aa:	b142      	cbz	r2, 800a0be <__ascii_mbtowc+0x1a>
 800a0ac:	b14b      	cbz	r3, 800a0c2 <__ascii_mbtowc+0x1e>
 800a0ae:	7813      	ldrb	r3, [r2, #0]
 800a0b0:	600b      	str	r3, [r1, #0]
 800a0b2:	7812      	ldrb	r2, [r2, #0]
 800a0b4:	1e10      	subs	r0, r2, #0
 800a0b6:	bf18      	it	ne
 800a0b8:	2001      	movne	r0, #1
 800a0ba:	b002      	add	sp, #8
 800a0bc:	4770      	bx	lr
 800a0be:	4610      	mov	r0, r2
 800a0c0:	e7fb      	b.n	800a0ba <__ascii_mbtowc+0x16>
 800a0c2:	f06f 0001 	mvn.w	r0, #1
 800a0c6:	e7f8      	b.n	800a0ba <__ascii_mbtowc+0x16>

0800a0c8 <memmove>:
 800a0c8:	4288      	cmp	r0, r1
 800a0ca:	b510      	push	{r4, lr}
 800a0cc:	eb01 0402 	add.w	r4, r1, r2
 800a0d0:	d902      	bls.n	800a0d8 <memmove+0x10>
 800a0d2:	4284      	cmp	r4, r0
 800a0d4:	4623      	mov	r3, r4
 800a0d6:	d807      	bhi.n	800a0e8 <memmove+0x20>
 800a0d8:	1e43      	subs	r3, r0, #1
 800a0da:	42a1      	cmp	r1, r4
 800a0dc:	d008      	beq.n	800a0f0 <memmove+0x28>
 800a0de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a0e6:	e7f8      	b.n	800a0da <memmove+0x12>
 800a0e8:	4402      	add	r2, r0
 800a0ea:	4601      	mov	r1, r0
 800a0ec:	428a      	cmp	r2, r1
 800a0ee:	d100      	bne.n	800a0f2 <memmove+0x2a>
 800a0f0:	bd10      	pop	{r4, pc}
 800a0f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a0f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a0fa:	e7f7      	b.n	800a0ec <memmove+0x24>

0800a0fc <_realloc_r>:
 800a0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a100:	4680      	mov	r8, r0
 800a102:	4614      	mov	r4, r2
 800a104:	460e      	mov	r6, r1
 800a106:	b921      	cbnz	r1, 800a112 <_realloc_r+0x16>
 800a108:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a10c:	4611      	mov	r1, r2
 800a10e:	f7fd ba0f 	b.w	8007530 <_malloc_r>
 800a112:	b92a      	cbnz	r2, 800a120 <_realloc_r+0x24>
 800a114:	f7ff fb86 	bl	8009824 <_free_r>
 800a118:	4625      	mov	r5, r4
 800a11a:	4628      	mov	r0, r5
 800a11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a120:	f000 f890 	bl	800a244 <_malloc_usable_size_r>
 800a124:	4284      	cmp	r4, r0
 800a126:	4607      	mov	r7, r0
 800a128:	d802      	bhi.n	800a130 <_realloc_r+0x34>
 800a12a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a12e:	d812      	bhi.n	800a156 <_realloc_r+0x5a>
 800a130:	4621      	mov	r1, r4
 800a132:	4640      	mov	r0, r8
 800a134:	f7fd f9fc 	bl	8007530 <_malloc_r>
 800a138:	4605      	mov	r5, r0
 800a13a:	2800      	cmp	r0, #0
 800a13c:	d0ed      	beq.n	800a11a <_realloc_r+0x1e>
 800a13e:	42bc      	cmp	r4, r7
 800a140:	4622      	mov	r2, r4
 800a142:	4631      	mov	r1, r6
 800a144:	bf28      	it	cs
 800a146:	463a      	movcs	r2, r7
 800a148:	f7fd f9bb 	bl	80074c2 <memcpy>
 800a14c:	4631      	mov	r1, r6
 800a14e:	4640      	mov	r0, r8
 800a150:	f7ff fb68 	bl	8009824 <_free_r>
 800a154:	e7e1      	b.n	800a11a <_realloc_r+0x1e>
 800a156:	4635      	mov	r5, r6
 800a158:	e7df      	b.n	800a11a <_realloc_r+0x1e>

0800a15a <_raise_r>:
 800a15a:	291f      	cmp	r1, #31
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	4604      	mov	r4, r0
 800a160:	460d      	mov	r5, r1
 800a162:	d904      	bls.n	800a16e <_raise_r+0x14>
 800a164:	2316      	movs	r3, #22
 800a166:	6003      	str	r3, [r0, #0]
 800a168:	f04f 30ff 	mov.w	r0, #4294967295
 800a16c:	bd38      	pop	{r3, r4, r5, pc}
 800a16e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a170:	b112      	cbz	r2, 800a178 <_raise_r+0x1e>
 800a172:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a176:	b94b      	cbnz	r3, 800a18c <_raise_r+0x32>
 800a178:	4620      	mov	r0, r4
 800a17a:	f000 f831 	bl	800a1e0 <_getpid_r>
 800a17e:	462a      	mov	r2, r5
 800a180:	4601      	mov	r1, r0
 800a182:	4620      	mov	r0, r4
 800a184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a188:	f000 b818 	b.w	800a1bc <_kill_r>
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d00a      	beq.n	800a1a6 <_raise_r+0x4c>
 800a190:	1c59      	adds	r1, r3, #1
 800a192:	d103      	bne.n	800a19c <_raise_r+0x42>
 800a194:	2316      	movs	r3, #22
 800a196:	6003      	str	r3, [r0, #0]
 800a198:	2001      	movs	r0, #1
 800a19a:	e7e7      	b.n	800a16c <_raise_r+0x12>
 800a19c:	2400      	movs	r4, #0
 800a19e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1a2:	4628      	mov	r0, r5
 800a1a4:	4798      	blx	r3
 800a1a6:	2000      	movs	r0, #0
 800a1a8:	e7e0      	b.n	800a16c <_raise_r+0x12>
	...

0800a1ac <raise>:
 800a1ac:	4b02      	ldr	r3, [pc, #8]	; (800a1b8 <raise+0xc>)
 800a1ae:	4601      	mov	r1, r0
 800a1b0:	6818      	ldr	r0, [r3, #0]
 800a1b2:	f7ff bfd2 	b.w	800a15a <_raise_r>
 800a1b6:	bf00      	nop
 800a1b8:	20000010 	.word	0x20000010

0800a1bc <_kill_r>:
 800a1bc:	b538      	push	{r3, r4, r5, lr}
 800a1be:	4d07      	ldr	r5, [pc, #28]	; (800a1dc <_kill_r+0x20>)
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	4604      	mov	r4, r0
 800a1c4:	4608      	mov	r0, r1
 800a1c6:	4611      	mov	r1, r2
 800a1c8:	602b      	str	r3, [r5, #0]
 800a1ca:	f7f7 fbcd 	bl	8001968 <_kill>
 800a1ce:	1c43      	adds	r3, r0, #1
 800a1d0:	d102      	bne.n	800a1d8 <_kill_r+0x1c>
 800a1d2:	682b      	ldr	r3, [r5, #0]
 800a1d4:	b103      	cbz	r3, 800a1d8 <_kill_r+0x1c>
 800a1d6:	6023      	str	r3, [r4, #0]
 800a1d8:	bd38      	pop	{r3, r4, r5, pc}
 800a1da:	bf00      	nop
 800a1dc:	20004ce4 	.word	0x20004ce4

0800a1e0 <_getpid_r>:
 800a1e0:	f7f7 bbba 	b.w	8001958 <_getpid>

0800a1e4 <__ascii_wctomb>:
 800a1e4:	b149      	cbz	r1, 800a1fa <__ascii_wctomb+0x16>
 800a1e6:	2aff      	cmp	r2, #255	; 0xff
 800a1e8:	bf85      	ittet	hi
 800a1ea:	238a      	movhi	r3, #138	; 0x8a
 800a1ec:	6003      	strhi	r3, [r0, #0]
 800a1ee:	700a      	strbls	r2, [r1, #0]
 800a1f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a1f4:	bf98      	it	ls
 800a1f6:	2001      	movls	r0, #1
 800a1f8:	4770      	bx	lr
 800a1fa:	4608      	mov	r0, r1
 800a1fc:	4770      	bx	lr
	...

0800a200 <_fstat_r>:
 800a200:	b538      	push	{r3, r4, r5, lr}
 800a202:	4d07      	ldr	r5, [pc, #28]	; (800a220 <_fstat_r+0x20>)
 800a204:	2300      	movs	r3, #0
 800a206:	4604      	mov	r4, r0
 800a208:	4608      	mov	r0, r1
 800a20a:	4611      	mov	r1, r2
 800a20c:	602b      	str	r3, [r5, #0]
 800a20e:	f7f7 fc0a 	bl	8001a26 <_fstat>
 800a212:	1c43      	adds	r3, r0, #1
 800a214:	d102      	bne.n	800a21c <_fstat_r+0x1c>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	b103      	cbz	r3, 800a21c <_fstat_r+0x1c>
 800a21a:	6023      	str	r3, [r4, #0]
 800a21c:	bd38      	pop	{r3, r4, r5, pc}
 800a21e:	bf00      	nop
 800a220:	20004ce4 	.word	0x20004ce4

0800a224 <_isatty_r>:
 800a224:	b538      	push	{r3, r4, r5, lr}
 800a226:	4d06      	ldr	r5, [pc, #24]	; (800a240 <_isatty_r+0x1c>)
 800a228:	2300      	movs	r3, #0
 800a22a:	4604      	mov	r4, r0
 800a22c:	4608      	mov	r0, r1
 800a22e:	602b      	str	r3, [r5, #0]
 800a230:	f7f7 fc09 	bl	8001a46 <_isatty>
 800a234:	1c43      	adds	r3, r0, #1
 800a236:	d102      	bne.n	800a23e <_isatty_r+0x1a>
 800a238:	682b      	ldr	r3, [r5, #0]
 800a23a:	b103      	cbz	r3, 800a23e <_isatty_r+0x1a>
 800a23c:	6023      	str	r3, [r4, #0]
 800a23e:	bd38      	pop	{r3, r4, r5, pc}
 800a240:	20004ce4 	.word	0x20004ce4

0800a244 <_malloc_usable_size_r>:
 800a244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a248:	1f18      	subs	r0, r3, #4
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	bfbc      	itt	lt
 800a24e:	580b      	ldrlt	r3, [r1, r0]
 800a250:	18c0      	addlt	r0, r0, r3
 800a252:	4770      	bx	lr

0800a254 <sqrt>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	ed2d 8b02 	vpush	{d8}
 800a25a:	ec55 4b10 	vmov	r4, r5, d0
 800a25e:	f000 f825 	bl	800a2ac <__ieee754_sqrt>
 800a262:	4622      	mov	r2, r4
 800a264:	462b      	mov	r3, r5
 800a266:	4620      	mov	r0, r4
 800a268:	4629      	mov	r1, r5
 800a26a:	eeb0 8a40 	vmov.f32	s16, s0
 800a26e:	eef0 8a60 	vmov.f32	s17, s1
 800a272:	f7f6 fc7b 	bl	8000b6c <__aeabi_dcmpun>
 800a276:	b990      	cbnz	r0, 800a29e <sqrt+0x4a>
 800a278:	2200      	movs	r2, #0
 800a27a:	2300      	movs	r3, #0
 800a27c:	4620      	mov	r0, r4
 800a27e:	4629      	mov	r1, r5
 800a280:	f7f6 fc4c 	bl	8000b1c <__aeabi_dcmplt>
 800a284:	b158      	cbz	r0, 800a29e <sqrt+0x4a>
 800a286:	f7fc fff9 	bl	800727c <__errno>
 800a28a:	2321      	movs	r3, #33	; 0x21
 800a28c:	6003      	str	r3, [r0, #0]
 800a28e:	2200      	movs	r2, #0
 800a290:	2300      	movs	r3, #0
 800a292:	4610      	mov	r0, r2
 800a294:	4619      	mov	r1, r3
 800a296:	f7f6 faf9 	bl	800088c <__aeabi_ddiv>
 800a29a:	ec41 0b18 	vmov	d8, r0, r1
 800a29e:	eeb0 0a48 	vmov.f32	s0, s16
 800a2a2:	eef0 0a68 	vmov.f32	s1, s17
 800a2a6:	ecbd 8b02 	vpop	{d8}
 800a2aa:	bd38      	pop	{r3, r4, r5, pc}

0800a2ac <__ieee754_sqrt>:
 800a2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b0:	ec55 4b10 	vmov	r4, r5, d0
 800a2b4:	4e55      	ldr	r6, [pc, #340]	; (800a40c <__ieee754_sqrt+0x160>)
 800a2b6:	43ae      	bics	r6, r5
 800a2b8:	ee10 0a10 	vmov	r0, s0
 800a2bc:	ee10 3a10 	vmov	r3, s0
 800a2c0:	462a      	mov	r2, r5
 800a2c2:	4629      	mov	r1, r5
 800a2c4:	d110      	bne.n	800a2e8 <__ieee754_sqrt+0x3c>
 800a2c6:	ee10 2a10 	vmov	r2, s0
 800a2ca:	462b      	mov	r3, r5
 800a2cc:	f7f6 f9b4 	bl	8000638 <__aeabi_dmul>
 800a2d0:	4602      	mov	r2, r0
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	4620      	mov	r0, r4
 800a2d6:	4629      	mov	r1, r5
 800a2d8:	f7f5 fff8 	bl	80002cc <__adddf3>
 800a2dc:	4604      	mov	r4, r0
 800a2de:	460d      	mov	r5, r1
 800a2e0:	ec45 4b10 	vmov	d0, r4, r5
 800a2e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2e8:	2d00      	cmp	r5, #0
 800a2ea:	dc10      	bgt.n	800a30e <__ieee754_sqrt+0x62>
 800a2ec:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a2f0:	4330      	orrs	r0, r6
 800a2f2:	d0f5      	beq.n	800a2e0 <__ieee754_sqrt+0x34>
 800a2f4:	b15d      	cbz	r5, 800a30e <__ieee754_sqrt+0x62>
 800a2f6:	ee10 2a10 	vmov	r2, s0
 800a2fa:	462b      	mov	r3, r5
 800a2fc:	ee10 0a10 	vmov	r0, s0
 800a300:	f7f5 ffe2 	bl	80002c8 <__aeabi_dsub>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	f7f6 fac0 	bl	800088c <__aeabi_ddiv>
 800a30c:	e7e6      	b.n	800a2dc <__ieee754_sqrt+0x30>
 800a30e:	1512      	asrs	r2, r2, #20
 800a310:	d074      	beq.n	800a3fc <__ieee754_sqrt+0x150>
 800a312:	07d4      	lsls	r4, r2, #31
 800a314:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a318:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800a31c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800a320:	bf5e      	ittt	pl
 800a322:	0fda      	lsrpl	r2, r3, #31
 800a324:	005b      	lslpl	r3, r3, #1
 800a326:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800a32a:	2400      	movs	r4, #0
 800a32c:	0fda      	lsrs	r2, r3, #31
 800a32e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800a332:	107f      	asrs	r7, r7, #1
 800a334:	005b      	lsls	r3, r3, #1
 800a336:	2516      	movs	r5, #22
 800a338:	4620      	mov	r0, r4
 800a33a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800a33e:	1886      	adds	r6, r0, r2
 800a340:	428e      	cmp	r6, r1
 800a342:	bfde      	ittt	le
 800a344:	1b89      	suble	r1, r1, r6
 800a346:	18b0      	addle	r0, r6, r2
 800a348:	18a4      	addle	r4, r4, r2
 800a34a:	0049      	lsls	r1, r1, #1
 800a34c:	3d01      	subs	r5, #1
 800a34e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800a352:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800a356:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a35a:	d1f0      	bne.n	800a33e <__ieee754_sqrt+0x92>
 800a35c:	462a      	mov	r2, r5
 800a35e:	f04f 0e20 	mov.w	lr, #32
 800a362:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a366:	4281      	cmp	r1, r0
 800a368:	eb06 0c05 	add.w	ip, r6, r5
 800a36c:	dc02      	bgt.n	800a374 <__ieee754_sqrt+0xc8>
 800a36e:	d113      	bne.n	800a398 <__ieee754_sqrt+0xec>
 800a370:	459c      	cmp	ip, r3
 800a372:	d811      	bhi.n	800a398 <__ieee754_sqrt+0xec>
 800a374:	f1bc 0f00 	cmp.w	ip, #0
 800a378:	eb0c 0506 	add.w	r5, ip, r6
 800a37c:	da43      	bge.n	800a406 <__ieee754_sqrt+0x15a>
 800a37e:	2d00      	cmp	r5, #0
 800a380:	db41      	blt.n	800a406 <__ieee754_sqrt+0x15a>
 800a382:	f100 0801 	add.w	r8, r0, #1
 800a386:	1a09      	subs	r1, r1, r0
 800a388:	459c      	cmp	ip, r3
 800a38a:	bf88      	it	hi
 800a38c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800a390:	eba3 030c 	sub.w	r3, r3, ip
 800a394:	4432      	add	r2, r6
 800a396:	4640      	mov	r0, r8
 800a398:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800a39c:	f1be 0e01 	subs.w	lr, lr, #1
 800a3a0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800a3a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a3a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a3ac:	d1db      	bne.n	800a366 <__ieee754_sqrt+0xba>
 800a3ae:	430b      	orrs	r3, r1
 800a3b0:	d006      	beq.n	800a3c0 <__ieee754_sqrt+0x114>
 800a3b2:	1c50      	adds	r0, r2, #1
 800a3b4:	bf13      	iteet	ne
 800a3b6:	3201      	addne	r2, #1
 800a3b8:	3401      	addeq	r4, #1
 800a3ba:	4672      	moveq	r2, lr
 800a3bc:	f022 0201 	bicne.w	r2, r2, #1
 800a3c0:	1063      	asrs	r3, r4, #1
 800a3c2:	0852      	lsrs	r2, r2, #1
 800a3c4:	07e1      	lsls	r1, r4, #31
 800a3c6:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a3ca:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a3ce:	bf48      	it	mi
 800a3d0:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800a3d4:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800a3d8:	4614      	mov	r4, r2
 800a3da:	e781      	b.n	800a2e0 <__ieee754_sqrt+0x34>
 800a3dc:	0ad9      	lsrs	r1, r3, #11
 800a3de:	3815      	subs	r0, #21
 800a3e0:	055b      	lsls	r3, r3, #21
 800a3e2:	2900      	cmp	r1, #0
 800a3e4:	d0fa      	beq.n	800a3dc <__ieee754_sqrt+0x130>
 800a3e6:	02cd      	lsls	r5, r1, #11
 800a3e8:	d50a      	bpl.n	800a400 <__ieee754_sqrt+0x154>
 800a3ea:	f1c2 0420 	rsb	r4, r2, #32
 800a3ee:	fa23 f404 	lsr.w	r4, r3, r4
 800a3f2:	1e55      	subs	r5, r2, #1
 800a3f4:	4093      	lsls	r3, r2
 800a3f6:	4321      	orrs	r1, r4
 800a3f8:	1b42      	subs	r2, r0, r5
 800a3fa:	e78a      	b.n	800a312 <__ieee754_sqrt+0x66>
 800a3fc:	4610      	mov	r0, r2
 800a3fe:	e7f0      	b.n	800a3e2 <__ieee754_sqrt+0x136>
 800a400:	0049      	lsls	r1, r1, #1
 800a402:	3201      	adds	r2, #1
 800a404:	e7ef      	b.n	800a3e6 <__ieee754_sqrt+0x13a>
 800a406:	4680      	mov	r8, r0
 800a408:	e7bd      	b.n	800a386 <__ieee754_sqrt+0xda>
 800a40a:	bf00      	nop
 800a40c:	7ff00000 	.word	0x7ff00000

0800a410 <_init>:
 800a410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a412:	bf00      	nop
 800a414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a416:	bc08      	pop	{r3}
 800a418:	469e      	mov	lr, r3
 800a41a:	4770      	bx	lr

0800a41c <_fini>:
 800a41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a41e:	bf00      	nop
 800a420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a422:	bc08      	pop	{r3}
 800a424:	469e      	mov	lr, r3
 800a426:	4770      	bx	lr
